import math
import numpy as np
import numpy.random as npr
import scipy.special as sps
from scipy.stats import binom # para la inversa de la distribucion binomial
from scipy.stats import norm
import random
import time
from itertools import combinations_with_replacement
import instance_maker

# funcion principal
def main():
	# datos de la instancia a generar
	M = 4
	J = 100
	lambda_ = 1.0 # lambda = 0 es mesas muy heterog√©neas; lambda = 1 es que las mesas son iguales
	#p_gi = [[0.2, 0.3, 0.1, 0.1, 0.1, 0.1, 0.1], 
	#		[0.3, 0.2, 0.1, 0.05, 0.05, 0.2, 0.1], 
	#		[0.1, 0.1, 0.2, 0.3, 0.05, 0.05, 0.2]] # I=7, G=3, instancia 2, 13, 14, 15

	#p_gi = [[0.2, 0.3, 0.1, 0.4], [0.3, 0.2, 0.1, 0.4], [0.1, 0.1, 0.2, 0.6], [0.2, 0.2, 0.3, 0.3], [0.8, 0.1, 0.05, 0.05]] # I=4, G=5
	#p_gi = [[0.2, 0.3, 0.5], [0.4, 0.4, 0.2]]
	#p_gi = [[0.6, 0.4], [0.2, 0.8], [0.3, 0.7], [0.3, 0.7]]
	#p_gi = [[0.8, 0.2], [0.4, 0.6]]
	#p_gi = [[0.2, 0.8], [0.3, 0.7], [0.6, 0.4]] # 3 grupos 2 candidatos # instancia 10
	#p_gi = [[0.2, 0.3, 0.5], [0.5, 0.2, 0.3], [0.4, 0.4, 0.2]] # instancia 11
	#p_gi = [[0.2, 0.3, 0.5], [0.5, 0.2, 0.3]] # I = 3, G = 2 # instancia 12
	p_gi = [[0.1, 0.9], [0.5, 0.5]]

	#instance_maker.gen_instance(M, J, p_gi, lambda_, terminar = True, imprimir_instancia = False)
	M, J, p_gi, lambda_, r_mgi, n_mi, b_mg = instance_maker.load_instance()

	# eleccion normal (sin fraude)
	#r_mgi, n_mi, b_mg = gen_data(M, J, p_gi, lambda_ = lambda_, printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance(printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance2(printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance3(printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance4(printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance6(printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance7(printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance8(printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance9(printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance10(printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance11(printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance12(printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance13(printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance14(printear_instancia = True)
	#r_mgi, n_mi, b_mg = force_instance15(printear_instancia = True)
	#print_r_mgi_b_gi(r_mgi, b_mg, lenguaje = "python")
	#exit()
	t1 = time.time()
	p_gi, q_mgi, ll, ll_m, iteraciones = EM(b_mg, n_mi, printear = False, epsilon = 1e-4, printear_resultados = True)
	t2 = time.time()
	print(t2-t1)
	exit()
	# ahora con fraude
	# respaldar variables
	r0_mgi = [[[r_mgi[m][g][i] for i in range(len(n_mi[0]))] for g in range(len(b_mg[0]))] for m in range(len(b_mg))]
	n0_mi = n_mi_from_r_mgi(r0_mgi)
	edit_election(r_mgi, m_edit = 1, printear = True)
	n_mi = n_mi_from_r_mgi(r_mgi)
	p_gi, q_mgi, ll, ll_m, iteraciones = EM(b_mg, n_mi, printear = True, printear_resultados = True)	

# M = 40, G = 3, I = 4, J = 100
def force_instance(printear_instancia = False):
	M = 40
	G = 3
	I = 4
	# J = 100
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]
	
	r_mgi[0][0][0] = 7
	r_mgi[0][0][1] = 8
	r_mgi[0][0][2] = 2
	r_mgi[0][0][3] = 15
	r_mgi[0][1][0] = 13
	r_mgi[0][1][1] = 10
	r_mgi[0][1][2] = 3
	r_mgi[0][1][3] = 16
	r_mgi[0][2][0] = 6
	r_mgi[0][2][1] = 3
	r_mgi[0][2][2] = 4
	r_mgi[0][2][3] = 13
	r_mgi[1][0][0] = 6
	r_mgi[1][0][1] = 10
	r_mgi[1][0][2] = 5
	r_mgi[1][0][3] = 14
	r_mgi[1][1][0] = 14
	r_mgi[1][1][1] = 6
	r_mgi[1][1][2] = 5
	r_mgi[1][1][3] = 22
	r_mgi[1][2][0] = 3
	r_mgi[1][2][1] = 1
	r_mgi[1][2][2] = 2
	r_mgi[1][2][3] = 12
	r_mgi[2][0][0] = 10
	r_mgi[2][0][1] = 15
	r_mgi[2][0][2] = 6
	r_mgi[2][0][3] = 19
	r_mgi[2][1][0] = 13
	r_mgi[2][1][1] = 7
	r_mgi[2][1][2] = 3
	r_mgi[2][1][3] = 11
	r_mgi[2][2][0] = 2
	r_mgi[2][2][1] = 1
	r_mgi[2][2][2] = 3
	r_mgi[2][2][3] = 10
	r_mgi[3][0][0] = 7
	r_mgi[3][0][1] = 12
	r_mgi[3][0][2] = 5
	r_mgi[3][0][3] = 19
	r_mgi[3][1][0] = 6
	r_mgi[3][1][1] = 7
	r_mgi[3][1][2] = 4
	r_mgi[3][1][3] = 16
	r_mgi[3][2][0] = 2
	r_mgi[3][2][1] = 2
	r_mgi[3][2][2] = 4
	r_mgi[3][2][3] = 16
	r_mgi[4][0][0] = 8
	r_mgi[4][0][1] = 16
	r_mgi[4][0][2] = 6
	r_mgi[4][0][3] = 12
	r_mgi[4][1][0] = 11
	r_mgi[4][1][1] = 8
	r_mgi[4][1][2] = 1
	r_mgi[4][1][3] = 16
	r_mgi[4][2][0] = 1
	r_mgi[4][2][1] = 2
	r_mgi[4][2][2] = 7
	r_mgi[4][2][3] = 12
	r_mgi[5][0][0] = 7
	r_mgi[5][0][1] = 13
	r_mgi[5][0][2] = 9
	r_mgi[5][0][3] = 14
	r_mgi[5][1][0] = 10
	r_mgi[5][1][1] = 7
	r_mgi[5][1][2] = 2
	r_mgi[5][1][3] = 15
	r_mgi[5][2][0] = 4
	r_mgi[5][2][1] = 2
	r_mgi[5][2][2] = 4
	r_mgi[5][2][3] = 13
	r_mgi[6][0][0] = 5
	r_mgi[6][0][1] = 8
	r_mgi[6][0][2] = 3
	r_mgi[6][0][3] = 15
	r_mgi[6][1][0] = 15
	r_mgi[6][1][1] = 11
	r_mgi[6][1][2] = 4
	r_mgi[6][1][3] = 14
	r_mgi[6][2][0] = 3
	r_mgi[6][2][1] = 3
	r_mgi[6][2][2] = 5
	r_mgi[6][2][3] = 14
	r_mgi[7][0][0] = 10
	r_mgi[7][0][1] = 16
	r_mgi[7][0][2] = 2
	r_mgi[7][0][3] = 17
	r_mgi[7][1][0] = 13
	r_mgi[7][1][1] = 5
	r_mgi[7][1][2] = 2
	r_mgi[7][1][3] = 16
	r_mgi[7][2][0] = 2
	r_mgi[7][2][1] = 0
	r_mgi[7][2][2] = 6
	r_mgi[7][2][3] = 11
	r_mgi[8][0][0] = 8
	r_mgi[8][0][1] = 12
	r_mgi[8][0][2] = 0
	r_mgi[8][0][3] = 16
	r_mgi[8][1][0] = 14
	r_mgi[8][1][1] = 9
	r_mgi[8][1][2] = 3
	r_mgi[8][1][3] = 19
	r_mgi[8][2][0] = 1
	r_mgi[8][2][1] = 3
	r_mgi[8][2][2] = 3
	r_mgi[8][2][3] = 12
	r_mgi[9][0][0] = 8
	r_mgi[9][0][1] = 11
	r_mgi[9][0][2] = 3
	r_mgi[9][0][3] = 14
	r_mgi[9][1][0] = 19
	r_mgi[9][1][1] = 10
	r_mgi[9][1][2] = 3
	r_mgi[9][1][3] = 15
	r_mgi[9][2][0] = 0
	r_mgi[9][2][1] = 1
	r_mgi[9][2][2] = 3
	r_mgi[9][2][3] = 13
	r_mgi[10][0][0] = 4
	r_mgi[10][0][1] = 9
	r_mgi[10][0][2] = 0
	r_mgi[10][0][3] = 4
	r_mgi[10][1][0] = 21
	r_mgi[10][1][1] = 12
	r_mgi[10][1][2] = 7
	r_mgi[10][1][3] = 22
	r_mgi[10][2][0] = 1
	r_mgi[10][2][1] = 2
	r_mgi[10][2][2] = 3
	r_mgi[10][2][3] = 15
	r_mgi[11][0][0] = 3
	r_mgi[11][0][1] = 6
	r_mgi[11][0][2] = 2
	r_mgi[11][0][3] = 8
	r_mgi[11][1][0] = 12
	r_mgi[11][1][1] = 8
	r_mgi[11][1][2] = 5
	r_mgi[11][1][3] = 28
	r_mgi[11][2][0] = 3
	r_mgi[11][2][1] = 4
	r_mgi[11][2][2] = 5
	r_mgi[11][2][3] = 16
	r_mgi[12][0][0] = 6
	r_mgi[12][0][1] = 4
	r_mgi[12][0][2] = 1
	r_mgi[12][0][3] = 8
	r_mgi[12][1][0] = 16
	r_mgi[12][1][1] = 9
	r_mgi[12][1][2] = 9
	r_mgi[12][1][3] = 24
	r_mgi[12][2][0] = 2
	r_mgi[12][2][1] = 2
	r_mgi[12][2][2] = 5
	r_mgi[12][2][3] = 14
	r_mgi[13][0][0] = 4
	r_mgi[13][0][1] = 1
	r_mgi[13][0][2] = 7
	r_mgi[13][0][3] = 9
	r_mgi[13][1][0] = 21
	r_mgi[13][1][1] = 8
	r_mgi[13][1][2] = 4
	r_mgi[13][1][3] = 23
	r_mgi[13][2][0] = 2
	r_mgi[13][2][1] = 4
	r_mgi[13][2][2] = 8
	r_mgi[13][2][3] = 9
	r_mgi[14][0][0] = 2
	r_mgi[14][0][1] = 5
	r_mgi[14][0][2] = 2
	r_mgi[14][0][3] = 5
	r_mgi[14][1][0] = 16
	r_mgi[14][1][1] = 13
	r_mgi[14][1][2] = 3
	r_mgi[14][1][3] = 24
	r_mgi[14][2][0] = 3
	r_mgi[14][2][1] = 5
	r_mgi[14][2][2] = 10
	r_mgi[14][2][3] = 12
	r_mgi[15][0][0] = 2
	r_mgi[15][0][1] = 6
	r_mgi[15][0][2] = 1
	r_mgi[15][0][3] = 11
	r_mgi[15][1][0] = 17
	r_mgi[15][1][1] = 12
	r_mgi[15][1][2] = 3
	r_mgi[15][1][3] = 25
	r_mgi[15][2][0] = 1
	r_mgi[15][2][1] = 5
	r_mgi[15][2][2] = 4
	r_mgi[15][2][3] = 13
	r_mgi[16][0][0] = 4
	r_mgi[16][0][1] = 8
	r_mgi[16][0][2] = 3
	r_mgi[16][0][3] = 7
	r_mgi[16][1][0] = 12
	r_mgi[16][1][1] = 15
	r_mgi[16][1][2] = 9
	r_mgi[16][1][3] = 23
	r_mgi[16][2][0] = 1
	r_mgi[16][2][1] = 3
	r_mgi[16][2][2] = 3
	r_mgi[16][2][3] = 12
	r_mgi[17][0][0] = 4
	r_mgi[17][0][1] = 9
	r_mgi[17][0][2] = 1
	r_mgi[17][0][3] = 11
	r_mgi[17][1][0] = 20
	r_mgi[17][1][1] = 15
	r_mgi[17][1][2] = 6
	r_mgi[17][1][3] = 20
	r_mgi[17][2][0] = 1
	r_mgi[17][2][1] = 1
	r_mgi[17][2][2] = 4
	r_mgi[17][2][3] = 8
	r_mgi[18][0][0] = 5
	r_mgi[18][0][1] = 4
	r_mgi[18][0][2] = 3
	r_mgi[18][0][3] = 11
	r_mgi[18][1][0] = 21
	r_mgi[18][1][1] = 9
	r_mgi[18][1][2] = 9
	r_mgi[18][1][3] = 19
	r_mgi[18][2][0] = 3
	r_mgi[18][2][1] = 2
	r_mgi[18][2][2] = 5
	r_mgi[18][2][3] = 9
	r_mgi[19][0][0] = 2
	r_mgi[19][0][1] = 9
	r_mgi[19][0][2] = 3
	r_mgi[19][0][3] = 6
	r_mgi[19][1][0] = 21
	r_mgi[19][1][1] = 7
	r_mgi[19][1][2] = 2
	r_mgi[19][1][3] = 24
	r_mgi[19][2][0] = 1
	r_mgi[19][2][1] = 2
	r_mgi[19][2][2] = 5
	r_mgi[19][2][3] = 18
	r_mgi[20][0][0] = 4
	r_mgi[20][0][1] = 3
	r_mgi[20][0][2] = 1
	r_mgi[20][0][3] = 11
	r_mgi[20][1][0] = 19
	r_mgi[20][1][1] = 10
	r_mgi[20][1][2] = 7
	r_mgi[20][1][3] = 19
	r_mgi[20][2][0] = 0
	r_mgi[20][2][1] = 3
	r_mgi[20][2][2] = 9
	r_mgi[20][2][3] = 14
	r_mgi[21][0][0] = 5
	r_mgi[21][0][1] = 5
	r_mgi[21][0][2] = 3
	r_mgi[21][0][3] = 9
	r_mgi[21][1][0] = 17
	r_mgi[21][1][1] = 14
	r_mgi[21][1][2] = 2
	r_mgi[21][1][3] = 29
	r_mgi[21][2][0] = 2
	r_mgi[21][2][1] = 0
	r_mgi[21][2][2] = 5
	r_mgi[21][2][3] = 9
	r_mgi[22][0][0] = 2
	r_mgi[22][0][1] = 2
	r_mgi[22][0][2] = 1
	r_mgi[22][0][3] = 6
	r_mgi[22][1][0] = 15
	r_mgi[22][1][1] = 17
	r_mgi[22][1][2] = 14
	r_mgi[22][1][3] = 23
	r_mgi[22][2][0] = 3
	r_mgi[22][2][1] = 2
	r_mgi[22][2][2] = 2
	r_mgi[22][2][3] = 13
	r_mgi[23][0][0] = 6
	r_mgi[23][0][1] = 8
	r_mgi[23][0][2] = 0
	r_mgi[23][0][3] = 11
	r_mgi[23][1][0] = 16
	r_mgi[23][1][1] = 8
	r_mgi[23][1][2] = 4
	r_mgi[23][1][3] = 17
	r_mgi[23][2][0] = 4
	r_mgi[23][2][1] = 2
	r_mgi[23][2][2] = 6
	r_mgi[23][2][3] = 18
	r_mgi[24][0][0] = 2
	r_mgi[24][0][1] = 5
	r_mgi[24][0][2] = 4
	r_mgi[24][0][3] = 7
	r_mgi[24][1][0] = 14
	r_mgi[24][1][1] = 12
	r_mgi[24][1][2] = 12
	r_mgi[24][1][3] = 20
	r_mgi[24][2][0] = 1
	r_mgi[24][2][1] = 5
	r_mgi[24][2][2] = 7
	r_mgi[24][2][3] = 11
	r_mgi[25][0][0] = 2
	r_mgi[25][0][1] = 7
	r_mgi[25][0][2] = 2
	r_mgi[25][0][3] = 9
	r_mgi[25][1][0] = 17
	r_mgi[25][1][1] = 8
	r_mgi[25][1][2] = 5
	r_mgi[25][1][3] = 31
	r_mgi[25][2][0] = 0
	r_mgi[25][2][1] = 1
	r_mgi[25][2][2] = 6
	r_mgi[25][2][3] = 12
	r_mgi[26][0][0] = 7
	r_mgi[26][0][1] = 2
	r_mgi[26][0][2] = 2
	r_mgi[26][0][3] = 10
	r_mgi[26][1][0] = 22
	r_mgi[26][1][1] = 8
	r_mgi[26][1][2] = 4
	r_mgi[26][1][3] = 15
	r_mgi[26][2][0] = 0
	r_mgi[26][2][1] = 3
	r_mgi[26][2][2] = 12
	r_mgi[26][2][3] = 15
	r_mgi[27][0][0] = 3
	r_mgi[27][0][1] = 3
	r_mgi[27][0][2] = 2
	r_mgi[27][0][3] = 9
	r_mgi[27][1][0] = 26
	r_mgi[27][1][1] = 10
	r_mgi[27][1][2] = 8
	r_mgi[27][1][3] = 21
	r_mgi[27][2][0] = 3
	r_mgi[27][2][1] = 1
	r_mgi[27][2][2] = 3
	r_mgi[27][2][3] = 11
	r_mgi[28][0][0] = 6
	r_mgi[28][0][1] = 6
	r_mgi[28][0][2] = 1
	r_mgi[28][0][3] = 10
	r_mgi[28][1][0] = 19
	r_mgi[28][1][1] = 8
	r_mgi[28][1][2] = 5
	r_mgi[28][1][3] = 11
	r_mgi[28][2][0] = 0
	r_mgi[28][2][1] = 3
	r_mgi[28][2][2] = 8
	r_mgi[28][2][3] = 23
	r_mgi[29][0][0] = 2
	r_mgi[29][0][1] = 12
	r_mgi[29][0][2] = 1
	r_mgi[29][0][3] = 6
	r_mgi[29][1][0] = 10
	r_mgi[29][1][1] = 6
	r_mgi[29][1][2] = 2
	r_mgi[29][1][3] = 20
	r_mgi[29][2][0] = 3
	r_mgi[29][2][1] = 3
	r_mgi[29][2][2] = 10
	r_mgi[29][2][3] = 25
	r_mgi[30][0][0] = 2
	r_mgi[30][0][1] = 5
	r_mgi[30][0][2] = 0
	r_mgi[30][0][3] = 10
	r_mgi[30][1][0] = 10
	r_mgi[30][1][1] = 8
	r_mgi[30][1][2] = 2
	r_mgi[30][1][3] = 17
	r_mgi[30][2][0] = 5
	r_mgi[30][2][1] = 3
	r_mgi[30][2][2] = 10
	r_mgi[30][2][3] = 28
	r_mgi[31][0][0] = 1
	r_mgi[31][0][1] = 9
	r_mgi[31][0][2] = 0
	r_mgi[31][0][3] = 8
	r_mgi[31][1][0] = 10
	r_mgi[31][1][1] = 12
	r_mgi[31][1][2] = 2
	r_mgi[31][1][3] = 21
	r_mgi[31][2][0] = 5
	r_mgi[31][2][1] = 7
	r_mgi[31][2][2] = 9
	r_mgi[31][2][3] = 16
	r_mgi[32][0][0] = 3
	r_mgi[32][0][1] = 6
	r_mgi[32][0][2] = 1
	r_mgi[32][0][3] = 3
	r_mgi[32][1][0] = 14
	r_mgi[32][1][1] = 6
	r_mgi[32][1][2] = 6
	r_mgi[32][1][3] = 11
	r_mgi[32][2][0] = 3
	r_mgi[32][2][1] = 9
	r_mgi[32][2][2] = 12
	r_mgi[32][2][3] = 26
	r_mgi[33][0][0] = 6
	r_mgi[33][0][1] = 3
	r_mgi[33][0][2] = 3
	r_mgi[33][0][3] = 9
	r_mgi[33][1][0] = 5
	r_mgi[33][1][1] = 10
	r_mgi[33][1][2] = 0
	r_mgi[33][1][3] = 19
	r_mgi[33][2][0] = 2
	r_mgi[33][2][1] = 3
	r_mgi[33][2][2] = 13
	r_mgi[33][2][3] = 27
	r_mgi[34][0][0] = 4
	r_mgi[34][0][1] = 7
	r_mgi[34][0][2] = 3
	r_mgi[34][0][3] = 9
	r_mgi[34][1][0] = 8
	r_mgi[34][1][1] = 7
	r_mgi[34][1][2] = 4
	r_mgi[34][1][3] = 14
	r_mgi[34][2][0] = 3
	r_mgi[34][2][1] = 4
	r_mgi[34][2][2] = 9
	r_mgi[34][2][3] = 28
	r_mgi[35][0][0] = 6
	r_mgi[35][0][1] = 4
	r_mgi[35][0][2] = 3
	r_mgi[35][0][3] = 3
	r_mgi[35][1][0] = 11
	r_mgi[35][1][1] = 7
	r_mgi[35][1][2] = 0
	r_mgi[35][1][3] = 16
	r_mgi[35][2][0] = 5
	r_mgi[35][2][1] = 8
	r_mgi[35][2][2] = 7
	r_mgi[35][2][3] = 30
	r_mgi[36][0][0] = 1
	r_mgi[36][0][1] = 5
	r_mgi[36][0][2] = 1
	r_mgi[36][0][3] = 8
	r_mgi[36][1][0] = 15
	r_mgi[36][1][1] = 3
	r_mgi[36][1][2] = 7
	r_mgi[36][1][3] = 14
	r_mgi[36][2][0] = 5
	r_mgi[36][2][1] = 7
	r_mgi[36][2][2] = 9
	r_mgi[36][2][3] = 25
	r_mgi[37][0][0] = 5
	r_mgi[37][0][1] = 4
	r_mgi[37][0][2] = 1
	r_mgi[37][0][3] = 8
	r_mgi[37][1][0] = 11
	r_mgi[37][1][1] = 10
	r_mgi[37][1][2] = 3
	r_mgi[37][1][3] = 15
	r_mgi[37][2][0] = 3
	r_mgi[37][2][1] = 8
	r_mgi[37][2][2] = 11
	r_mgi[37][2][3] = 21
	r_mgi[38][0][0] = 3
	r_mgi[38][0][1] = 6
	r_mgi[38][0][2] = 1
	r_mgi[38][0][3] = 7
	r_mgi[38][1][0] = 9
	r_mgi[38][1][1] = 7
	r_mgi[38][1][2] = 3
	r_mgi[38][1][3] = 19
	r_mgi[38][2][0] = 7
	r_mgi[38][2][1] = 6
	r_mgi[38][2][2] = 9
	r_mgi[38][2][3] = 23
	r_mgi[39][0][0] = 6
	r_mgi[39][0][1] = 3
	r_mgi[39][0][2] = 0
	r_mgi[39][0][3] = 6
	r_mgi[39][1][0] = 8
	r_mgi[39][1][1] = 7
	r_mgi[39][1][2] = 2
	r_mgi[39][1][3] = 19
	r_mgi[39][2][0] = 2
	r_mgi[39][2][1] = 6
	r_mgi[39][2][2] = 9
	r_mgi[39][2][3] = 32

	b_mg[0][0] = 32
	b_mg[0][1] = 42
	b_mg[0][2] = 26
	b_mg[1][0] = 35
	b_mg[1][1] = 47
	b_mg[1][2] = 18
	b_mg[2][0] = 50
	b_mg[2][1] = 34
	b_mg[2][2] = 16
	b_mg[3][0] = 43
	b_mg[3][1] = 33
	b_mg[3][2] = 24
	b_mg[4][0] = 42
	b_mg[4][1] = 36
	b_mg[4][2] = 22
	b_mg[5][0] = 43
	b_mg[5][1] = 34
	b_mg[5][2] = 23
	b_mg[6][0] = 31
	b_mg[6][1] = 44
	b_mg[6][2] = 25
	b_mg[7][0] = 45
	b_mg[7][1] = 36
	b_mg[7][2] = 19
	b_mg[8][0] = 36
	b_mg[8][1] = 45
	b_mg[8][2] = 19
	b_mg[9][0] = 36
	b_mg[9][1] = 47
	b_mg[9][2] = 17
	b_mg[10][0] = 17
	b_mg[10][1] = 62
	b_mg[10][2] = 21
	b_mg[11][0] = 19
	b_mg[11][1] = 53
	b_mg[11][2] = 28
	b_mg[12][0] = 19
	b_mg[12][1] = 58
	b_mg[12][2] = 23
	b_mg[13][0] = 21
	b_mg[13][1] = 56
	b_mg[13][2] = 23
	b_mg[14][0] = 14
	b_mg[14][1] = 56
	b_mg[14][2] = 30
	b_mg[15][0] = 20
	b_mg[15][1] = 57
	b_mg[15][2] = 23
	b_mg[16][0] = 22
	b_mg[16][1] = 59
	b_mg[16][2] = 19
	b_mg[17][0] = 25
	b_mg[17][1] = 61
	b_mg[17][2] = 14
	b_mg[18][0] = 23
	b_mg[18][1] = 58
	b_mg[18][2] = 19
	b_mg[19][0] = 20
	b_mg[19][1] = 54
	b_mg[19][2] = 26
	b_mg[20][0] = 19
	b_mg[20][1] = 55
	b_mg[20][2] = 26
	b_mg[21][0] = 22
	b_mg[21][1] = 62
	b_mg[21][2] = 16
	b_mg[22][0] = 11
	b_mg[22][1] = 69
	b_mg[22][2] = 20
	b_mg[23][0] = 25
	b_mg[23][1] = 45
	b_mg[23][2] = 30
	b_mg[24][0] = 18
	b_mg[24][1] = 58
	b_mg[24][2] = 24
	b_mg[25][0] = 20
	b_mg[25][1] = 61
	b_mg[25][2] = 19
	b_mg[26][0] = 21
	b_mg[26][1] = 49
	b_mg[26][2] = 30
	b_mg[27][0] = 17
	b_mg[27][1] = 65
	b_mg[27][2] = 18
	b_mg[28][0] = 23
	b_mg[28][1] = 43
	b_mg[28][2] = 34
	b_mg[29][0] = 21
	b_mg[29][1] = 38
	b_mg[29][2] = 41
	b_mg[30][0] = 17
	b_mg[30][1] = 37
	b_mg[30][2] = 46
	b_mg[31][0] = 18
	b_mg[31][1] = 45
	b_mg[31][2] = 37
	b_mg[32][0] = 13
	b_mg[32][1] = 37
	b_mg[32][2] = 50
	b_mg[33][0] = 21
	b_mg[33][1] = 34
	b_mg[33][2] = 45
	b_mg[34][0] = 23
	b_mg[34][1] = 33
	b_mg[34][2] = 44
	b_mg[35][0] = 16
	b_mg[35][1] = 34
	b_mg[35][2] = 50
	b_mg[36][0] = 15
	b_mg[36][1] = 39
	b_mg[36][2] = 46
	b_mg[37][0] = 18
	b_mg[37][1] = 39
	b_mg[37][2] = 43
	b_mg[38][0] = 17
	b_mg[38][1] = 38
	b_mg[38][2] = 45
	b_mg[39][0] = 15
	b_mg[39][1] = 36
	b_mg[39][2] = 49

	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 40, G = 3, I = 7, J = 20
def force_instance2(printear_instancia = False):
	M = 40
	G = 3
	I = 7
	# J = 20
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 2
	r_mgi[0][0][1] = 1
	r_mgi[0][0][2] = 0
	r_mgi[0][0][3] = 1
	r_mgi[0][0][4] = 1
	r_mgi[0][0][5] = 0
	r_mgi[0][0][6] = 1
	r_mgi[0][1][0] = 5
	r_mgi[0][1][1] = 1
	r_mgi[0][1][2] = 0
	r_mgi[0][1][3] = 0
	r_mgi[0][1][4] = 0
	r_mgi[0][1][5] = 0
	r_mgi[0][1][6] = 1
	r_mgi[0][2][0] = 0
	r_mgi[0][2][1] = 0
	r_mgi[0][2][2] = 1
	r_mgi[0][2][3] = 4
	r_mgi[0][2][4] = 0
	r_mgi[0][2][5] = 0
	r_mgi[0][2][6] = 2
	r_mgi[1][0][0] = 2
	r_mgi[1][0][1] = 2
	r_mgi[1][0][2] = 1
	r_mgi[1][0][3] = 2
	r_mgi[1][0][4] = 1
	r_mgi[1][0][5] = 0
	r_mgi[1][0][6] = 0
	r_mgi[1][1][0] = 2
	r_mgi[1][1][1] = 2
	r_mgi[1][1][2] = 0
	r_mgi[1][1][3] = 0
	r_mgi[1][1][4] = 0
	r_mgi[1][1][5] = 3
	r_mgi[1][1][6] = 0
	r_mgi[1][2][0] = 1
	r_mgi[1][2][1] = 0
	r_mgi[1][2][2] = 1
	r_mgi[1][2][3] = 1
	r_mgi[1][2][4] = 0
	r_mgi[1][2][5] = 0
	r_mgi[1][2][6] = 2
	r_mgi[2][0][0] = 2
	r_mgi[2][0][1] = 3
	r_mgi[2][0][2] = 3
	r_mgi[2][0][3] = 2
	r_mgi[2][0][4] = 1
	r_mgi[2][0][5] = 1
	r_mgi[2][0][6] = 0
	r_mgi[2][1][0] = 0
	r_mgi[2][1][1] = 1
	r_mgi[2][1][2] = 1
	r_mgi[2][1][3] = 1
	r_mgi[2][1][4] = 0
	r_mgi[2][1][5] = 1
	r_mgi[2][1][6] = 1
	r_mgi[2][2][0] = 2
	r_mgi[2][2][1] = 0
	r_mgi[2][2][2] = 0
	r_mgi[2][2][3] = 0
	r_mgi[2][2][4] = 0
	r_mgi[2][2][5] = 0
	r_mgi[2][2][6] = 1
	r_mgi[3][0][0] = 1
	r_mgi[3][0][1] = 1
	r_mgi[3][0][2] = 0
	r_mgi[3][0][3] = 0
	r_mgi[3][0][4] = 1
	r_mgi[3][0][5] = 1
	r_mgi[3][0][6] = 0
	r_mgi[3][1][0] = 3
	r_mgi[3][1][1] = 2
	r_mgi[3][1][2] = 1
	r_mgi[3][1][3] = 1
	r_mgi[3][1][4] = 1
	r_mgi[3][1][5] = 1
	r_mgi[3][1][6] = 1
	r_mgi[3][2][0] = 0
	r_mgi[3][2][1] = 1
	r_mgi[3][2][2] = 1
	r_mgi[3][2][3] = 1
	r_mgi[3][2][4] = 0
	r_mgi[3][2][5] = 0
	r_mgi[3][2][6] = 3
	r_mgi[4][0][0] = 3
	r_mgi[4][0][1] = 2
	r_mgi[4][0][2] = 1
	r_mgi[4][0][3] = 0
	r_mgi[4][0][4] = 0
	r_mgi[4][0][5] = 1
	r_mgi[4][0][6] = 0
	r_mgi[4][1][0] = 1
	r_mgi[4][1][1] = 1
	r_mgi[4][1][2] = 2
	r_mgi[4][1][3] = 0
	r_mgi[4][1][4] = 1
	r_mgi[4][1][5] = 2
	r_mgi[4][1][6] = 1
	r_mgi[4][2][0] = 0
	r_mgi[4][2][1] = 2
	r_mgi[4][2][2] = 1
	r_mgi[4][2][3] = 1
	r_mgi[4][2][4] = 0
	r_mgi[4][2][5] = 0
	r_mgi[4][2][6] = 1
	r_mgi[5][0][0] = 1
	r_mgi[5][0][1] = 3
	r_mgi[5][0][2] = 3
	r_mgi[5][0][3] = 0
	r_mgi[5][0][4] = 0
	r_mgi[5][0][5] = 0
	r_mgi[5][0][6] = 0
	r_mgi[5][1][0] = 1
	r_mgi[5][1][1] = 2
	r_mgi[5][1][2] = 0
	r_mgi[5][1][3] = 0
	r_mgi[5][1][4] = 0
	r_mgi[5][1][5] = 2
	r_mgi[5][1][6] = 0
	r_mgi[5][2][0] = 0
	r_mgi[5][2][1] = 0
	r_mgi[5][2][2] = 2
	r_mgi[5][2][3] = 4
	r_mgi[5][2][4] = 0
	r_mgi[5][2][5] = 0
	r_mgi[5][2][6] = 2
	r_mgi[6][0][0] = 1
	r_mgi[6][0][1] = 4
	r_mgi[6][0][2] = 2
	r_mgi[6][0][3] = 1
	r_mgi[6][0][4] = 1
	r_mgi[6][0][5] = 0
	r_mgi[6][0][6] = 1
	r_mgi[6][1][0] = 1
	r_mgi[6][1][1] = 1
	r_mgi[6][1][2] = 0
	r_mgi[6][1][3] = 1
	r_mgi[6][1][4] = 0
	r_mgi[6][1][5] = 1
	r_mgi[6][1][6] = 1
	r_mgi[6][2][0] = 0
	r_mgi[6][2][1] = 0
	r_mgi[6][2][2] = 0
	r_mgi[6][2][3] = 5
	r_mgi[6][2][4] = 0
	r_mgi[6][2][5] = 0
	r_mgi[6][2][6] = 0
	r_mgi[7][0][0] = 2
	r_mgi[7][0][1] = 0
	r_mgi[7][0][2] = 0
	r_mgi[7][0][3] = 0
	r_mgi[7][0][4] = 2
	r_mgi[7][0][5] = 0
	r_mgi[7][0][6] = 0
	r_mgi[7][1][0] = 7
	r_mgi[7][1][1] = 0
	r_mgi[7][1][2] = 1
	r_mgi[7][1][3] = 1
	r_mgi[7][1][4] = 0
	r_mgi[7][1][5] = 1
	r_mgi[7][1][6] = 1
	r_mgi[7][2][0] = 0
	r_mgi[7][2][1] = 1
	r_mgi[7][2][2] = 2
	r_mgi[7][2][3] = 2
	r_mgi[7][2][4] = 0
	r_mgi[7][2][5] = 0
	r_mgi[7][2][6] = 0
	r_mgi[8][0][0] = 0
	r_mgi[8][0][1] = 3
	r_mgi[8][0][2] = 0
	r_mgi[8][0][3] = 2
	r_mgi[8][0][4] = 2
	r_mgi[8][0][5] = 0
	r_mgi[8][0][6] = 3
	r_mgi[8][1][0] = 1
	r_mgi[8][1][1] = 3
	r_mgi[8][1][2] = 0
	r_mgi[8][1][3] = 0
	r_mgi[8][1][4] = 1
	r_mgi[8][1][5] = 0
	r_mgi[8][1][6] = 1
	r_mgi[8][2][0] = 0
	r_mgi[8][2][1] = 1
	r_mgi[8][2][2] = 1
	r_mgi[8][2][3] = 0
	r_mgi[8][2][4] = 1
	r_mgi[8][2][5] = 0
	r_mgi[8][2][6] = 1
	r_mgi[9][0][0] = 0
	r_mgi[9][0][1] = 1
	r_mgi[9][0][2] = 0
	r_mgi[9][0][3] = 1
	r_mgi[9][0][4] = 1
	r_mgi[9][0][5] = 0
	r_mgi[9][0][6] = 0
	r_mgi[9][1][0] = 5
	r_mgi[9][1][1] = 3
	r_mgi[9][1][2] = 1
	r_mgi[9][1][3] = 1
	r_mgi[9][1][4] = 1
	r_mgi[9][1][5] = 4
	r_mgi[9][1][6] = 0
	r_mgi[9][2][0] = 0
	r_mgi[9][2][1] = 1
	r_mgi[9][2][2] = 0
	r_mgi[9][2][3] = 1
	r_mgi[9][2][4] = 0
	r_mgi[9][2][5] = 0
	r_mgi[9][2][6] = 0
	r_mgi[10][0][0] = 2
	r_mgi[10][0][1] = 2
	r_mgi[10][0][2] = 1
	r_mgi[10][0][3] = 0
	r_mgi[10][0][4] = 1
	r_mgi[10][0][5] = 0
	r_mgi[10][0][6] = 0
	r_mgi[10][1][0] = 5
	r_mgi[10][1][1] = 4
	r_mgi[10][1][2] = 0
	r_mgi[10][1][3] = 0
	r_mgi[10][1][4] = 0
	r_mgi[10][1][5] = 2
	r_mgi[10][1][6] = 1
	r_mgi[10][2][0] = 0
	r_mgi[10][2][1] = 0
	r_mgi[10][2][2] = 0
	r_mgi[10][2][3] = 0
	r_mgi[10][2][4] = 1
	r_mgi[10][2][5] = 0
	r_mgi[10][2][6] = 1
	r_mgi[11][0][0] = 2
	r_mgi[11][0][1] = 0
	r_mgi[11][0][2] = 1
	r_mgi[11][0][3] = 2
	r_mgi[11][0][4] = 0
	r_mgi[11][0][5] = 0
	r_mgi[11][0][6] = 1
	r_mgi[11][1][0] = 3
	r_mgi[11][1][1] = 1
	r_mgi[11][1][2] = 1
	r_mgi[11][1][3] = 0
	r_mgi[11][1][4] = 1
	r_mgi[11][1][5] = 3
	r_mgi[11][1][6] = 0
	r_mgi[11][2][0] = 1
	r_mgi[11][2][1] = 0
	r_mgi[11][2][2] = 0
	r_mgi[11][2][3] = 2
	r_mgi[11][2][4] = 0
	r_mgi[11][2][5] = 1
	r_mgi[11][2][6] = 1
	r_mgi[12][0][0] = 3
	r_mgi[12][0][1] = 1
	r_mgi[12][0][2] = 0
	r_mgi[12][0][3] = 0
	r_mgi[12][0][4] = 0
	r_mgi[12][0][5] = 0
	r_mgi[12][0][6] = 0
	r_mgi[12][1][0] = 3
	r_mgi[12][1][1] = 0
	r_mgi[12][1][2] = 2
	r_mgi[12][1][3] = 1
	r_mgi[12][1][4] = 0
	r_mgi[12][1][5] = 1
	r_mgi[12][1][6] = 2
	r_mgi[12][2][0] = 1
	r_mgi[12][2][1] = 0
	r_mgi[12][2][2] = 2
	r_mgi[12][2][3] = 2
	r_mgi[12][2][4] = 0
	r_mgi[12][2][5] = 0
	r_mgi[12][2][6] = 2
	r_mgi[13][0][0] = 0
	r_mgi[13][0][1] = 2
	r_mgi[13][0][2] = 0
	r_mgi[13][0][3] = 0
	r_mgi[13][0][4] = 1
	r_mgi[13][0][5] = 0
	r_mgi[13][0][6] = 0
	r_mgi[13][1][0] = 2
	r_mgi[13][1][1] = 4
	r_mgi[13][1][2] = 2
	r_mgi[13][1][3] = 0
	r_mgi[13][1][4] = 0
	r_mgi[13][1][5] = 1
	r_mgi[13][1][6] = 0
	r_mgi[13][2][0] = 0
	r_mgi[13][2][1] = 0
	r_mgi[13][2][2] = 1
	r_mgi[13][2][3] = 2
	r_mgi[13][2][4] = 0
	r_mgi[13][2][5] = 2
	r_mgi[13][2][6] = 3
	r_mgi[14][0][0] = 2
	r_mgi[14][0][1] = 0
	r_mgi[14][0][2] = 0
	r_mgi[14][0][3] = 2
	r_mgi[14][0][4] = 0
	r_mgi[14][0][5] = 0
	r_mgi[14][0][6] = 0
	r_mgi[14][1][0] = 4
	r_mgi[14][1][1] = 3
	r_mgi[14][1][2] = 0
	r_mgi[14][1][3] = 1
	r_mgi[14][1][4] = 3
	r_mgi[14][1][5] = 2
	r_mgi[14][1][6] = 0
	r_mgi[14][2][0] = 0
	r_mgi[14][2][1] = 0
	r_mgi[14][2][2] = 2
	r_mgi[14][2][3] = 0
	r_mgi[14][2][4] = 0
	r_mgi[14][2][5] = 0
	r_mgi[14][2][6] = 1
	r_mgi[15][0][0] = 0
	r_mgi[15][0][1] = 1
	r_mgi[15][0][2] = 1
	r_mgi[15][0][3] = 0
	r_mgi[15][0][4] = 0
	r_mgi[15][0][5] = 1
	r_mgi[15][0][6] = 0
	r_mgi[15][1][0] = 5
	r_mgi[15][1][1] = 4
	r_mgi[15][1][2] = 0
	r_mgi[15][1][3] = 0
	r_mgi[15][1][4] = 1
	r_mgi[15][1][5] = 5
	r_mgi[15][1][6] = 0
	r_mgi[15][2][0] = 2
	r_mgi[15][2][1] = 0
	r_mgi[15][2][2] = 0
	r_mgi[15][2][3] = 0
	r_mgi[15][2][4] = 0
	r_mgi[15][2][5] = 0
	r_mgi[15][2][6] = 0
	r_mgi[16][0][0] = 0
	r_mgi[16][0][1] = 1
	r_mgi[16][0][2] = 0
	r_mgi[16][0][3] = 0
	r_mgi[16][0][4] = 0
	r_mgi[16][0][5] = 1
	r_mgi[16][0][6] = 1
	r_mgi[16][1][0] = 5
	r_mgi[16][1][1] = 2
	r_mgi[16][1][2] = 1
	r_mgi[16][1][3] = 0
	r_mgi[16][1][4] = 1
	r_mgi[16][1][5] = 4
	r_mgi[16][1][6] = 2
	r_mgi[16][2][0] = 0
	r_mgi[16][2][1] = 0
	r_mgi[16][2][2] = 0
	r_mgi[16][2][3] = 1
	r_mgi[16][2][4] = 0
	r_mgi[16][2][5] = 1
	r_mgi[16][2][6] = 0
	r_mgi[17][0][0] = 0
	r_mgi[17][0][1] = 0
	r_mgi[17][0][2] = 1
	r_mgi[17][0][3] = 0
	r_mgi[17][0][4] = 1
	r_mgi[17][0][5] = 0
	r_mgi[17][0][6] = 0
	r_mgi[17][1][0] = 8
	r_mgi[17][1][1] = 3
	r_mgi[17][1][2] = 1
	r_mgi[17][1][3] = 2
	r_mgi[17][1][4] = 0
	r_mgi[17][1][5] = 0
	r_mgi[17][1][6] = 1
	r_mgi[17][2][0] = 0
	r_mgi[17][2][1] = 1
	r_mgi[17][2][2] = 0
	r_mgi[17][2][3] = 2
	r_mgi[17][2][4] = 0
	r_mgi[17][2][5] = 0
	r_mgi[17][2][6] = 0
	r_mgi[18][0][0] = 1
	r_mgi[18][0][1] = 1
	r_mgi[18][0][2] = 0
	r_mgi[18][0][3] = 0
	r_mgi[18][0][4] = 0
	r_mgi[18][0][5] = 0
	r_mgi[18][0][6] = 0
	r_mgi[18][1][0] = 2
	r_mgi[18][1][1] = 3
	r_mgi[18][1][2] = 0
	r_mgi[18][1][3] = 1
	r_mgi[18][1][4] = 0
	r_mgi[18][1][5] = 5
	r_mgi[18][1][6] = 0
	r_mgi[18][2][0] = 0
	r_mgi[18][2][1] = 2
	r_mgi[18][2][2] = 1
	r_mgi[18][2][3] = 2
	r_mgi[18][2][4] = 0
	r_mgi[18][2][5] = 0
	r_mgi[18][2][6] = 2
	r_mgi[19][0][0] = 1
	r_mgi[19][0][1] = 2
	r_mgi[19][0][2] = 0
	r_mgi[19][0][3] = 0
	r_mgi[19][0][4] = 1
	r_mgi[19][0][5] = 2
	r_mgi[19][0][6] = 0
	r_mgi[19][1][0] = 4
	r_mgi[19][1][1] = 4
	r_mgi[19][1][2] = 1
	r_mgi[19][1][3] = 0
	r_mgi[19][1][4] = 0
	r_mgi[19][1][5] = 2
	r_mgi[19][1][6] = 1
	r_mgi[19][2][0] = 1
	r_mgi[19][2][1] = 0
	r_mgi[19][2][2] = 0
	r_mgi[19][2][3] = 0
	r_mgi[19][2][4] = 0
	r_mgi[19][2][5] = 1
	r_mgi[19][2][6] = 0
	r_mgi[20][0][0] = 0
	r_mgi[20][0][1] = 2
	r_mgi[20][0][2] = 0
	r_mgi[20][0][3] = 1
	r_mgi[20][0][4] = 0
	r_mgi[20][0][5] = 0
	r_mgi[20][0][6] = 0
	r_mgi[20][1][0] = 4
	r_mgi[20][1][1] = 4
	r_mgi[20][1][2] = 1
	r_mgi[20][1][3] = 0
	r_mgi[20][1][4] = 0
	r_mgi[20][1][5] = 2
	r_mgi[20][1][6] = 2
	r_mgi[20][2][0] = 0
	r_mgi[20][2][1] = 0
	r_mgi[20][2][2] = 2
	r_mgi[20][2][3] = 2
	r_mgi[20][2][4] = 0
	r_mgi[20][2][5] = 0
	r_mgi[20][2][6] = 0
	r_mgi[21][0][0] = 0
	r_mgi[21][0][1] = 2
	r_mgi[21][0][2] = 0
	r_mgi[21][0][3] = 0
	r_mgi[21][0][4] = 0
	r_mgi[21][0][5] = 1
	r_mgi[21][0][6] = 1
	r_mgi[21][1][0] = 5
	r_mgi[21][1][1] = 3
	r_mgi[21][1][2] = 1
	r_mgi[21][1][3] = 1
	r_mgi[21][1][4] = 0
	r_mgi[21][1][5] = 1
	r_mgi[21][1][6] = 0
	r_mgi[21][2][0] = 0
	r_mgi[21][2][1] = 0
	r_mgi[21][2][2] = 0
	r_mgi[21][2][3] = 1
	r_mgi[21][2][4] = 1
	r_mgi[21][2][5] = 0
	r_mgi[21][2][6] = 3
	r_mgi[22][0][0] = 1
	r_mgi[22][0][1] = 1
	r_mgi[22][0][2] = 1
	r_mgi[22][0][3] = 0
	r_mgi[22][0][4] = 0
	r_mgi[22][0][5] = 1
	r_mgi[22][0][6] = 1
	r_mgi[22][1][0] = 3
	r_mgi[22][1][1] = 2
	r_mgi[22][1][2] = 1
	r_mgi[22][1][3] = 1
	r_mgi[22][1][4] = 2
	r_mgi[22][1][5] = 1
	r_mgi[22][1][6] = 1
	r_mgi[22][2][0] = 0
	r_mgi[22][2][1] = 1
	r_mgi[22][2][2] = 1
	r_mgi[22][2][3] = 0
	r_mgi[22][2][4] = 1
	r_mgi[22][2][5] = 0
	r_mgi[22][2][6] = 1
	r_mgi[23][0][0] = 1
	r_mgi[23][0][1] = 0
	r_mgi[23][0][2] = 0
	r_mgi[23][0][3] = 1
	r_mgi[23][0][4] = 0
	r_mgi[23][0][5] = 0
	r_mgi[23][0][6] = 0
	r_mgi[23][1][0] = 5
	r_mgi[23][1][1] = 4
	r_mgi[23][1][2] = 1
	r_mgi[23][1][3] = 0
	r_mgi[23][1][4] = 0
	r_mgi[23][1][5] = 2
	r_mgi[23][1][6] = 2
	r_mgi[23][2][0] = 1
	r_mgi[23][2][1] = 0
	r_mgi[23][2][2] = 0
	r_mgi[23][2][3] = 1
	r_mgi[23][2][4] = 1
	r_mgi[23][2][5] = 0
	r_mgi[23][2][6] = 1
	r_mgi[24][0][0] = 1
	r_mgi[24][0][1] = 1
	r_mgi[24][0][2] = 0
	r_mgi[24][0][3] = 1
	r_mgi[24][0][4] = 0
	r_mgi[24][0][5] = 2
	r_mgi[24][0][6] = 1
	r_mgi[24][1][0] = 3
	r_mgi[24][1][1] = 1
	r_mgi[24][1][2] = 3
	r_mgi[24][1][3] = 0
	r_mgi[24][1][4] = 1
	r_mgi[24][1][5] = 2
	r_mgi[24][1][6] = 0
	r_mgi[24][2][0] = 1
	r_mgi[24][2][1] = 0
	r_mgi[24][2][2] = 1
	r_mgi[24][2][3] = 0
	r_mgi[24][2][4] = 0
	r_mgi[24][2][5] = 0
	r_mgi[24][2][6] = 2
	r_mgi[25][0][0] = 2
	r_mgi[25][0][1] = 0
	r_mgi[25][0][2] = 0
	r_mgi[25][0][3] = 0
	r_mgi[25][0][4] = 0
	r_mgi[25][0][5] = 0
	r_mgi[25][0][6] = 1
	r_mgi[25][1][0] = 3
	r_mgi[25][1][1] = 4
	r_mgi[25][1][2] = 1
	r_mgi[25][1][3] = 0
	r_mgi[25][1][4] = 2
	r_mgi[25][1][5] = 1
	r_mgi[25][1][6] = 1
	r_mgi[25][2][0] = 0
	r_mgi[25][2][1] = 2
	r_mgi[25][2][2] = 3
	r_mgi[25][2][3] = 0
	r_mgi[25][2][4] = 0
	r_mgi[25][2][5] = 0
	r_mgi[25][2][6] = 0
	r_mgi[26][0][0] = 1
	r_mgi[26][0][1] = 2
	r_mgi[26][0][2] = 0
	r_mgi[26][0][3] = 0
	r_mgi[26][0][4] = 0
	r_mgi[26][0][5] = 1
	r_mgi[26][0][6] = 1
	r_mgi[26][1][0] = 2
	r_mgi[26][1][1] = 2
	r_mgi[26][1][2] = 0
	r_mgi[26][1][3] = 2
	r_mgi[26][1][4] = 0
	r_mgi[26][1][5] = 2
	r_mgi[26][1][6] = 1
	r_mgi[26][2][0] = 0
	r_mgi[26][2][1] = 0
	r_mgi[26][2][2] = 1
	r_mgi[26][2][3] = 4
	r_mgi[26][2][4] = 0
	r_mgi[26][2][5] = 0
	r_mgi[26][2][6] = 1
	r_mgi[27][0][0] = 2
	r_mgi[27][0][1] = 1
	r_mgi[27][0][2] = 0
	r_mgi[27][0][3] = 0
	r_mgi[27][0][4] = 0
	r_mgi[27][0][5] = 0
	r_mgi[27][0][6] = 0
	r_mgi[27][1][0] = 3
	r_mgi[27][1][1] = 3
	r_mgi[27][1][2] = 0
	r_mgi[27][1][3] = 0
	r_mgi[27][1][4] = 2
	r_mgi[27][1][5] = 4
	r_mgi[27][1][6] = 2
	r_mgi[27][2][0] = 0
	r_mgi[27][2][1] = 1
	r_mgi[27][2][2] = 0
	r_mgi[27][2][3] = 0
	r_mgi[27][2][4] = 0
	r_mgi[27][2][5] = 1
	r_mgi[27][2][6] = 1
	r_mgi[28][0][0] = 2
	r_mgi[28][0][1] = 0
	r_mgi[28][0][2] = 0
	r_mgi[28][0][3] = 0
	r_mgi[28][0][4] = 1
	r_mgi[28][0][5] = 0
	r_mgi[28][0][6] = 0
	r_mgi[28][1][0] = 4
	r_mgi[28][1][1] = 1
	r_mgi[28][1][2] = 2
	r_mgi[28][1][3] = 0
	r_mgi[28][1][4] = 0
	r_mgi[28][1][5] = 3
	r_mgi[28][1][6] = 2
	r_mgi[28][2][0] = 0
	r_mgi[28][2][1] = 1
	r_mgi[28][2][2] = 1
	r_mgi[28][2][3] = 1
	r_mgi[28][2][4] = 2
	r_mgi[28][2][5] = 0
	r_mgi[28][2][6] = 0
	r_mgi[29][0][0] = 0
	r_mgi[29][0][1] = 2
	r_mgi[29][0][2] = 0
	r_mgi[29][0][3] = 1
	r_mgi[29][0][4] = 0
	r_mgi[29][0][5] = 0
	r_mgi[29][0][6] = 1
	r_mgi[29][1][0] = 3
	r_mgi[29][1][1] = 2
	r_mgi[29][1][2] = 1
	r_mgi[29][1][3] = 0
	r_mgi[29][1][4] = 0
	r_mgi[29][1][5] = 1
	r_mgi[29][1][6] = 1
	r_mgi[29][2][0] = 0
	r_mgi[29][2][1] = 2
	r_mgi[29][2][2] = 0
	r_mgi[29][2][3] = 3
	r_mgi[29][2][4] = 2
	r_mgi[29][2][5] = 1
	r_mgi[29][2][6] = 0
	r_mgi[30][0][0] = 0
	r_mgi[30][0][1] = 0
	r_mgi[30][0][2] = 3
	r_mgi[30][0][3] = 1
	r_mgi[30][0][4] = 0
	r_mgi[30][0][5] = 0
	r_mgi[30][0][6] = 0
	r_mgi[30][1][0] = 4
	r_mgi[30][1][1] = 1
	r_mgi[30][1][2] = 1
	r_mgi[30][1][3] = 0
	r_mgi[30][1][4] = 0
	r_mgi[30][1][5] = 1
	r_mgi[30][1][6] = 1
	r_mgi[30][2][0] = 0
	r_mgi[30][2][1] = 2
	r_mgi[30][2][2] = 1
	r_mgi[30][2][3] = 2
	r_mgi[30][2][4] = 0
	r_mgi[30][2][5] = 2
	r_mgi[30][2][6] = 1
	r_mgi[31][0][0] = 1
	r_mgi[31][0][1] = 3
	r_mgi[31][0][2] = 1
	r_mgi[31][0][3] = 1
	r_mgi[31][0][4] = 0
	r_mgi[31][0][5] = 0
	r_mgi[31][0][6] = 1
	r_mgi[31][1][0] = 1
	r_mgi[31][1][1] = 1
	r_mgi[31][1][2] = 1
	r_mgi[31][1][3] = 0
	r_mgi[31][1][4] = 0
	r_mgi[31][1][5] = 1
	r_mgi[31][1][6] = 0
	r_mgi[31][2][0] = 1
	r_mgi[31][2][1] = 3
	r_mgi[31][2][2] = 0
	r_mgi[31][2][3] = 2
	r_mgi[31][2][4] = 0
	r_mgi[31][2][5] = 0
	r_mgi[31][2][6] = 3
	r_mgi[32][0][0] = 0
	r_mgi[32][0][1] = 2
	r_mgi[32][0][2] = 0
	r_mgi[32][0][3] = 0
	r_mgi[32][0][4] = 2
	r_mgi[32][0][5] = 0
	r_mgi[32][0][6] = 0
	r_mgi[32][1][0] = 2
	r_mgi[32][1][1] = 0
	r_mgi[32][1][2] = 1
	r_mgi[32][1][3] = 0
	r_mgi[32][1][4] = 0
	r_mgi[32][1][5] = 3
	r_mgi[32][1][6] = 1
	r_mgi[32][2][0] = 1
	r_mgi[32][2][1] = 1
	r_mgi[32][2][2] = 1
	r_mgi[32][2][3] = 3
	r_mgi[32][2][4] = 0
	r_mgi[32][2][5] = 1
	r_mgi[32][2][6] = 2
	r_mgi[33][0][0] = 0
	r_mgi[33][0][1] = 2
	r_mgi[33][0][2] = 0
	r_mgi[33][0][3] = 0
	r_mgi[33][0][4] = 1
	r_mgi[33][0][5] = 1
	r_mgi[33][0][6] = 0
	r_mgi[33][1][0] = 2
	r_mgi[33][1][1] = 0
	r_mgi[33][1][2] = 1
	r_mgi[33][1][3] = 1
	r_mgi[33][1][4] = 0
	r_mgi[33][1][5] = 1
	r_mgi[33][1][6] = 2
	r_mgi[33][2][0] = 0
	r_mgi[33][2][1] = 1
	r_mgi[33][2][2] = 2
	r_mgi[33][2][3] = 2
	r_mgi[33][2][4] = 1
	r_mgi[33][2][5] = 0
	r_mgi[33][2][6] = 3
	r_mgi[34][0][0] = 2
	r_mgi[34][0][1] = 2
	r_mgi[34][0][2] = 1
	r_mgi[34][0][3] = 0
	r_mgi[34][0][4] = 0
	r_mgi[34][0][5] = 0
	r_mgi[34][0][6] = 1
	r_mgi[34][1][0] = 2
	r_mgi[34][1][1] = 0
	r_mgi[34][1][2] = 0
	r_mgi[34][1][3] = 0
	r_mgi[34][1][4] = 0
	r_mgi[34][1][5] = 0
	r_mgi[34][1][6] = 2
	r_mgi[34][2][0] = 1
	r_mgi[34][2][1] = 2
	r_mgi[34][2][2] = 2
	r_mgi[34][2][3] = 4
	r_mgi[34][2][4] = 1
	r_mgi[34][2][5] = 0
	r_mgi[34][2][6] = 0
	r_mgi[35][0][0] = 2
	r_mgi[35][0][1] = 1
	r_mgi[35][0][2] = 0
	r_mgi[35][0][3] = 0
	r_mgi[35][0][4] = 0
	r_mgi[35][0][5] = 0
	r_mgi[35][0][6] = 0
	r_mgi[35][1][0] = 4
	r_mgi[35][1][1] = 2
	r_mgi[35][1][2] = 1
	r_mgi[35][1][3] = 1
	r_mgi[35][1][4] = 0
	r_mgi[35][1][5] = 2
	r_mgi[35][1][6] = 0
	r_mgi[35][2][0] = 1
	r_mgi[35][2][1] = 1
	r_mgi[35][2][2] = 1
	r_mgi[35][2][3] = 2
	r_mgi[35][2][4] = 0
	r_mgi[35][2][5] = 0
	r_mgi[35][2][6] = 2
	r_mgi[36][0][0] = 0
	r_mgi[36][0][1] = 2
	r_mgi[36][0][2] = 0
	r_mgi[36][0][3] = 1
	r_mgi[36][0][4] = 0
	r_mgi[36][0][5] = 0
	r_mgi[36][0][6] = 1
	r_mgi[36][1][0] = 1
	r_mgi[36][1][1] = 3
	r_mgi[36][1][2] = 2
	r_mgi[36][1][3] = 2
	r_mgi[36][1][4] = 1
	r_mgi[36][1][5] = 1
	r_mgi[36][1][6] = 0
	r_mgi[36][2][0] = 1
	r_mgi[36][2][1] = 0
	r_mgi[36][2][2] = 0
	r_mgi[36][2][3] = 2
	r_mgi[36][2][4] = 0
	r_mgi[36][2][5] = 1
	r_mgi[36][2][6] = 2
	r_mgi[37][0][0] = 0
	r_mgi[37][0][1] = 3
	r_mgi[37][0][2] = 2
	r_mgi[37][0][3] = 0
	r_mgi[37][0][4] = 0
	r_mgi[37][0][5] = 1
	r_mgi[37][0][6] = 1
	r_mgi[37][1][0] = 4
	r_mgi[37][1][1] = 1
	r_mgi[37][1][2] = 0
	r_mgi[37][1][3] = 1
	r_mgi[37][1][4] = 0
	r_mgi[37][1][5] = 0
	r_mgi[37][1][6] = 0
	r_mgi[37][2][0] = 1
	r_mgi[37][2][1] = 1
	r_mgi[37][2][2] = 3
	r_mgi[37][2][3] = 2
	r_mgi[37][2][4] = 0
	r_mgi[37][2][5] = 0
	r_mgi[37][2][6] = 0
	r_mgi[38][0][0] = 1
	r_mgi[38][0][1] = 2
	r_mgi[38][0][2] = 1
	r_mgi[38][0][3] = 0
	r_mgi[38][0][4] = 0
	r_mgi[38][0][5] = 0
	r_mgi[38][0][6] = 1
	r_mgi[38][1][0] = 1
	r_mgi[38][1][1] = 0
	r_mgi[38][1][2] = 2
	r_mgi[38][1][3] = 0
	r_mgi[38][1][4] = 0
	r_mgi[38][1][5] = 1
	r_mgi[38][1][6] = 0
	r_mgi[38][2][0] = 4
	r_mgi[38][2][1] = 1
	r_mgi[38][2][2] = 1
	r_mgi[38][2][3] = 1
	r_mgi[38][2][4] = 2
	r_mgi[38][2][5] = 1
	r_mgi[38][2][6] = 1
	r_mgi[39][0][0] = 0
	r_mgi[39][0][1] = 0
	r_mgi[39][0][2] = 0
	r_mgi[39][0][3] = 1
	r_mgi[39][0][4] = 1
	r_mgi[39][0][5] = 0
	r_mgi[39][0][6] = 0
	r_mgi[39][1][0] = 1
	r_mgi[39][1][1] = 1
	r_mgi[39][1][2] = 0
	r_mgi[39][1][3] = 0
	r_mgi[39][1][4] = 0
	r_mgi[39][1][5] = 1
	r_mgi[39][1][6] = 2
	r_mgi[39][2][0] = 2
	r_mgi[39][2][1] = 0
	r_mgi[39][2][2] = 2
	r_mgi[39][2][3] = 5
	r_mgi[39][2][4] = 1
	r_mgi[39][2][5] = 1
	r_mgi[39][2][6] = 2

	b_mg[0][0] = 6
	b_mg[0][1] = 7
	b_mg[0][2] = 7
	b_mg[1][0] = 8
	b_mg[1][1] = 7
	b_mg[1][2] = 5
	b_mg[2][0] = 12
	b_mg[2][1] = 5
	b_mg[2][2] = 3
	b_mg[3][0] = 4
	b_mg[3][1] = 10
	b_mg[3][2] = 6
	b_mg[4][0] = 7
	b_mg[4][1] = 8
	b_mg[4][2] = 5
	b_mg[5][0] = 7
	b_mg[5][1] = 5
	b_mg[5][2] = 8
	b_mg[6][0] = 10
	b_mg[6][1] = 5
	b_mg[6][2] = 5
	b_mg[7][0] = 4
	b_mg[7][1] = 11
	b_mg[7][2] = 5
	b_mg[8][0] = 10
	b_mg[8][1] = 6
	b_mg[8][2] = 4
	b_mg[9][0] = 3
	b_mg[9][1] = 15
	b_mg[9][2] = 2
	b_mg[10][0] = 6
	b_mg[10][1] = 12
	b_mg[10][2] = 2
	b_mg[11][0] = 6
	b_mg[11][1] = 9
	b_mg[11][2] = 5
	b_mg[12][0] = 4
	b_mg[12][1] = 9
	b_mg[12][2] = 7
	b_mg[13][0] = 3
	b_mg[13][1] = 9
	b_mg[13][2] = 8
	b_mg[14][0] = 4
	b_mg[14][1] = 13
	b_mg[14][2] = 3
	b_mg[15][0] = 3
	b_mg[15][1] = 15
	b_mg[15][2] = 2
	b_mg[16][0] = 3
	b_mg[16][1] = 15
	b_mg[16][2] = 2
	b_mg[17][0] = 2
	b_mg[17][1] = 15
	b_mg[17][2] = 3
	b_mg[18][0] = 2
	b_mg[18][1] = 11
	b_mg[18][2] = 7
	b_mg[19][0] = 6
	b_mg[19][1] = 12
	b_mg[19][2] = 2
	b_mg[20][0] = 3
	b_mg[20][1] = 13
	b_mg[20][2] = 4
	b_mg[21][0] = 4
	b_mg[21][1] = 11
	b_mg[21][2] = 5
	b_mg[22][0] = 5
	b_mg[22][1] = 11
	b_mg[22][2] = 4
	b_mg[23][0] = 2
	b_mg[23][1] = 14
	b_mg[23][2] = 4
	b_mg[24][0] = 6
	b_mg[24][1] = 10
	b_mg[24][2] = 4
	b_mg[25][0] = 3
	b_mg[25][1] = 12
	b_mg[25][2] = 5
	b_mg[26][0] = 5
	b_mg[26][1] = 9
	b_mg[26][2] = 6
	b_mg[27][0] = 3
	b_mg[27][1] = 14
	b_mg[27][2] = 3
	b_mg[28][0] = 3
	b_mg[28][1] = 12
	b_mg[28][2] = 5
	b_mg[29][0] = 4
	b_mg[29][1] = 8
	b_mg[29][2] = 8
	b_mg[30][0] = 4
	b_mg[30][1] = 8
	b_mg[30][2] = 8
	b_mg[31][0] = 7
	b_mg[31][1] = 4
	b_mg[31][2] = 9
	b_mg[32][0] = 4
	b_mg[32][1] = 7
	b_mg[32][2] = 9
	b_mg[33][0] = 4
	b_mg[33][1] = 7
	b_mg[33][2] = 9
	b_mg[34][0] = 6
	b_mg[34][1] = 4
	b_mg[34][2] = 10
	b_mg[35][0] = 3
	b_mg[35][1] = 10
	b_mg[35][2] = 7
	b_mg[36][0] = 4
	b_mg[36][1] = 10
	b_mg[36][2] = 6
	b_mg[37][0] = 7
	b_mg[37][1] = 6
	b_mg[37][2] = 7
	b_mg[38][0] = 5
	b_mg[38][1] = 4
	b_mg[38][2] = 11
	b_mg[39][0] = 2
	b_mg[39][1] = 5
	b_mg[39][2] = 13

	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 5, G = 2, I = 2, J = 
def force_instance3(printear_instancia = False):
	M = 5
	G = 2
	I = 2
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 7
	r_mgi[0][0][1] = 3
	r_mgi[0][1][0] = 3
	r_mgi[0][1][1] = 7
	r_mgi[1][0][0] = 9
	r_mgi[1][0][1] = 1
	r_mgi[1][1][0] = 4
	r_mgi[1][1][1] = 6
	r_mgi[2][0][0] = 4
	r_mgi[2][0][1] = 1
	r_mgi[2][1][0] = 6
	r_mgi[2][1][1] = 9
	r_mgi[3][0][0] = 2
	r_mgi[3][0][1] = 3
	r_mgi[3][1][0] = 7
	r_mgi[3][1][1] = 8
	r_mgi[4][0][0] = 4
	r_mgi[4][0][1] = 1
	r_mgi[4][1][0] = 5
	r_mgi[4][1][1] = 10

	b_mg[0][0] = 10
	b_mg[0][1] = 10
	b_mg[1][0] = 10
	b_mg[1][1] = 10
	b_mg[2][0] = 5
	b_mg[2][1] = 15
	b_mg[3][0] = 5
	b_mg[3][1] = 15
	b_mg[4][0] = 5
	b_mg[4][1] = 15


	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 5, G = 2, I = 3, J = 
def force_instance4(printear_instancia = False):
	M = 5
	G = 2
	I = 3
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 2
	r_mgi[0][0][1] = 2
	r_mgi[0][0][2] = 4
	r_mgi[0][1][0] = 4
	r_mgi[0][1][1] = 5
	r_mgi[0][1][2] = 3
	r_mgi[1][0][0] = 2
	r_mgi[1][0][1] = 2
	r_mgi[1][0][2] = 5
	r_mgi[1][1][0] = 8
	r_mgi[1][1][1] = 2
	r_mgi[1][1][2] = 1
	r_mgi[2][0][0] = 2
	r_mgi[2][0][1] = 2
	r_mgi[2][0][2] = 5
	r_mgi[2][1][0] = 4
	r_mgi[2][1][1] = 4
	r_mgi[2][1][2] = 3
	r_mgi[3][0][0] = 1
	r_mgi[3][0][1] = 0
	r_mgi[3][0][2] = 3
	r_mgi[3][1][0] = 6
	r_mgi[3][1][1] = 6
	r_mgi[3][1][2] = 4
	r_mgi[4][0][0] = 0
	r_mgi[4][0][1] = 1
	r_mgi[4][0][2] = 4
	r_mgi[4][1][0] = 6
	r_mgi[4][1][1] = 6
	r_mgi[4][1][2] = 3

	b_mg[0][0] = 8
	b_mg[0][1] = 12
	b_mg[1][0] = 9
	b_mg[1][1] = 11
	b_mg[2][0] = 9
	b_mg[2][1] = 11
	b_mg[3][0] = 4
	b_mg[3][1] = 16
	b_mg[4][0] = 5
	b_mg[4][1] = 15

	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 5, G = 5, I = I, J = 
def force_instance5(printear_instancia = False):
	M = 5
	G = 5
	I = 4
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 7
	r_mgi[0][0][1] = 7
	r_mgi[0][0][2] = 2
	r_mgi[0][0][3] = 12
	r_mgi[0][1][0] = 10
	r_mgi[0][1][1] = 8
	r_mgi[0][1][2] = 3
	r_mgi[0][1][3] = 13
	r_mgi[0][2][0] = 4
	r_mgi[0][2][1] = 1
	r_mgi[0][2][2] = 2
	r_mgi[0][2][3] = 7
	r_mgi[0][3][0] = 3
	r_mgi[0][3][1] = 3
	r_mgi[0][3][2] = 8
	r_mgi[0][3][3] = 6
	r_mgi[0][4][0] = 3
	r_mgi[0][4][1] = 1
	r_mgi[0][4][2] = 0
	r_mgi[0][4][3] = 0
	r_mgi[1][0][0] = 2
	r_mgi[1][0][1] = 4
	r_mgi[1][0][2] = 0
	r_mgi[1][0][3] = 4
	r_mgi[1][1][0] = 10
	r_mgi[1][1][1] = 9
	r_mgi[1][1][2] = 4
	r_mgi[1][1][3] = 18
	r_mgi[1][2][0] = 2
	r_mgi[1][2][1] = 3
	r_mgi[1][2][2] = 4
	r_mgi[1][2][3] = 8
	r_mgi[1][3][0] = 5
	r_mgi[1][3][1] = 5
	r_mgi[1][3][2] = 5
	r_mgi[1][3][3] = 7
	r_mgi[1][4][0] = 9
	r_mgi[1][4][1] = 1
	r_mgi[1][4][2] = 0
	r_mgi[1][4][3] = 0
	r_mgi[2][0][0] = 2
	r_mgi[2][0][1] = 5
	r_mgi[2][0][2] = 0
	r_mgi[2][0][3] = 6
	r_mgi[2][1][0] = 7
	r_mgi[2][1][1] = 5
	r_mgi[2][1][2] = 3
	r_mgi[2][1][3] = 11
	r_mgi[2][2][0] = 2
	r_mgi[2][2][1] = 2
	r_mgi[2][2][2] = 5
	r_mgi[2][2][3] = 17
	r_mgi[2][3][0] = 9
	r_mgi[2][3][1] = 8
	r_mgi[2][3][2] = 6
	r_mgi[2][3][3] = 6
	r_mgi[2][4][0] = 5
	r_mgi[2][4][1] = 1
	r_mgi[2][4][2] = 0
	r_mgi[2][4][3] = 0
	r_mgi[3][0][0] = 1
	r_mgi[3][0][1] = 3
	r_mgi[3][0][2] = 2
	r_mgi[3][0][3] = 3
	r_mgi[3][1][0] = 5
	r_mgi[3][1][1] = 4
	r_mgi[3][1][2] = 5
	r_mgi[3][1][3] = 6
	r_mgi[3][2][0] = 1
	r_mgi[3][2][1] = 1
	r_mgi[3][2][2] = 1
	r_mgi[3][2][3] = 7
	r_mgi[3][3][0] = 14
	r_mgi[3][3][1] = 11
	r_mgi[3][3][2] = 15
	r_mgi[3][3][3] = 14
	r_mgi[3][4][0] = 6
	r_mgi[3][4][1] = 1
	r_mgi[3][4][2] = 0
	r_mgi[3][4][3] = 0
	r_mgi[4][0][0] = 2
	r_mgi[4][0][1] = 4
	r_mgi[4][0][2] = 2
	r_mgi[4][0][3] = 4
	r_mgi[4][1][0] = 5
	r_mgi[4][1][1] = 4
	r_mgi[4][1][2] = 2
	r_mgi[4][1][3] = 6
	r_mgi[4][2][0] = 2
	r_mgi[4][2][1] = 2
	r_mgi[4][2][2] = 5
	r_mgi[4][2][3] = 8
	r_mgi[4][3][0] = 5
	r_mgi[4][3][1] = 11
	r_mgi[4][3][2] = 11
	r_mgi[4][3][3] = 14
	r_mgi[4][4][0] = 12
	r_mgi[4][4][1] = 0
	r_mgi[4][4][2] = 1
	r_mgi[4][4][3] = 0

	b_mg[0][0] = 28
	b_mg[0][1] = 34
	b_mg[0][2] = 14
	b_mg[0][3] = 20
	b_mg[0][4] = 4
	b_mg[1][0] = 10
	b_mg[1][1] = 41
	b_mg[1][2] = 17
	b_mg[1][3] = 22
	b_mg[1][4] = 10
	b_mg[2][0] = 13
	b_mg[2][1] = 26
	b_mg[2][2] = 26
	b_mg[2][3] = 29
	b_mg[2][4] = 6
	b_mg[3][0] = 9
	b_mg[3][1] = 20
	b_mg[3][2] = 10
	b_mg[3][3] = 54
	b_mg[3][4] = 7
	b_mg[4][0] = 12
	b_mg[4][1] = 17
	b_mg[4][2] = 17
	b_mg[4][3] = 41
	b_mg[4][4] = 13

	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 5, G = 5, I = 4, J = 
def force_instance6(printear_instancia = False):
	M = 5
	G = 5
	I = 4
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 7
	r_mgi[0][0][1] = 7
	r_mgi[0][0][2] = 2
	r_mgi[0][0][3] = 12
	r_mgi[0][1][0] = 9
	r_mgi[0][1][1] = 7
	r_mgi[0][1][2] = 2
	r_mgi[0][1][3] = 12
	r_mgi[0][2][0] = 4
	r_mgi[0][2][1] = 2
	r_mgi[0][2][2] = 2
	r_mgi[0][2][3] = 7
	r_mgi[0][3][0] = 3
	r_mgi[0][3][1] = 3
	r_mgi[0][3][2] = 8
	r_mgi[0][3][3] = 5
	r_mgi[0][4][0] = 7
	r_mgi[0][4][1] = 1
	r_mgi[0][4][2] = 0
	r_mgi[0][4][3] = 0
	r_mgi[1][0][0] = 2
	r_mgi[1][0][1] = 5
	r_mgi[1][0][2] = 0
	r_mgi[1][0][3] = 6
	r_mgi[1][1][0] = 10
	r_mgi[1][1][1] = 9
	r_mgi[1][1][2] = 5
	r_mgi[1][1][3] = 18
	r_mgi[1][2][0] = 2
	r_mgi[1][2][1] = 2
	r_mgi[1][2][2] = 3
	r_mgi[1][2][3] = 6
	r_mgi[1][3][0] = 6
	r_mgi[1][3][1] = 6
	r_mgi[1][3][2] = 6
	r_mgi[1][3][3] = 8
	r_mgi[1][4][0] = 5
	r_mgi[1][4][1] = 1
	r_mgi[1][4][2] = 0
	r_mgi[1][4][3] = 0
	r_mgi[2][0][0] = 2
	r_mgi[2][0][1] = 5
	r_mgi[2][0][2] = 0
	r_mgi[2][0][3] = 7
	r_mgi[2][1][0] = 6
	r_mgi[2][1][1] = 4
	r_mgi[2][1][2] = 2
	r_mgi[2][1][3] = 9
	r_mgi[2][2][0] = 2
	r_mgi[2][2][1] = 2
	r_mgi[2][2][2] = 5
	r_mgi[2][2][3] = 18
	r_mgi[2][3][0] = 9
	r_mgi[2][3][1] = 9
	r_mgi[2][3][2] = 6
	r_mgi[2][3][3] = 6
	r_mgi[2][4][0] = 6
	r_mgi[2][4][1] = 2
	r_mgi[2][4][2] = 0
	r_mgi[2][4][3] = 0
	r_mgi[3][0][0] = 1
	r_mgi[3][0][1] = 2
	r_mgi[3][0][2] = 2
	r_mgi[3][0][3] = 2
	r_mgi[3][1][0] = 5
	r_mgi[3][1][1] = 5
	r_mgi[3][1][2] = 6
	r_mgi[3][1][3] = 7
	r_mgi[3][2][0] = 1
	r_mgi[3][2][1] = 2
	r_mgi[3][2][2] = 1
	r_mgi[3][2][3] = 9
	r_mgi[3][3][0] = 13
	r_mgi[3][3][1] = 10
	r_mgi[3][3][2] = 14
	r_mgi[3][3][3] = 13
	r_mgi[3][4][0] = 6
	r_mgi[3][4][1] = 1
	r_mgi[3][4][2] = 0
	r_mgi[3][4][3] = 0
	r_mgi[4][0][0] = 2
	r_mgi[4][0][1] = 4
	r_mgi[4][0][2] = 2
	r_mgi[4][0][3] = 2
	r_mgi[4][1][0] = 7
	r_mgi[4][1][1] = 5
	r_mgi[4][1][2] = 2
	r_mgi[4][1][3] = 8
	r_mgi[4][2][0] = 2
	r_mgi[4][2][1] = 2
	r_mgi[4][2][2] = 4
	r_mgi[4][2][3] = 8
	r_mgi[4][3][0] = 5
	r_mgi[4][3][1] = 11
	r_mgi[4][3][2] = 11
	r_mgi[4][3][3] = 14
	r_mgi[4][4][0] = 10
	r_mgi[4][4][1] = 0
	r_mgi[4][4][2] = 1
	r_mgi[4][4][3] = 0

	b_mg[0][0] = 28
	b_mg[0][1] = 30
	b_mg[0][2] = 15
	b_mg[0][3] = 19
	b_mg[0][4] = 8
	b_mg[1][0] = 13
	b_mg[1][1] = 42
	b_mg[1][2] = 13
	b_mg[1][3] = 26
	b_mg[1][4] = 6
	b_mg[2][0] = 14
	b_mg[2][1] = 21
	b_mg[2][2] = 27
	b_mg[2][3] = 30
	b_mg[2][4] = 8
	b_mg[3][0] = 7
	b_mg[3][1] = 23
	b_mg[3][2] = 13
	b_mg[3][3] = 50
	b_mg[3][4] = 7
	b_mg[4][0] = 10
	b_mg[4][1] = 22
	b_mg[4][2] = 16
	b_mg[4][3] = 41
	b_mg[4][4] = 11

	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 5, G = 5, I = 4, J =
def force_instance7(printear_instancia = False):
	M = 5
	G = 5
	I = 4
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 2
	r_mgi[0][0][1] = 1
	r_mgi[0][0][2] = 0
	r_mgi[0][0][3] = 4
	r_mgi[0][1][0] = 3
	r_mgi[0][1][1] = 2
	r_mgi[0][1][2] = 1
	r_mgi[0][1][3] = 3
	r_mgi[0][2][0] = 3
	r_mgi[0][2][1] = 1
	r_mgi[0][2][2] = 1
	r_mgi[0][2][3] = 2
	r_mgi[0][3][0] = 1
	r_mgi[0][3][1] = 1
	r_mgi[0][3][2] = 3
	r_mgi[0][3][3] = 1
	r_mgi[0][4][0] = 1
	r_mgi[0][4][1] = 0
	r_mgi[0][4][2] = 0
	r_mgi[0][4][3] = 0
	r_mgi[1][0][0] = 0
	r_mgi[1][0][1] = 1
	r_mgi[1][0][2] = 1
	r_mgi[1][0][3] = 1
	r_mgi[1][1][0] = 2
	r_mgi[1][1][1] = 2
	r_mgi[1][1][2] = 2
	r_mgi[1][1][3] = 6
	r_mgi[1][2][0] = 0
	r_mgi[1][2][1] = 1
	r_mgi[1][2][2] = 2
	r_mgi[1][2][3] = 1
	r_mgi[1][3][0] = 2
	r_mgi[1][3][1] = 2
	r_mgi[1][3][2] = 3
	r_mgi[1][3][3] = 1
	r_mgi[1][4][0] = 3
	r_mgi[1][4][1] = 0
	r_mgi[1][4][2] = 0
	r_mgi[1][4][3] = 0
	r_mgi[2][0][0] = 1
	r_mgi[2][0][1] = 2
	r_mgi[2][0][2] = 0
	r_mgi[2][0][3] = 5
	r_mgi[2][1][0] = 3
	r_mgi[2][1][1] = 0
	r_mgi[2][1][2] = 1
	r_mgi[2][1][3] = 5
	r_mgi[2][2][0] = 0
	r_mgi[2][2][1] = 0
	r_mgi[2][2][2] = 1
	r_mgi[2][2][3] = 4
	r_mgi[2][3][0] = 1
	r_mgi[2][3][1] = 1
	r_mgi[2][3][2] = 3
	r_mgi[2][3][3] = 1
	r_mgi[2][4][0] = 1
	r_mgi[2][4][1] = 0
	r_mgi[2][4][2] = 0
	r_mgi[2][4][3] = 1
	r_mgi[3][0][0] = 0
	r_mgi[3][0][1] = 1
	r_mgi[3][0][2] = 0
	r_mgi[3][0][3] = 2
	r_mgi[3][1][0] = 2
	r_mgi[3][1][1] = 0
	r_mgi[3][1][2] = 0
	r_mgi[3][1][3] = 2
	r_mgi[3][2][0] = 2
	r_mgi[3][2][1] = 0
	r_mgi[3][2][2] = 1
	r_mgi[3][2][3] = 2
	r_mgi[3][3][0] = 2
	r_mgi[3][3][1] = 6
	r_mgi[3][3][2] = 5
	r_mgi[3][3][3] = 5
	r_mgi[3][4][0] = 0
	r_mgi[3][4][1] = 0
	r_mgi[3][4][2] = 0
	r_mgi[3][4][3] = 0
	r_mgi[4][0][0] = 0
	r_mgi[4][0][1] = 0
	r_mgi[4][0][2] = 0
	r_mgi[4][0][3] = 2
	r_mgi[4][1][0] = 2
	r_mgi[4][1][1] = 2
	r_mgi[4][1][2] = 1
	r_mgi[4][1][3] = 2
	r_mgi[4][2][0] = 0
	r_mgi[4][2][1] = 1
	r_mgi[4][2][2] = 1
	r_mgi[4][2][3] = 2
	r_mgi[4][3][0] = 3
	r_mgi[4][3][1] = 3
	r_mgi[4][3][2] = 4
	r_mgi[4][3][3] = 2
	r_mgi[4][4][0] = 5
	r_mgi[4][4][1] = 0
	r_mgi[4][4][2] = 0
	r_mgi[4][4][3] = 0

	b_mg[0][0] = 7
	b_mg[0][1] = 9
	b_mg[0][2] = 7
	b_mg[0][3] = 6
	b_mg[0][4] = 1
	b_mg[1][0] = 3
	b_mg[1][1] = 12
	b_mg[1][2] = 4
	b_mg[1][3] = 8
	b_mg[1][4] = 3
	b_mg[2][0] = 8
	b_mg[2][1] = 9
	b_mg[2][2] = 5
	b_mg[2][3] = 6
	b_mg[2][4] = 2
	b_mg[3][0] = 3
	b_mg[3][1] = 4
	b_mg[3][2] = 5
	b_mg[3][3] = 18
	b_mg[3][4] = 0
	b_mg[4][0] = 2
	b_mg[4][1] = 7
	b_mg[4][2] = 4
	b_mg[4][3] = 12
	b_mg[4][4] = 5

	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 5, G = 5, I = 4, J = 
def force_instance8(printear_instancia = False):
	# J = 50
	M = 5
	G = 5
	I = 4
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 4
	r_mgi[0][0][1] = 4
	r_mgi[0][0][2] = 1
	r_mgi[0][0][3] = 8
	r_mgi[0][1][0] = 4
	r_mgi[0][1][1] = 3
	r_mgi[0][1][2] = 1
	r_mgi[0][1][3] = 4
	r_mgi[0][2][0] = 3
	r_mgi[0][2][1] = 1
	r_mgi[0][2][2] = 1
	r_mgi[0][2][3] = 2
	r_mgi[0][3][0] = 2
	r_mgi[0][3][1] = 1
	r_mgi[0][3][2] = 4
	r_mgi[0][3][3] = 3
	r_mgi[0][4][0] = 3
	r_mgi[0][4][1] = 1
	r_mgi[0][4][2] = 0
	r_mgi[0][4][3] = 0
	r_mgi[1][0][0] = 0
	r_mgi[1][0][1] = 2
	r_mgi[1][0][2] = 0
	r_mgi[1][0][3] = 1
	r_mgi[1][1][0] = 5
	r_mgi[1][1][1] = 5
	r_mgi[1][1][2] = 3
	r_mgi[1][1][3] = 10
	r_mgi[1][2][0] = 1
	r_mgi[1][2][1] = 1
	r_mgi[1][2][2] = 1
	r_mgi[1][2][3] = 2
	r_mgi[1][3][0] = 3
	r_mgi[1][3][1] = 3
	r_mgi[1][3][2] = 3
	r_mgi[1][3][3] = 4
	r_mgi[1][4][0] = 5
	r_mgi[1][4][1] = 1
	r_mgi[1][4][2] = 0
	r_mgi[1][4][3] = 0
	r_mgi[2][0][0] = 1
	r_mgi[2][0][1] = 3
	r_mgi[2][0][2] = 0
	r_mgi[2][0][3] = 3
	r_mgi[2][1][0] = 2
	r_mgi[2][1][1] = 1
	r_mgi[2][1][2] = 1
	r_mgi[2][1][3] = 3
	r_mgi[2][2][0] = 1
	r_mgi[2][2][1] = 1
	r_mgi[2][2][2] = 3
	r_mgi[2][2][3] = 11
	r_mgi[2][3][0] = 6
	r_mgi[2][3][1] = 5
	r_mgi[2][3][2] = 4
	r_mgi[2][3][3] = 3
	r_mgi[2][4][0] = 2
	r_mgi[2][4][1] = 0
	r_mgi[2][4][2] = 0
	r_mgi[2][4][3] = 0
	r_mgi[3][0][0] = 0
	r_mgi[3][0][1] = 1
	r_mgi[3][0][2] = 0
	r_mgi[3][0][3] = 2
	r_mgi[3][1][0] = 8
	r_mgi[3][1][1] = 2
	r_mgi[3][1][2] = 1
	r_mgi[3][1][3] = 7
	r_mgi[3][2][0] = 2
	r_mgi[3][2][1] = 0
	r_mgi[3][2][2] = 1
	r_mgi[3][2][3] = 1
	r_mgi[3][3][0] = 2
	r_mgi[3][3][1] = 6
	r_mgi[3][3][2] = 6
	r_mgi[3][3][3] = 6
	r_mgi[3][4][0] = 4
	r_mgi[3][4][1] = 1
	r_mgi[3][4][2] = 0
	r_mgi[3][4][3] = 0
	r_mgi[4][0][0] = 1
	r_mgi[4][0][1] = 2
	r_mgi[4][0][2] = 1
	r_mgi[4][0][3] = 3
	r_mgi[4][1][0] = 4
	r_mgi[4][1][1] = 1
	r_mgi[4][1][2] = 1
	r_mgi[4][1][3] = 3
	r_mgi[4][2][0] = 1
	r_mgi[4][2][1] = 1
	r_mgi[4][2][2] = 2
	r_mgi[4][2][3] = 6
	r_mgi[4][3][0] = 6
	r_mgi[4][3][1] = 2
	r_mgi[4][3][2] = 8
	r_mgi[4][3][3] = 6
	r_mgi[4][4][0] = 2
	r_mgi[4][4][1] = 0
	r_mgi[4][4][2] = 0
	r_mgi[4][4][3] = 0

	b_mg[0][0] = 17
	b_mg[0][1] = 12
	b_mg[0][2] = 7
	b_mg[0][3] = 10
	b_mg[0][4] = 4
	b_mg[1][0] = 3
	b_mg[1][1] = 23
	b_mg[1][2] = 5
	b_mg[1][3] = 13
	b_mg[1][4] = 6
	b_mg[2][0] = 7
	b_mg[2][1] = 7
	b_mg[2][2] = 16
	b_mg[2][3] = 18
	b_mg[2][4] = 2
	b_mg[3][0] = 3
	b_mg[3][1] = 18
	b_mg[3][2] = 4
	b_mg[3][3] = 20
	b_mg[3][4] = 5
	b_mg[4][0] = 7
	b_mg[4][1] = 9
	b_mg[4][2] = 10
	b_mg[4][3] = 22
	b_mg[4][4] = 2


	
	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 10, G = 5, I = 4, J = 50
def force_instance9(printear_instancia = False):
	M = 10
	G = 5
	I = 4
	# J = 50
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 7
	r_mgi[0][0][1] = 7
	r_mgi[0][0][2] = 2
	r_mgi[0][0][3] = 12
	r_mgi[0][1][0] = 2
	r_mgi[0][1][1] = 2
	r_mgi[0][1][2] = 0
	r_mgi[0][1][3] = 3
	r_mgi[0][2][0] = 2
	r_mgi[0][2][1] = 0
	r_mgi[0][2][2] = 0
	r_mgi[0][2][3] = 1
	r_mgi[0][3][0] = 1
	r_mgi[0][3][1] = 1
	r_mgi[0][3][2] = 4
	r_mgi[0][3][3] = 3
	r_mgi[0][4][0] = 3
	r_mgi[0][4][1] = 0
	r_mgi[0][4][2] = 0
	r_mgi[0][4][3] = 0
	r_mgi[1][0][0] = 1
	r_mgi[1][0][1] = 5
	r_mgi[1][0][2] = 3
	r_mgi[1][0][3] = 7
	r_mgi[1][1][0] = 4
	r_mgi[1][1][1] = 2
	r_mgi[1][1][2] = 2
	r_mgi[1][1][3] = 10
	r_mgi[1][2][0] = 0
	r_mgi[1][2][1] = 1
	r_mgi[1][2][2] = 2
	r_mgi[1][2][3] = 2
	r_mgi[1][3][0] = 3
	r_mgi[1][3][1] = 2
	r_mgi[1][3][2] = 3
	r_mgi[1][3][3] = 2
	r_mgi[1][4][0] = 1
	r_mgi[1][4][1] = 0
	r_mgi[1][4][2] = 0
	r_mgi[1][4][3] = 0
	r_mgi[2][0][0] = 0
	r_mgi[2][0][1] = 0
	r_mgi[2][0][2] = 0
	r_mgi[2][0][3] = 2
	r_mgi[2][1][0] = 9
	r_mgi[2][1][1] = 3
	r_mgi[2][1][2] = 3
	r_mgi[2][1][3] = 13
	r_mgi[2][2][0] = 1
	r_mgi[2][2][1] = 1
	r_mgi[2][2][2] = 1
	r_mgi[2][2][3] = 5
	r_mgi[2][3][0] = 1
	r_mgi[2][3][1] = 2
	r_mgi[2][3][2] = 6
	r_mgi[2][3][3] = 2
	r_mgi[2][4][0] = 0
	r_mgi[2][4][1] = 0
	r_mgi[2][4][2] = 0
	r_mgi[2][4][3] = 1
	r_mgi[3][0][0] = 0
	r_mgi[3][0][1] = 2
	r_mgi[3][0][2] = 1
	r_mgi[3][0][3] = 3
	r_mgi[3][1][0] = 14
	r_mgi[3][1][1] = 5
	r_mgi[3][1][2] = 3
	r_mgi[3][1][3] = 14
	r_mgi[3][2][0] = 3
	r_mgi[3][2][1] = 0
	r_mgi[3][2][2] = 1
	r_mgi[3][2][3] = 2
	r_mgi[3][3][0] = 0
	r_mgi[3][3][1] = 1
	r_mgi[3][3][2] = 0
	r_mgi[3][3][3] = 0
	r_mgi[3][4][0] = 1
	r_mgi[3][4][1] = 0
	r_mgi[3][4][2] = 0
	r_mgi[3][4][3] = 0
	r_mgi[4][0][0] = 0
	r_mgi[4][0][1] = 0
	r_mgi[4][0][2] = 0
	r_mgi[4][0][3] = 2
	r_mgi[4][1][0] = 3
	r_mgi[4][1][1] = 3
	r_mgi[4][1][2] = 2
	r_mgi[4][1][3] = 4
	r_mgi[4][2][0] = 2
	r_mgi[4][2][1] = 3
	r_mgi[4][2][2] = 5
	r_mgi[4][2][3] = 15
	r_mgi[4][3][0] = 2
	r_mgi[4][3][1] = 2
	r_mgi[4][3][2] = 3
	r_mgi[4][3][3] = 1
	r_mgi[4][4][0] = 3
	r_mgi[4][4][1] = 0
	r_mgi[4][4][2] = 0
	r_mgi[4][4][3] = 0
	r_mgi[5][0][0] = 2
	r_mgi[5][0][1] = 0
	r_mgi[5][0][2] = 0
	r_mgi[5][0][3] = 3
	r_mgi[5][1][0] = 3
	r_mgi[5][1][1] = 0
	r_mgi[5][1][2] = 2
	r_mgi[5][1][3] = 4
	r_mgi[5][2][0] = 2
	r_mgi[5][2][1] = 3
	r_mgi[5][2][2] = 1
	r_mgi[5][2][3] = 14
	r_mgi[5][3][0] = 3
	r_mgi[5][3][1] = 3
	r_mgi[5][3][2] = 2
	r_mgi[5][3][3] = 5
	r_mgi[5][4][0] = 3
	r_mgi[5][4][1] = 0
	r_mgi[5][4][2] = 0
	r_mgi[5][4][3] = 0
	r_mgi[6][0][0] = 0
	r_mgi[6][0][1] = 0
	r_mgi[6][0][2] = 0
	r_mgi[6][0][3] = 1
	r_mgi[6][1][0] = 3
	r_mgi[6][1][1] = 1
	r_mgi[6][1][2] = 2
	r_mgi[6][1][3] = 2
	r_mgi[6][2][0] = 1
	r_mgi[6][2][1] = 0
	r_mgi[6][2][2] = 0
	r_mgi[6][2][3] = 2
	r_mgi[6][3][0] = 6
	r_mgi[6][3][1] = 7
	r_mgi[6][3][2] = 12
	r_mgi[6][3][3] = 10
	r_mgi[6][4][0] = 0
	r_mgi[6][4][1] = 2
	r_mgi[6][4][2] = 0
	r_mgi[6][4][3] = 1
	r_mgi[7][0][0] = 1
	r_mgi[7][0][1] = 1
	r_mgi[7][0][2] = 0
	r_mgi[7][0][3] = 1
	r_mgi[7][1][0] = 2
	r_mgi[7][1][1] = 1
	r_mgi[7][1][2] = 0
	r_mgi[7][1][3] = 4
	r_mgi[7][2][0] = 0
	r_mgi[7][2][1] = 0
	r_mgi[7][2][2] = 0
	r_mgi[7][2][3] = 3
	r_mgi[7][3][0] = 5
	r_mgi[7][3][1] = 7
	r_mgi[7][3][2] = 13
	r_mgi[7][3][3] = 11
	r_mgi[7][4][0] = 0
	r_mgi[7][4][1] = 0
	r_mgi[7][4][2] = 0
	r_mgi[7][4][3] = 1
	r_mgi[8][0][0] = 0
	r_mgi[8][0][1] = 1
	r_mgi[8][0][2] = 0
	r_mgi[8][0][3] = 2
	r_mgi[8][1][0] = 1
	r_mgi[8][1][1] = 2
	r_mgi[8][1][2] = 0
	r_mgi[8][1][3] = 3
	r_mgi[8][2][0] = 1
	r_mgi[8][2][1] = 1
	r_mgi[8][2][2] = 1
	r_mgi[8][2][3] = 4
	r_mgi[8][3][0] = 1
	r_mgi[8][3][1] = 14
	r_mgi[8][3][2] = 12
	r_mgi[8][3][3] = 6
	r_mgi[8][4][0] = 1
	r_mgi[8][4][1] = 0
	r_mgi[8][4][2] = 0
	r_mgi[8][4][3] = 0
	r_mgi[9][0][0] = 1
	r_mgi[9][0][1] = 2
	r_mgi[9][0][2] = 2
	r_mgi[9][0][3] = 1
	r_mgi[9][1][0] = 5
	r_mgi[9][1][1] = 0
	r_mgi[9][1][2] = 0
	r_mgi[9][1][3] = 2
	r_mgi[9][2][0] = 1
	r_mgi[9][2][1] = 0
	r_mgi[9][2][2] = 1
	r_mgi[9][2][3] = 2
	r_mgi[9][3][0] = 1
	r_mgi[9][3][1] = 3
	r_mgi[9][3][2] = 4
	r_mgi[9][3][3] = 2
	r_mgi[9][4][0] = 14
	r_mgi[9][4][1] = 7
	r_mgi[9][4][2] = 1
	r_mgi[9][4][3] = 1

	b_mg[0][0] = 28
	b_mg[0][1] = 7
	b_mg[0][2] = 3
	b_mg[0][3] = 9
	b_mg[0][4] = 3
	b_mg[1][0] = 16
	b_mg[1][1] = 18
	b_mg[1][2] = 5
	b_mg[1][3] = 10
	b_mg[1][4] = 1
	b_mg[2][0] = 2
	b_mg[2][1] = 28
	b_mg[2][2] = 8
	b_mg[2][3] = 11
	b_mg[2][4] = 1
	b_mg[3][0] = 6
	b_mg[3][1] = 36
	b_mg[3][2] = 6
	b_mg[3][3] = 1
	b_mg[3][4] = 1
	b_mg[4][0] = 2
	b_mg[4][1] = 12
	b_mg[4][2] = 25
	b_mg[4][3] = 8
	b_mg[4][4] = 3
	b_mg[5][0] = 5
	b_mg[5][1] = 9
	b_mg[5][2] = 20
	b_mg[5][3] = 13
	b_mg[5][4] = 3
	b_mg[6][0] = 1
	b_mg[6][1] = 8
	b_mg[6][2] = 3
	b_mg[6][3] = 35
	b_mg[6][4] = 3
	b_mg[7][0] = 3
	b_mg[7][1] = 7
	b_mg[7][2] = 3
	b_mg[7][3] = 36
	b_mg[7][4] = 1
	b_mg[8][0] = 3
	b_mg[8][1] = 6
	b_mg[8][2] = 7
	b_mg[8][3] = 33
	b_mg[8][4] = 1
	b_mg[9][0] = 6
	b_mg[9][1] = 7
	b_mg[9][2] = 4
	b_mg[9][3] = 10
	b_mg[9][4] = 23

	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 20, G = 3, I = 2, J = 50
def force_instance10(printear_instancia = False):
	M = 20
	G = 3
	I = 2
	# J = 50
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 10
	r_mgi[0][0][1] = 32
	r_mgi[0][1][0] = 1
	r_mgi[0][1][1] = 3
	r_mgi[0][2][0] = 3
	r_mgi[0][2][1] = 1
	r_mgi[1][0][0] = 9
	r_mgi[1][0][1] = 34
	r_mgi[1][1][0] = 2
	r_mgi[1][1][1] = 3
	r_mgi[1][2][0] = 1
	r_mgi[1][2][1] = 1
	r_mgi[2][0][0] = 14
	r_mgi[2][0][1] = 29
	r_mgi[2][1][0] = 1
	r_mgi[2][1][1] = 2
	r_mgi[2][2][0] = 2
	r_mgi[2][2][1] = 2
	r_mgi[3][0][0] = 6
	r_mgi[3][0][1] = 28
	r_mgi[3][1][0] = 3
	r_mgi[3][1][1] = 9
	r_mgi[3][2][0] = 2
	r_mgi[3][2][1] = 2
	r_mgi[4][0][0] = 7
	r_mgi[4][0][1] = 30
	r_mgi[4][1][0] = 1
	r_mgi[4][1][1] = 10
	r_mgi[4][2][0] = 1
	r_mgi[4][2][1] = 1
	r_mgi[5][0][0] = 1
	r_mgi[5][0][1] = 1
	r_mgi[5][1][0] = 11
	r_mgi[5][1][1] = 35
	r_mgi[5][2][0] = 2
	r_mgi[5][2][1] = 0
	r_mgi[6][0][0] = 1
	r_mgi[6][0][1] = 3
	r_mgi[6][1][0] = 13
	r_mgi[6][1][1] = 29
	r_mgi[6][2][0] = 2
	r_mgi[6][2][1] = 2
	r_mgi[7][0][0] = 2
	r_mgi[7][0][1] = 2
	r_mgi[7][1][0] = 14
	r_mgi[7][1][1] = 28
	r_mgi[7][2][0] = 2
	r_mgi[7][2][1] = 2
	r_mgi[8][0][0] = 0
	r_mgi[8][0][1] = 1
	r_mgi[8][1][0] = 12
	r_mgi[8][1][1] = 32
	r_mgi[8][2][0] = 3
	r_mgi[8][2][1] = 2
	r_mgi[9][0][0] = 0
	r_mgi[9][0][1] = 1
	r_mgi[9][1][0] = 12
	r_mgi[9][1][1] = 32
	r_mgi[9][2][0] = 3
	r_mgi[9][2][1] = 2
	r_mgi[10][0][0] = 0
	r_mgi[10][0][1] = 3
	r_mgi[10][1][0] = 13
	r_mgi[10][1][1] = 32
	r_mgi[10][2][0] = 1
	r_mgi[10][2][1] = 1
	r_mgi[11][0][0] = 0
	r_mgi[11][0][1] = 3
	r_mgi[11][1][0] = 13
	r_mgi[11][1][1] = 33
	r_mgi[11][2][0] = 1
	r_mgi[11][2][1] = 0
	r_mgi[12][0][0] = 0
	r_mgi[12][0][1] = 2
	r_mgi[12][1][0] = 17
	r_mgi[12][1][1] = 28
	r_mgi[12][2][0] = 0
	r_mgi[12][2][1] = 3
	r_mgi[13][0][0] = 0
	r_mgi[13][0][1] = 3
	r_mgi[13][1][0] = 15
	r_mgi[13][1][1] = 31
	r_mgi[13][2][0] = 1
	r_mgi[13][2][1] = 0
	r_mgi[14][0][0] = 0
	r_mgi[14][0][1] = 5
	r_mgi[14][1][0] = 5
	r_mgi[14][1][1] = 12
	r_mgi[14][2][0] = 14
	r_mgi[14][2][1] = 14
	r_mgi[15][0][0] = 0
	r_mgi[15][0][1] = 1
	r_mgi[15][1][0] = 0
	r_mgi[15][1][1] = 2
	r_mgi[15][2][0] = 21
	r_mgi[15][2][1] = 26
	r_mgi[16][0][0] = 1
	r_mgi[16][0][1] = 3
	r_mgi[16][1][0] = 2
	r_mgi[16][1][1] = 3
	r_mgi[16][2][0] = 28
	r_mgi[16][2][1] = 13
	r_mgi[17][0][0] = 2
	r_mgi[17][0][1] = 2
	r_mgi[17][1][0] = 1
	r_mgi[17][1][1] = 1
	r_mgi[17][2][0] = 26
	r_mgi[17][2][1] = 18
	r_mgi[18][0][0] = 0
	r_mgi[18][0][1] = 2
	r_mgi[18][1][0] = 1
	r_mgi[18][1][1] = 5
	r_mgi[18][2][0] = 26
	r_mgi[18][2][1] = 16
	r_mgi[19][0][0] = 1
	r_mgi[19][0][1] = 3
	r_mgi[19][1][0] = 3
	r_mgi[19][1][1] = 2
	r_mgi[19][2][0] = 25
	r_mgi[19][2][1] = 16

	b_mg[0][0] = 42
	b_mg[0][1] = 4
	b_mg[0][2] = 4
	b_mg[1][0] = 43
	b_mg[1][1] = 5
	b_mg[1][2] = 2
	b_mg[2][0] = 43
	b_mg[2][1] = 3
	b_mg[2][2] = 4
	b_mg[3][0] = 34
	b_mg[3][1] = 12
	b_mg[3][2] = 4
	b_mg[4][0] = 37
	b_mg[4][1] = 11
	b_mg[4][2] = 2
	b_mg[5][0] = 2
	b_mg[5][1] = 46
	b_mg[5][2] = 2
	b_mg[6][0] = 4
	b_mg[6][1] = 42
	b_mg[6][2] = 4
	b_mg[7][0] = 4
	b_mg[7][1] = 42
	b_mg[7][2] = 4
	b_mg[8][0] = 1
	b_mg[8][1] = 44
	b_mg[8][2] = 5
	b_mg[9][0] = 1
	b_mg[9][1] = 44
	b_mg[9][2] = 5
	b_mg[10][0] = 3
	b_mg[10][1] = 45
	b_mg[10][2] = 2
	b_mg[11][0] = 3
	b_mg[11][1] = 46
	b_mg[11][2] = 1
	b_mg[12][0] = 2
	b_mg[12][1] = 45
	b_mg[12][2] = 3
	b_mg[13][0] = 3
	b_mg[13][1] = 46
	b_mg[13][2] = 1
	b_mg[14][0] = 5
	b_mg[14][1] = 17
	b_mg[14][2] = 28
	b_mg[15][0] = 1
	b_mg[15][1] = 2
	b_mg[15][2] = 47
	b_mg[16][0] = 4
	b_mg[16][1] = 5
	b_mg[16][2] = 41
	b_mg[17][0] = 4
	b_mg[17][1] = 2
	b_mg[17][2] = 44
	b_mg[18][0] = 2
	b_mg[18][1] = 6
	b_mg[18][2] = 42
	b_mg[19][0] = 4
	b_mg[19][1] = 5
	b_mg[19][2] = 41

	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 20, G = 3, I = 3, J = 50
def force_instance11(printear_instancia = False):
	M = 20
	G = 3
	I = 3
	# J = 50
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 7
	r_mgi[0][0][1] = 8
	r_mgi[0][0][2] = 17
	r_mgi[0][1][0] = 4
	r_mgi[0][1][1] = 3
	r_mgi[0][1][2] = 3
	r_mgi[0][2][0] = 4
	r_mgi[0][2][1] = 3
	r_mgi[0][2][2] = 1
	r_mgi[1][0][0] = 11
	r_mgi[1][0][1] = 8
	r_mgi[1][0][2] = 11
	r_mgi[1][1][0] = 4
	r_mgi[1][1][1] = 2
	r_mgi[1][1][2] = 3
	r_mgi[1][2][0] = 4
	r_mgi[1][2][1] = 4
	r_mgi[1][2][2] = 3
	r_mgi[2][0][0] = 6
	r_mgi[2][0][1] = 6
	r_mgi[2][0][2] = 21
	r_mgi[2][1][0] = 5
	r_mgi[2][1][1] = 3
	r_mgi[2][1][2] = 2
	r_mgi[2][2][0] = 2
	r_mgi[2][2][1] = 4
	r_mgi[2][2][2] = 1
	r_mgi[3][0][0] = 5
	r_mgi[3][0][1] = 8
	r_mgi[3][0][2] = 13
	r_mgi[3][1][0] = 8
	r_mgi[3][1][1] = 4
	r_mgi[3][1][2] = 2
	r_mgi[3][2][0] = 5
	r_mgi[3][2][1] = 3
	r_mgi[3][2][2] = 2
	r_mgi[4][0][0] = 6
	r_mgi[4][0][1] = 6
	r_mgi[4][0][2] = 14
	r_mgi[4][1][0] = 7
	r_mgi[4][1][1] = 2
	r_mgi[4][1][2] = 7
	r_mgi[4][2][0] = 2
	r_mgi[4][2][1] = 4
	r_mgi[4][2][2] = 2
	r_mgi[5][0][0] = 0
	r_mgi[5][0][1] = 1
	r_mgi[5][0][2] = 3
	r_mgi[5][1][0] = 18
	r_mgi[5][1][1] = 8
	r_mgi[5][1][2] = 11
	r_mgi[5][2][0] = 3
	r_mgi[5][2][1] = 5
	r_mgi[5][2][2] = 1
	r_mgi[6][0][0] = 1
	r_mgi[6][0][1] = 3
	r_mgi[6][0][2] = 2
	r_mgi[6][1][0] = 24
	r_mgi[6][1][1] = 6
	r_mgi[6][1][2] = 9
	r_mgi[6][2][0] = 2
	r_mgi[6][2][1] = 3
	r_mgi[6][2][2] = 0
	r_mgi[7][0][0] = 1
	r_mgi[7][0][1] = 3
	r_mgi[7][0][2] = 7
	r_mgi[7][1][0] = 18
	r_mgi[7][1][1] = 4
	r_mgi[7][1][2] = 8
	r_mgi[7][2][0] = 4
	r_mgi[7][2][1] = 1
	r_mgi[7][2][2] = 4
	r_mgi[8][0][0] = 1
	r_mgi[8][0][1] = 2
	r_mgi[8][0][2] = 2
	r_mgi[8][1][0] = 14
	r_mgi[8][1][1] = 11
	r_mgi[8][1][2] = 10
	r_mgi[8][2][0] = 4
	r_mgi[8][2][1] = 4
	r_mgi[8][2][2] = 2
	r_mgi[9][0][0] = 1
	r_mgi[9][0][1] = 1
	r_mgi[9][0][2] = 3
	r_mgi[9][1][0] = 19
	r_mgi[9][1][1] = 9
	r_mgi[9][1][2] = 12
	r_mgi[9][2][0] = 3
	r_mgi[9][2][1] = 1
	r_mgi[9][2][2] = 1
	r_mgi[10][0][0] = 2
	r_mgi[10][0][1] = 2
	r_mgi[10][0][2] = 3
	r_mgi[10][1][0] = 21
	r_mgi[10][1][1] = 9
	r_mgi[10][1][2] = 10
	r_mgi[10][2][0] = 2
	r_mgi[10][2][1] = 1
	r_mgi[10][2][2] = 0
	r_mgi[11][0][0] = 3
	r_mgi[11][0][1] = 2
	r_mgi[11][0][2] = 5
	r_mgi[11][1][0] = 16
	r_mgi[11][1][1] = 9
	r_mgi[11][1][2] = 12
	r_mgi[11][2][0] = 0
	r_mgi[11][2][1] = 1
	r_mgi[11][2][2] = 2
	r_mgi[12][0][0] = 1
	r_mgi[12][0][1] = 2
	r_mgi[12][0][2] = 1
	r_mgi[12][1][0] = 13
	r_mgi[12][1][1] = 11
	r_mgi[12][1][2] = 16
	r_mgi[12][2][0] = 3
	r_mgi[12][2][1] = 3
	r_mgi[12][2][2] = 0
	r_mgi[13][0][0] = 0
	r_mgi[13][0][1] = 2
	r_mgi[13][0][2] = 2
	r_mgi[13][1][0] = 19
	r_mgi[13][1][1] = 10
	r_mgi[13][1][2] = 11
	r_mgi[13][2][0] = 3
	r_mgi[13][2][1] = 2
	r_mgi[13][2][2] = 1
	r_mgi[14][0][0] = 3
	r_mgi[14][0][1] = 2
	r_mgi[14][0][2] = 1
	r_mgi[14][1][0] = 8
	r_mgi[14][1][1] = 1
	r_mgi[14][1][2] = 9
	r_mgi[14][2][0] = 9
	r_mgi[14][2][1] = 12
	r_mgi[14][2][2] = 5
	r_mgi[15][0][0] = 2
	r_mgi[15][0][1] = 5
	r_mgi[15][0][2] = 1
	r_mgi[15][1][0] = 5
	r_mgi[15][1][1] = 3
	r_mgi[15][1][2] = 3
	r_mgi[15][2][0] = 13
	r_mgi[15][2][1] = 11
	r_mgi[15][2][2] = 7
	r_mgi[16][0][0] = 0
	r_mgi[16][0][1] = 2
	r_mgi[16][0][2] = 4
	r_mgi[16][1][0] = 5
	r_mgi[16][1][1] = 2
	r_mgi[16][1][2] = 5
	r_mgi[16][2][0] = 13
	r_mgi[16][2][1] = 12
	r_mgi[16][2][2] = 7
	r_mgi[17][0][0] = 0
	r_mgi[17][0][1] = 1
	r_mgi[17][0][2] = 6
	r_mgi[17][1][0] = 5
	r_mgi[17][1][1] = 3
	r_mgi[17][1][2] = 3
	r_mgi[17][2][0] = 16
	r_mgi[17][2][1] = 10
	r_mgi[17][2][2] = 6
	r_mgi[18][0][0] = 3
	r_mgi[18][0][1] = 1
	r_mgi[18][0][2] = 3
	r_mgi[18][1][0] = 6
	r_mgi[18][1][1] = 3
	r_mgi[18][1][2] = 5
	r_mgi[18][2][0] = 9
	r_mgi[18][2][1] = 11
	r_mgi[18][2][2] = 9
	r_mgi[19][0][0] = 1
	r_mgi[19][0][1] = 2
	r_mgi[19][0][2] = 2
	r_mgi[19][1][0] = 5
	r_mgi[19][1][1] = 2
	r_mgi[19][1][2] = 2
	r_mgi[19][2][0] = 7
	r_mgi[19][2][1] = 13
	r_mgi[19][2][2] = 16

	b_mg[0][0] = 32
	b_mg[0][1] = 10
	b_mg[0][2] = 8
	b_mg[1][0] = 30
	b_mg[1][1] = 9
	b_mg[1][2] = 11
	b_mg[2][0] = 33
	b_mg[2][1] = 10
	b_mg[2][2] = 7
	b_mg[3][0] = 26
	b_mg[3][1] = 14
	b_mg[3][2] = 10
	b_mg[4][0] = 26
	b_mg[4][1] = 16
	b_mg[4][2] = 8
	b_mg[5][0] = 4
	b_mg[5][1] = 37
	b_mg[5][2] = 9
	b_mg[6][0] = 6
	b_mg[6][1] = 39
	b_mg[6][2] = 5
	b_mg[7][0] = 11
	b_mg[7][1] = 30
	b_mg[7][2] = 9
	b_mg[8][0] = 5
	b_mg[8][1] = 35
	b_mg[8][2] = 10
	b_mg[9][0] = 5
	b_mg[9][1] = 40
	b_mg[9][2] = 5
	b_mg[10][0] = 7
	b_mg[10][1] = 40
	b_mg[10][2] = 3
	b_mg[11][0] = 10
	b_mg[11][1] = 37
	b_mg[11][2] = 3
	b_mg[12][0] = 4
	b_mg[12][1] = 40
	b_mg[12][2] = 6
	b_mg[13][0] = 4
	b_mg[13][1] = 40
	b_mg[13][2] = 6
	b_mg[14][0] = 6
	b_mg[14][1] = 18
	b_mg[14][2] = 26
	b_mg[15][0] = 8
	b_mg[15][1] = 11
	b_mg[15][2] = 31
	b_mg[16][0] = 6
	b_mg[16][1] = 12
	b_mg[16][2] = 32
	b_mg[17][0] = 7
	b_mg[17][1] = 11
	b_mg[17][2] = 32
	b_mg[18][0] = 7
	b_mg[18][1] = 14
	b_mg[18][2] = 29
	b_mg[19][0] = 5
	b_mg[19][1] = 9
	b_mg[19][2] = 36

	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 20, G = 2, I = 3, J = 50
def force_instance12(printear_instancia = False):
	M = 20
	G = 2
	I = 3
	# J = 50
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 7
	r_mgi[0][0][1] = 8
	r_mgi[0][0][2] = 17
	r_mgi[0][1][0] = 7
	r_mgi[0][1][1] = 5
	r_mgi[0][1][2] = 6
	r_mgi[1][0][0] = 7
	r_mgi[1][0][1] = 8
	r_mgi[1][0][2] = 16
	r_mgi[1][1][0] = 14
	r_mgi[1][1][1] = 3
	r_mgi[1][1][2] = 2
	r_mgi[2][0][0] = 6
	r_mgi[2][0][1] = 8
	r_mgi[2][0][2] = 15
	r_mgi[2][1][0] = 10
	r_mgi[2][1][1] = 5
	r_mgi[2][1][2] = 6
	r_mgi[3][0][0] = 8
	r_mgi[3][0][1] = 8
	r_mgi[3][0][2] = 26
	r_mgi[3][1][0] = 4
	r_mgi[3][1][1] = 2
	r_mgi[3][1][2] = 2
	r_mgi[4][0][0] = 5
	r_mgi[4][0][1] = 9
	r_mgi[4][0][2] = 23
	r_mgi[4][1][0] = 7
	r_mgi[4][1][1] = 2
	r_mgi[4][1][2] = 4
	r_mgi[5][0][0] = 8
	r_mgi[5][0][1] = 12
	r_mgi[5][0][2] = 14
	r_mgi[5][1][0] = 9
	r_mgi[5][1][1] = 3
	r_mgi[5][1][2] = 4
	r_mgi[6][0][0] = 7
	r_mgi[6][0][1] = 6
	r_mgi[6][0][2] = 14
	r_mgi[6][1][0] = 11
	r_mgi[6][1][1] = 4
	r_mgi[6][1][2] = 8
	r_mgi[7][0][0] = 1
	r_mgi[7][0][1] = 4
	r_mgi[7][0][2] = 6
	r_mgi[7][1][0] = 15
	r_mgi[7][1][1] = 9
	r_mgi[7][1][2] = 15
	r_mgi[8][0][0] = 2
	r_mgi[8][0][1] = 3
	r_mgi[8][0][2] = 5
	r_mgi[8][1][0] = 19
	r_mgi[8][1][1] = 7
	r_mgi[8][1][2] = 14
	r_mgi[9][0][0] = 2
	r_mgi[9][0][1] = 7
	r_mgi[9][0][2] = 5
	r_mgi[9][1][0] = 23
	r_mgi[9][1][1] = 5
	r_mgi[9][1][2] = 8
	r_mgi[10][0][0] = 2
	r_mgi[10][0][1] = 1
	r_mgi[10][0][2] = 4
	r_mgi[10][1][0] = 20
	r_mgi[10][1][1] = 9
	r_mgi[10][1][2] = 14
	r_mgi[11][0][0] = 3
	r_mgi[11][0][1] = 1
	r_mgi[11][0][2] = 4
	r_mgi[11][1][0] = 21
	r_mgi[11][1][1] = 13
	r_mgi[11][1][2] = 8
	r_mgi[12][0][0] = 1
	r_mgi[12][0][1] = 2
	r_mgi[12][0][2] = 2
	r_mgi[12][1][0] = 19
	r_mgi[12][1][1] = 13
	r_mgi[12][1][2] = 13
	r_mgi[13][0][0] = 2
	r_mgi[13][0][1] = 2
	r_mgi[13][0][2] = 4
	r_mgi[13][1][0] = 20
	r_mgi[13][1][1] = 8
	r_mgi[13][1][2] = 14
	r_mgi[14][0][0] = 1
	r_mgi[14][0][1] = 2
	r_mgi[14][0][2] = 3
	r_mgi[14][1][0] = 26
	r_mgi[14][1][1] = 7
	r_mgi[14][1][2] = 11
	r_mgi[15][0][0] = 3
	r_mgi[15][0][1] = 4
	r_mgi[15][0][2] = 5
	r_mgi[15][1][0] = 20
	r_mgi[15][1][1] = 8
	r_mgi[15][1][2] = 10
	r_mgi[16][0][0] = 2
	r_mgi[16][0][1] = 0
	r_mgi[16][0][2] = 4
	r_mgi[16][1][0] = 24
	r_mgi[16][1][1] = 6
	r_mgi[16][1][2] = 14
	r_mgi[17][0][0] = 0
	r_mgi[17][0][1] = 2
	r_mgi[17][0][2] = 4
	r_mgi[17][1][0] = 18
	r_mgi[17][1][1] = 13
	r_mgi[17][1][2] = 13
	r_mgi[18][0][0] = 2
	r_mgi[18][0][1] = 3
	r_mgi[18][0][2] = 3
	r_mgi[18][1][0] = 14
	r_mgi[18][1][1] = 12
	r_mgi[18][1][2] = 16
	r_mgi[19][0][0] = 1
	r_mgi[19][0][1] = 1
	r_mgi[19][0][2] = 4
	r_mgi[19][1][0] = 19
	r_mgi[19][1][1] = 11
	r_mgi[19][1][2] = 14

	b_mg[0][0] = 32
	b_mg[0][1] = 18
	b_mg[1][0] = 31
	b_mg[1][1] = 19
	b_mg[2][0] = 29
	b_mg[2][1] = 21
	b_mg[3][0] = 42
	b_mg[3][1] = 8
	b_mg[4][0] = 37
	b_mg[4][1] = 13
	b_mg[5][0] = 34
	b_mg[5][1] = 16
	b_mg[6][0] = 27
	b_mg[6][1] = 23
	b_mg[7][0] = 11
	b_mg[7][1] = 39
	b_mg[8][0] = 10
	b_mg[8][1] = 40
	b_mg[9][0] = 14
	b_mg[9][1] = 36
	b_mg[10][0] = 7
	b_mg[10][1] = 43
	b_mg[11][0] = 8
	b_mg[11][1] = 42
	b_mg[12][0] = 5
	b_mg[12][1] = 45
	b_mg[13][0] = 8
	b_mg[13][1] = 42
	b_mg[14][0] = 6
	b_mg[14][1] = 44
	b_mg[15][0] = 12
	b_mg[15][1] = 38
	b_mg[16][0] = 6
	b_mg[16][1] = 44
	b_mg[17][0] = 6
	b_mg[17][1] = 44
	b_mg[18][0] = 8
	b_mg[18][1] = 42
	b_mg[19][0] = 6
	b_mg[19][1] = 44

	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 40, G = 3, I = 7, J = 50
def force_instance13(printear_instancia = False):
	M = 40
	G = 3
	I = 7
	# J = 50
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 6
	r_mgi[0][0][1] = 7
	r_mgi[0][0][2] = 2
	r_mgi[0][0][3] = 3
	r_mgi[0][0][4] = 4
	r_mgi[0][0][5] = 2
	r_mgi[0][0][6] = 3
	r_mgi[0][1][0] = 8
	r_mgi[0][1][1] = 3
	r_mgi[0][1][2] = 1
	r_mgi[0][1][3] = 0
	r_mgi[0][1][4] = 0
	r_mgi[0][1][5] = 2
	r_mgi[0][1][6] = 1
	r_mgi[0][2][0] = 1
	r_mgi[0][2][1] = 0
	r_mgi[0][2][2] = 1
	r_mgi[0][2][3] = 4
	r_mgi[0][2][4] = 0
	r_mgi[0][2][5] = 0
	r_mgi[0][2][6] = 2
	r_mgi[1][0][0] = 7
	r_mgi[1][0][1] = 11
	r_mgi[1][0][2] = 4
	r_mgi[1][0][3] = 5
	r_mgi[1][0][4] = 3
	r_mgi[1][0][5] = 3
	r_mgi[1][0][6] = 2
	r_mgi[1][1][0] = 4
	r_mgi[1][1][1] = 1
	r_mgi[1][1][2] = 1
	r_mgi[1][1][3] = 0
	r_mgi[1][1][4] = 0
	r_mgi[1][1][5] = 3
	r_mgi[1][1][6] = 2
	r_mgi[1][2][0] = 0
	r_mgi[1][2][1] = 0
	r_mgi[1][2][2] = 1
	r_mgi[1][2][3] = 1
	r_mgi[1][2][4] = 0
	r_mgi[1][2][5] = 0
	r_mgi[1][2][6] = 2
	r_mgi[2][0][0] = 5
	r_mgi[2][0][1] = 12
	r_mgi[2][0][2] = 5
	r_mgi[2][0][3] = 2
	r_mgi[2][0][4] = 2
	r_mgi[2][0][5] = 0
	r_mgi[2][0][6] = 3
	r_mgi[2][1][0] = 2
	r_mgi[2][1][1] = 2
	r_mgi[2][1][2] = 2
	r_mgi[2][1][3] = 0
	r_mgi[2][1][4] = 0
	r_mgi[2][1][5] = 1
	r_mgi[2][1][6] = 3
	r_mgi[2][2][0] = 1
	r_mgi[2][2][1] = 1
	r_mgi[2][2][2] = 1
	r_mgi[2][2][3] = 5
	r_mgi[2][2][4] = 1
	r_mgi[2][2][5] = 0
	r_mgi[2][2][6] = 2
	r_mgi[3][0][0] = 6
	r_mgi[3][0][1] = 10
	r_mgi[3][0][2] = 4
	r_mgi[3][0][3] = 5
	r_mgi[3][0][4] = 6
	r_mgi[3][0][5] = 3
	r_mgi[3][0][6] = 3
	r_mgi[3][1][0] = 4
	r_mgi[3][1][1] = 2
	r_mgi[3][1][2] = 1
	r_mgi[3][1][3] = 1
	r_mgi[3][1][4] = 1
	r_mgi[3][1][5] = 2
	r_mgi[3][1][6] = 0
	r_mgi[3][2][0] = 0
	r_mgi[3][2][1] = 0
	r_mgi[3][2][2] = 0
	r_mgi[3][2][3] = 1
	r_mgi[3][2][4] = 0
	r_mgi[3][2][5] = 1
	r_mgi[3][2][6] = 0
	r_mgi[4][0][0] = 7
	r_mgi[4][0][1] = 10
	r_mgi[4][0][2] = 0
	r_mgi[4][0][3] = 4
	r_mgi[4][0][4] = 3
	r_mgi[4][0][5] = 2
	r_mgi[4][0][6] = 4
	r_mgi[4][1][0] = 2
	r_mgi[4][1][1] = 4
	r_mgi[4][1][2] = 1
	r_mgi[4][1][3] = 1
	r_mgi[4][1][4] = 1
	r_mgi[4][1][5] = 3
	r_mgi[4][1][6] = 1
	r_mgi[4][2][0] = 2
	r_mgi[4][2][1] = 1
	r_mgi[4][2][2] = 1
	r_mgi[4][2][3] = 0
	r_mgi[4][2][4] = 0
	r_mgi[4][2][5] = 0
	r_mgi[4][2][6] = 3
	r_mgi[5][0][0] = 8
	r_mgi[5][0][1] = 15
	r_mgi[5][0][2] = 1
	r_mgi[5][0][3] = 3
	r_mgi[5][0][4] = 2
	r_mgi[5][0][5] = 2
	r_mgi[5][0][6] = 1
	r_mgi[5][1][0] = 2
	r_mgi[5][1][1] = 3
	r_mgi[5][1][2] = 1
	r_mgi[5][1][3] = 0
	r_mgi[5][1][4] = 1
	r_mgi[5][1][5] = 4
	r_mgi[5][1][6] = 3
	r_mgi[5][2][0] = 0
	r_mgi[5][2][1] = 0
	r_mgi[5][2][2] = 1
	r_mgi[5][2][3] = 2
	r_mgi[5][2][4] = 1
	r_mgi[5][2][5] = 0
	r_mgi[5][2][6] = 0
	r_mgi[6][0][0] = 7
	r_mgi[6][0][1] = 12
	r_mgi[6][0][2] = 2
	r_mgi[6][0][3] = 2
	r_mgi[6][0][4] = 3
	r_mgi[6][0][5] = 2
	r_mgi[6][0][6] = 5
	r_mgi[6][1][0] = 4
	r_mgi[6][1][1] = 1
	r_mgi[6][1][2] = 1
	r_mgi[6][1][3] = 0
	r_mgi[6][1][4] = 0
	r_mgi[6][1][5] = 3
	r_mgi[6][1][6] = 0
	r_mgi[6][2][0] = 3
	r_mgi[6][2][1] = 2
	r_mgi[6][2][2] = 0
	r_mgi[6][2][3] = 1
	r_mgi[6][2][4] = 0
	r_mgi[6][2][5] = 1
	r_mgi[6][2][6] = 1
	r_mgi[7][0][0] = 10
	r_mgi[7][0][1] = 4
	r_mgi[7][0][2] = 2
	r_mgi[7][0][3] = 3
	r_mgi[7][0][4] = 2
	r_mgi[7][0][5] = 3
	r_mgi[7][0][6] = 1
	r_mgi[7][1][0] = 3
	r_mgi[7][1][1] = 4
	r_mgi[7][1][2] = 3
	r_mgi[7][1][3] = 3
	r_mgi[7][1][4] = 0
	r_mgi[7][1][5] = 2
	r_mgi[7][1][6] = 1
	r_mgi[7][2][0] = 0
	r_mgi[7][2][1] = 1
	r_mgi[7][2][2] = 2
	r_mgi[7][2][3] = 1
	r_mgi[7][2][4] = 0
	r_mgi[7][2][5] = 2
	r_mgi[7][2][6] = 3
	r_mgi[8][0][0] = 8
	r_mgi[8][0][1] = 11
	r_mgi[8][0][2] = 5
	r_mgi[8][0][3] = 4
	r_mgi[8][0][4] = 1
	r_mgi[8][0][5] = 5
	r_mgi[8][0][6] = 3
	r_mgi[8][1][0] = 4
	r_mgi[8][1][1] = 0
	r_mgi[8][1][2] = 2
	r_mgi[8][1][3] = 0
	r_mgi[8][1][4] = 0
	r_mgi[8][1][5] = 2
	r_mgi[8][1][6] = 1
	r_mgi[8][2][0] = 0
	r_mgi[8][2][1] = 1
	r_mgi[8][2][2] = 2
	r_mgi[8][2][3] = 1
	r_mgi[8][2][4] = 0
	r_mgi[8][2][5] = 0
	r_mgi[8][2][6] = 0
	r_mgi[9][0][0] = 3
	r_mgi[9][0][1] = 5
	r_mgi[9][0][2] = 3
	r_mgi[9][0][3] = 2
	r_mgi[9][0][4] = 0
	r_mgi[9][0][5] = 2
	r_mgi[9][0][6] = 2
	r_mgi[9][1][0] = 10
	r_mgi[9][1][1] = 3
	r_mgi[9][1][2] = 5
	r_mgi[9][1][3] = 1
	r_mgi[9][1][4] = 1
	r_mgi[9][1][5] = 3
	r_mgi[9][1][6] = 2
	r_mgi[9][2][0] = 0
	r_mgi[9][2][1] = 2
	r_mgi[9][2][2] = 2
	r_mgi[9][2][3] = 3
	r_mgi[9][2][4] = 0
	r_mgi[9][2][5] = 0
	r_mgi[9][2][6] = 1
	r_mgi[10][0][0] = 0
	r_mgi[10][0][1] = 2
	r_mgi[10][0][2] = 1
	r_mgi[10][0][3] = 1
	r_mgi[10][0][4] = 0
	r_mgi[10][0][5] = 0
	r_mgi[10][0][6] = 2
	r_mgi[10][1][0] = 14
	r_mgi[10][1][1] = 7
	r_mgi[10][1][2] = 5
	r_mgi[10][1][3] = 0
	r_mgi[10][1][4] = 2
	r_mgi[10][1][5] = 4
	r_mgi[10][1][6] = 6
	r_mgi[10][2][0] = 1
	r_mgi[10][2][1] = 0
	r_mgi[10][2][2] = 2
	r_mgi[10][2][3] = 1
	r_mgi[10][2][4] = 0
	r_mgi[10][2][5] = 0
	r_mgi[10][2][6] = 2
	r_mgi[11][0][0] = 1
	r_mgi[11][0][1] = 0
	r_mgi[11][0][2] = 1
	r_mgi[11][0][3] = 1
	r_mgi[11][0][4] = 0
	r_mgi[11][0][5] = 1
	r_mgi[11][0][6] = 1
	r_mgi[11][1][0] = 6
	r_mgi[11][1][1] = 9
	r_mgi[11][1][2] = 9
	r_mgi[11][1][3] = 2
	r_mgi[11][1][4] = 1
	r_mgi[11][1][5] = 6
	r_mgi[11][1][6] = 1
	r_mgi[11][2][0] = 2
	r_mgi[11][2][1] = 1
	r_mgi[11][2][2] = 0
	r_mgi[11][2][3] = 5
	r_mgi[11][2][4] = 0
	r_mgi[11][2][5] = 0
	r_mgi[11][2][6] = 3
	r_mgi[12][0][0] = 2
	r_mgi[12][0][1] = 2
	r_mgi[12][0][2] = 1
	r_mgi[12][0][3] = 0
	r_mgi[12][0][4] = 1
	r_mgi[12][0][5] = 2
	r_mgi[12][0][6] = 0
	r_mgi[12][1][0] = 8
	r_mgi[12][1][1] = 7
	r_mgi[12][1][2] = 8
	r_mgi[12][1][3] = 1
	r_mgi[12][1][4] = 3
	r_mgi[12][1][5] = 3
	r_mgi[12][1][6] = 4
	r_mgi[12][2][0] = 0
	r_mgi[12][2][1] = 1
	r_mgi[12][2][2] = 2
	r_mgi[12][2][3] = 2
	r_mgi[12][2][4] = 0
	r_mgi[12][2][5] = 0
	r_mgi[12][2][6] = 3
	r_mgi[13][0][0] = 0
	r_mgi[13][0][1] = 2
	r_mgi[13][0][2] = 2
	r_mgi[13][0][3] = 2
	r_mgi[13][0][4] = 0
	r_mgi[13][0][5] = 1
	r_mgi[13][0][6] = 2
	r_mgi[13][1][0] = 17
	r_mgi[13][1][1] = 6
	r_mgi[13][1][2] = 3
	r_mgi[13][1][3] = 0
	r_mgi[13][1][4] = 2
	r_mgi[13][1][5] = 3
	r_mgi[13][1][6] = 7
	r_mgi[13][2][0] = 0
	r_mgi[13][2][1] = 0
	r_mgi[13][2][2] = 1
	r_mgi[13][2][3] = 2
	r_mgi[13][2][4] = 0
	r_mgi[13][2][5] = 0
	r_mgi[13][2][6] = 0
	r_mgi[14][0][0] = 0
	r_mgi[14][0][1] = 2
	r_mgi[14][0][2] = 0
	r_mgi[14][0][3] = 0
	r_mgi[14][0][4] = 0
	r_mgi[14][0][5] = 1
	r_mgi[14][0][6] = 0
	r_mgi[14][1][0] = 9
	r_mgi[14][1][1] = 5
	r_mgi[14][1][2] = 7
	r_mgi[14][1][3] = 2
	r_mgi[14][1][4] = 3
	r_mgi[14][1][5] = 7
	r_mgi[14][1][6] = 0
	r_mgi[14][2][0] = 1
	r_mgi[14][2][1] = 1
	r_mgi[14][2][2] = 1
	r_mgi[14][2][3] = 9
	r_mgi[14][2][4] = 0
	r_mgi[14][2][5] = 0
	r_mgi[14][2][6] = 2
	r_mgi[15][0][0] = 1
	r_mgi[15][0][1] = 1
	r_mgi[15][0][2] = 0
	r_mgi[15][0][3] = 1
	r_mgi[15][0][4] = 2
	r_mgi[15][0][5] = 1
	r_mgi[15][0][6] = 1
	r_mgi[15][1][0] = 10
	r_mgi[15][1][1] = 2
	r_mgi[15][1][2] = 4
	r_mgi[15][1][3] = 2
	r_mgi[15][1][4] = 1
	r_mgi[15][1][5] = 11
	r_mgi[15][1][6] = 6
	r_mgi[15][2][0] = 0
	r_mgi[15][2][1] = 1
	r_mgi[15][2][2] = 0
	r_mgi[15][2][3] = 4
	r_mgi[15][2][4] = 0
	r_mgi[15][2][5] = 0
	r_mgi[15][2][6] = 2
	r_mgi[16][0][0] = 2
	r_mgi[16][0][1] = 0
	r_mgi[16][0][2] = 1
	r_mgi[16][0][3] = 2
	r_mgi[16][0][4] = 0
	r_mgi[16][0][5] = 0
	r_mgi[16][0][6] = 0
	r_mgi[16][1][0] = 15
	r_mgi[16][1][1] = 8
	r_mgi[16][1][2] = 6
	r_mgi[16][1][3] = 1
	r_mgi[16][1][4] = 2
	r_mgi[16][1][5] = 5
	r_mgi[16][1][6] = 2
	r_mgi[16][2][0] = 2
	r_mgi[16][2][1] = 0
	r_mgi[16][2][2] = 2
	r_mgi[16][2][3] = 2
	r_mgi[16][2][4] = 0
	r_mgi[16][2][5] = 0
	r_mgi[16][2][6] = 0
	r_mgi[17][0][0] = 2
	r_mgi[17][0][1] = 0
	r_mgi[17][0][2] = 0
	r_mgi[17][0][3] = 0
	r_mgi[17][0][4] = 1
	r_mgi[17][0][5] = 0
	r_mgi[17][0][6] = 1
	r_mgi[17][1][0] = 7
	r_mgi[17][1][1] = 7
	r_mgi[17][1][2] = 7
	r_mgi[17][1][3] = 1
	r_mgi[17][1][4] = 2
	r_mgi[17][1][5] = 8
	r_mgi[17][1][6] = 5
	r_mgi[17][2][0] = 0
	r_mgi[17][2][1] = 1
	r_mgi[17][2][2] = 2
	r_mgi[17][2][3] = 2
	r_mgi[17][2][4] = 0
	r_mgi[17][2][5] = 1
	r_mgi[17][2][6] = 3
	r_mgi[18][0][0] = 3
	r_mgi[18][0][1] = 2
	r_mgi[18][0][2] = 2
	r_mgi[18][0][3] = 0
	r_mgi[18][0][4] = 0
	r_mgi[18][0][5] = 0
	r_mgi[18][0][6] = 1
	r_mgi[18][1][0] = 10
	r_mgi[18][1][1] = 10
	r_mgi[18][1][2] = 1
	r_mgi[18][1][3] = 0
	r_mgi[18][1][4] = 1
	r_mgi[18][1][5] = 8
	r_mgi[18][1][6] = 3
	r_mgi[18][2][0] = 2
	r_mgi[18][2][1] = 0
	r_mgi[18][2][2] = 3
	r_mgi[18][2][3] = 2
	r_mgi[18][2][4] = 1
	r_mgi[18][2][5] = 0
	r_mgi[18][2][6] = 1
	r_mgi[19][0][0] = 2
	r_mgi[19][0][1] = 1
	r_mgi[19][0][2] = 0
	r_mgi[19][0][3] = 0
	r_mgi[19][0][4] = 2
	r_mgi[19][0][5] = 0
	r_mgi[19][0][6] = 1
	r_mgi[19][1][0] = 9
	r_mgi[19][1][1] = 11
	r_mgi[19][1][2] = 5
	r_mgi[19][1][3] = 1
	r_mgi[19][1][4] = 2
	r_mgi[19][1][5] = 6
	r_mgi[19][1][6] = 2
	r_mgi[19][2][0] = 0
	r_mgi[19][2][1] = 0
	r_mgi[19][2][2] = 1
	r_mgi[19][2][3] = 5
	r_mgi[19][2][4] = 1
	r_mgi[19][2][5] = 0
	r_mgi[19][2][6] = 1
	r_mgi[20][0][0] = 3
	r_mgi[20][0][1] = 1
	r_mgi[20][0][2] = 0
	r_mgi[20][0][3] = 0
	r_mgi[20][0][4] = 1
	r_mgi[20][0][5] = 0
	r_mgi[20][0][6] = 2
	r_mgi[20][1][0] = 6
	r_mgi[20][1][1] = 8
	r_mgi[20][1][2] = 3
	r_mgi[20][1][3] = 2
	r_mgi[20][1][4] = 1
	r_mgi[20][1][5] = 8
	r_mgi[20][1][6] = 5
	r_mgi[20][2][0] = 0
	r_mgi[20][2][1] = 0
	r_mgi[20][2][2] = 3
	r_mgi[20][2][3] = 4
	r_mgi[20][2][4] = 0
	r_mgi[20][2][5] = 1
	r_mgi[20][2][6] = 2
	r_mgi[21][0][0] = 2
	r_mgi[21][0][1] = 3
	r_mgi[21][0][2] = 0
	r_mgi[21][0][3] = 0
	r_mgi[21][0][4] = 1
	r_mgi[21][0][5] = 0
	r_mgi[21][0][6] = 0
	r_mgi[21][1][0] = 13
	r_mgi[21][1][1] = 4
	r_mgi[21][1][2] = 5
	r_mgi[21][1][3] = 1
	r_mgi[21][1][4] = 3
	r_mgi[21][1][5] = 7
	r_mgi[21][1][6] = 2
	r_mgi[21][2][0] = 0
	r_mgi[21][2][1] = 3
	r_mgi[21][2][2] = 2
	r_mgi[21][2][3] = 3
	r_mgi[21][2][4] = 0
	r_mgi[21][2][5] = 0
	r_mgi[21][2][6] = 1
	r_mgi[22][0][0] = 1
	r_mgi[22][0][1] = 3
	r_mgi[22][0][2] = 1
	r_mgi[22][0][3] = 0
	r_mgi[22][0][4] = 0
	r_mgi[22][0][5] = 1
	r_mgi[22][0][6] = 1
	r_mgi[22][1][0] = 16
	r_mgi[22][1][1] = 6
	r_mgi[22][1][2] = 2
	r_mgi[22][1][3] = 1
	r_mgi[22][1][4] = 1
	r_mgi[22][1][5] = 8
	r_mgi[22][1][6] = 3
	r_mgi[22][2][0] = 0
	r_mgi[22][2][1] = 1
	r_mgi[22][2][2] = 1
	r_mgi[22][2][3] = 1
	r_mgi[22][2][4] = 2
	r_mgi[22][2][5] = 0
	r_mgi[22][2][6] = 1
	r_mgi[23][0][0] = 3
	r_mgi[23][0][1] = 0
	r_mgi[23][0][2] = 1
	r_mgi[23][0][3] = 1
	r_mgi[23][0][4] = 1
	r_mgi[23][0][5] = 0
	r_mgi[23][0][6] = 2
	r_mgi[23][1][0] = 6
	r_mgi[23][1][1] = 7
	r_mgi[23][1][2] = 8
	r_mgi[23][1][3] = 2
	r_mgi[23][1][4] = 1
	r_mgi[23][1][5] = 7
	r_mgi[23][1][6] = 4
	r_mgi[23][2][0] = 0
	r_mgi[23][2][1] = 0
	r_mgi[23][2][2] = 1
	r_mgi[23][2][3] = 4
	r_mgi[23][2][4] = 0
	r_mgi[23][2][5] = 0
	r_mgi[23][2][6] = 2
	r_mgi[24][0][0] = 2
	r_mgi[24][0][1] = 1
	r_mgi[24][0][2] = 0
	r_mgi[24][0][3] = 1
	r_mgi[24][0][4] = 0
	r_mgi[24][0][5] = 0
	r_mgi[24][0][6] = 0
	r_mgi[24][1][0] = 19
	r_mgi[24][1][1] = 6
	r_mgi[24][1][2] = 4
	r_mgi[24][1][3] = 1
	r_mgi[24][1][4] = 1
	r_mgi[24][1][5] = 9
	r_mgi[24][1][6] = 1
	r_mgi[24][2][0] = 0
	r_mgi[24][2][1] = 0
	r_mgi[24][2][2] = 1
	r_mgi[24][2][3] = 1
	r_mgi[24][2][4] = 2
	r_mgi[24][2][5] = 0
	r_mgi[24][2][6] = 1
	r_mgi[25][0][0] = 2
	r_mgi[25][0][1] = 2
	r_mgi[25][0][2] = 0
	r_mgi[25][0][3] = 0
	r_mgi[25][0][4] = 2
	r_mgi[25][0][5] = 0
	r_mgi[25][0][6] = 1
	r_mgi[25][1][0] = 6
	r_mgi[25][1][1] = 13
	r_mgi[25][1][2] = 6
	r_mgi[25][1][3] = 1
	r_mgi[25][1][4] = 2
	r_mgi[25][1][5] = 10
	r_mgi[25][1][6] = 2
	r_mgi[25][2][0] = 0
	r_mgi[25][2][1] = 1
	r_mgi[25][2][2] = 0
	r_mgi[25][2][3] = 1
	r_mgi[25][2][4] = 1
	r_mgi[25][2][5] = 0
	r_mgi[25][2][6] = 0
	r_mgi[26][0][0] = 0
	r_mgi[26][0][1] = 0
	r_mgi[26][0][2] = 0
	r_mgi[26][0][3] = 1
	r_mgi[26][0][4] = 2
	r_mgi[26][0][5] = 0
	r_mgi[26][0][6] = 1
	r_mgi[26][1][0] = 10
	r_mgi[26][1][1] = 8
	r_mgi[26][1][2] = 6
	r_mgi[26][1][3] = 2
	r_mgi[26][1][4] = 1
	r_mgi[26][1][5] = 6
	r_mgi[26][1][6] = 5
	r_mgi[26][2][0] = 0
	r_mgi[26][2][1] = 0
	r_mgi[26][2][2] = 2
	r_mgi[26][2][3] = 2
	r_mgi[26][2][4] = 1
	r_mgi[26][2][5] = 0
	r_mgi[26][2][6] = 3
	r_mgi[27][0][0] = 0
	r_mgi[27][0][1] = 2
	r_mgi[27][0][2] = 0
	r_mgi[27][0][3] = 0
	r_mgi[27][0][4] = 0
	r_mgi[27][0][5] = 0
	r_mgi[27][0][6] = 0
	r_mgi[27][1][0] = 8
	r_mgi[27][1][1] = 11
	r_mgi[27][1][2] = 2
	r_mgi[27][1][3] = 4
	r_mgi[27][1][4] = 1
	r_mgi[27][1][5] = 14
	r_mgi[27][1][6] = 3
	r_mgi[27][2][0] = 1
	r_mgi[27][2][1] = 1
	r_mgi[27][2][2] = 1
	r_mgi[27][2][3] = 0
	r_mgi[27][2][4] = 0
	r_mgi[27][2][5] = 0
	r_mgi[27][2][6] = 2
	r_mgi[28][0][0] = 1
	r_mgi[28][0][1] = 3
	r_mgi[28][0][2] = 0
	r_mgi[28][0][3] = 1
	r_mgi[28][0][4] = 2
	r_mgi[28][0][5] = 0
	r_mgi[28][0][6] = 0
	r_mgi[28][1][0] = 10
	r_mgi[28][1][1] = 3
	r_mgi[28][1][2] = 0
	r_mgi[28][1][3] = 4
	r_mgi[28][1][4] = 2
	r_mgi[28][1][5] = 2
	r_mgi[28][1][6] = 3
	r_mgi[28][2][0] = 1
	r_mgi[28][2][1] = 3
	r_mgi[28][2][2] = 2
	r_mgi[28][2][3] = 6
	r_mgi[28][2][4] = 2
	r_mgi[28][2][5] = 0
	r_mgi[28][2][6] = 5
	r_mgi[29][0][0] = 3
	r_mgi[29][0][1] = 2
	r_mgi[29][0][2] = 1
	r_mgi[29][0][3] = 0
	r_mgi[29][0][4] = 2
	r_mgi[29][0][5] = 1
	r_mgi[29][0][6] = 0
	r_mgi[29][1][0] = 3
	r_mgi[29][1][1] = 3
	r_mgi[29][1][2] = 1
	r_mgi[29][1][3] = 0
	r_mgi[29][1][4] = 0
	r_mgi[29][1][5] = 1
	r_mgi[29][1][6] = 0
	r_mgi[29][2][0] = 3
	r_mgi[29][2][1] = 6
	r_mgi[29][2][2] = 5
	r_mgi[29][2][3] = 9
	r_mgi[29][2][4] = 2
	r_mgi[29][2][5] = 1
	r_mgi[29][2][6] = 7
	r_mgi[30][0][0] = 3
	r_mgi[30][0][1] = 0
	r_mgi[30][0][2] = 0
	r_mgi[30][0][3] = 0
	r_mgi[30][0][4] = 0
	r_mgi[30][0][5] = 1
	r_mgi[30][0][6] = 1
	r_mgi[30][1][0] = 5
	r_mgi[30][1][1] = 2
	r_mgi[30][1][2] = 0
	r_mgi[30][1][3] = 2
	r_mgi[30][1][4] = 0
	r_mgi[30][1][5] = 3
	r_mgi[30][1][6] = 0
	r_mgi[30][2][0] = 4
	r_mgi[30][2][1] = 3
	r_mgi[30][2][2] = 4
	r_mgi[30][2][3] = 11
	r_mgi[30][2][4] = 3
	r_mgi[30][2][5] = 2
	r_mgi[30][2][6] = 6
	r_mgi[31][0][0] = 0
	r_mgi[31][0][1] = 2
	r_mgi[31][0][2] = 0
	r_mgi[31][0][3] = 1
	r_mgi[31][0][4] = 0
	r_mgi[31][0][5] = 1
	r_mgi[31][0][6] = 0
	r_mgi[31][1][0] = 4
	r_mgi[31][1][1] = 0
	r_mgi[31][1][2] = 1
	r_mgi[31][1][3] = 2
	r_mgi[31][1][4] = 1
	r_mgi[31][1][5] = 3
	r_mgi[31][1][6] = 0
	r_mgi[31][2][0] = 3
	r_mgi[31][2][1] = 5
	r_mgi[31][2][2] = 4
	r_mgi[31][2][3] = 14
	r_mgi[31][2][4] = 0
	r_mgi[31][2][5] = 2
	r_mgi[31][2][6] = 7
	r_mgi[32][0][0] = 1
	r_mgi[32][0][1] = 2
	r_mgi[32][0][2] = 1
	r_mgi[32][0][3] = 0
	r_mgi[32][0][4] = 2
	r_mgi[32][0][5] = 1
	r_mgi[32][0][6] = 1
	r_mgi[32][1][0] = 4
	r_mgi[32][1][1] = 1
	r_mgi[32][1][2] = 0
	r_mgi[32][1][3] = 0
	r_mgi[32][1][4] = 1
	r_mgi[32][1][5] = 2
	r_mgi[32][1][6] = 1
	r_mgi[32][2][0] = 3
	r_mgi[32][2][1] = 2
	r_mgi[32][2][2] = 6
	r_mgi[32][2][3] = 15
	r_mgi[32][2][4] = 1
	r_mgi[32][2][5] = 2
	r_mgi[32][2][6] = 4
	r_mgi[33][0][0] = 1
	r_mgi[33][0][1] = 2
	r_mgi[33][0][2] = 1
	r_mgi[33][0][3] = 0
	r_mgi[33][0][4] = 0
	r_mgi[33][0][5] = 0
	r_mgi[33][0][6] = 0
	r_mgi[33][1][0] = 9
	r_mgi[33][1][1] = 3
	r_mgi[33][1][2] = 2
	r_mgi[33][1][3] = 1
	r_mgi[33][1][4] = 0
	r_mgi[33][1][5] = 2
	r_mgi[33][1][6] = 1
	r_mgi[33][2][0] = 4
	r_mgi[33][2][1] = 0
	r_mgi[33][2][2] = 6
	r_mgi[33][2][3] = 11
	r_mgi[33][2][4] = 0
	r_mgi[33][2][5] = 1
	r_mgi[33][2][6] = 6
	r_mgi[34][0][0] = 1
	r_mgi[34][0][1] = 1
	r_mgi[34][0][2] = 0
	r_mgi[34][0][3] = 1
	r_mgi[34][0][4] = 1
	r_mgi[34][0][5] = 1
	r_mgi[34][0][6] = 0
	r_mgi[34][1][0] = 4
	r_mgi[34][1][1] = 0
	r_mgi[34][1][2] = 0
	r_mgi[34][1][3] = 1
	r_mgi[34][1][4] = 1
	r_mgi[34][1][5] = 2
	r_mgi[34][1][6] = 4
	r_mgi[34][2][0] = 5
	r_mgi[34][2][1] = 3
	r_mgi[34][2][2] = 7
	r_mgi[34][2][3] = 9
	r_mgi[34][2][4] = 1
	r_mgi[34][2][5] = 1
	r_mgi[34][2][6] = 7
	r_mgi[35][0][0] = 0
	r_mgi[35][0][1] = 2
	r_mgi[35][0][2] = 0
	r_mgi[35][0][3] = 0
	r_mgi[35][0][4] = 2
	r_mgi[35][0][5] = 0
	r_mgi[35][0][6] = 0
	r_mgi[35][1][0] = 0
	r_mgi[35][1][1] = 1
	r_mgi[35][1][2] = 1
	r_mgi[35][1][3] = 2
	r_mgi[35][1][4] = 2
	r_mgi[35][1][5] = 3
	r_mgi[35][1][6] = 0
	r_mgi[35][2][0] = 8
	r_mgi[35][2][1] = 4
	r_mgi[35][2][2] = 6
	r_mgi[35][2][3] = 13
	r_mgi[35][2][4] = 2
	r_mgi[35][2][5] = 0
	r_mgi[35][2][6] = 4
	r_mgi[36][0][0] = 1
	r_mgi[36][0][1] = 2
	r_mgi[36][0][2] = 0
	r_mgi[36][0][3] = 0
	r_mgi[36][0][4] = 1
	r_mgi[36][0][5] = 0
	r_mgi[36][0][6] = 1
	r_mgi[36][1][0] = 2
	r_mgi[36][1][1] = 5
	r_mgi[36][1][2] = 0
	r_mgi[36][1][3] = 1
	r_mgi[36][1][4] = 0
	r_mgi[36][1][5] = 0
	r_mgi[36][1][6] = 2
	r_mgi[36][2][0] = 4
	r_mgi[36][2][1] = 2
	r_mgi[36][2][2] = 4
	r_mgi[36][2][3] = 16
	r_mgi[36][2][4] = 3
	r_mgi[36][2][5] = 1
	r_mgi[36][2][6] = 5
	r_mgi[37][0][0] = 0
	r_mgi[37][0][1] = 3
	r_mgi[37][0][2] = 3
	r_mgi[37][0][3] = 2
	r_mgi[37][0][4] = 1
	r_mgi[37][0][5] = 1
	r_mgi[37][0][6] = 1
	r_mgi[37][1][0] = 3
	r_mgi[37][1][1] = 2
	r_mgi[37][1][2] = 1
	r_mgi[37][1][3] = 3
	r_mgi[37][1][4] = 2
	r_mgi[37][1][5] = 4
	r_mgi[37][1][6] = 0
	r_mgi[37][2][0] = 1
	r_mgi[37][2][1] = 3
	r_mgi[37][2][2] = 6
	r_mgi[37][2][3] = 9
	r_mgi[37][2][4] = 0
	r_mgi[37][2][5] = 3
	r_mgi[37][2][6] = 2
	r_mgi[38][0][0] = 0
	r_mgi[38][0][1] = 2
	r_mgi[38][0][2] = 0
	r_mgi[38][0][3] = 2
	r_mgi[38][0][4] = 0
	r_mgi[38][0][5] = 0
	r_mgi[38][0][6] = 0
	r_mgi[38][1][0] = 5
	r_mgi[38][1][1] = 2
	r_mgi[38][1][2] = 1
	r_mgi[38][1][3] = 1
	r_mgi[38][1][4] = 0
	r_mgi[38][1][5] = 4
	r_mgi[38][1][6] = 0
	r_mgi[38][2][0] = 6
	r_mgi[38][2][1] = 3
	r_mgi[38][2][2] = 5
	r_mgi[38][2][3] = 9
	r_mgi[38][2][4] = 3
	r_mgi[38][2][5] = 1
	r_mgi[38][2][6] = 6
	r_mgi[39][0][0] = 2
	r_mgi[39][0][1] = 2
	r_mgi[39][0][2] = 2
	r_mgi[39][0][3] = 0
	r_mgi[39][0][4] = 1
	r_mgi[39][0][5] = 0
	r_mgi[39][0][6] = 1
	r_mgi[39][1][0] = 2
	r_mgi[39][1][1] = 5
	r_mgi[39][1][2] = 2
	r_mgi[39][1][3] = 0
	r_mgi[39][1][4] = 0
	r_mgi[39][1][5] = 2
	r_mgi[39][1][6] = 0
	r_mgi[39][2][0] = 2
	r_mgi[39][2][1] = 3
	r_mgi[39][2][2] = 6
	r_mgi[39][2][3] = 12
	r_mgi[39][2][4] = 1
	r_mgi[39][2][5] = 3
	r_mgi[39][2][6] = 4

	b_mg[0][0] = 27
	b_mg[0][1] = 15
	b_mg[0][2] = 8
	b_mg[1][0] = 35
	b_mg[1][1] = 11
	b_mg[1][2] = 4
	b_mg[2][0] = 29
	b_mg[2][1] = 10
	b_mg[2][2] = 11
	b_mg[3][0] = 37
	b_mg[3][1] = 11
	b_mg[3][2] = 2
	b_mg[4][0] = 30
	b_mg[4][1] = 13
	b_mg[4][2] = 7
	b_mg[5][0] = 32
	b_mg[5][1] = 14
	b_mg[5][2] = 4
	b_mg[6][0] = 33
	b_mg[6][1] = 9
	b_mg[6][2] = 8
	b_mg[7][0] = 25
	b_mg[7][1] = 16
	b_mg[7][2] = 9
	b_mg[8][0] = 37
	b_mg[8][1] = 9
	b_mg[8][2] = 4
	b_mg[9][0] = 17
	b_mg[9][1] = 25
	b_mg[9][2] = 8
	b_mg[10][0] = 6
	b_mg[10][1] = 38
	b_mg[10][2] = 6
	b_mg[11][0] = 5
	b_mg[11][1] = 34
	b_mg[11][2] = 11
	b_mg[12][0] = 8
	b_mg[12][1] = 34
	b_mg[12][2] = 8
	b_mg[13][0] = 9
	b_mg[13][1] = 38
	b_mg[13][2] = 3
	b_mg[14][0] = 3
	b_mg[14][1] = 33
	b_mg[14][2] = 14
	b_mg[15][0] = 7
	b_mg[15][1] = 36
	b_mg[15][2] = 7
	b_mg[16][0] = 5
	b_mg[16][1] = 39
	b_mg[16][2] = 6
	b_mg[17][0] = 4
	b_mg[17][1] = 37
	b_mg[17][2] = 9
	b_mg[18][0] = 8
	b_mg[18][1] = 33
	b_mg[18][2] = 9
	b_mg[19][0] = 6
	b_mg[19][1] = 36
	b_mg[19][2] = 8
	b_mg[20][0] = 7
	b_mg[20][1] = 33
	b_mg[20][2] = 10
	b_mg[21][0] = 6
	b_mg[21][1] = 35
	b_mg[21][2] = 9
	b_mg[22][0] = 7
	b_mg[22][1] = 37
	b_mg[22][2] = 6
	b_mg[23][0] = 8
	b_mg[23][1] = 35
	b_mg[23][2] = 7
	b_mg[24][0] = 4
	b_mg[24][1] = 41
	b_mg[24][2] = 5
	b_mg[25][0] = 7
	b_mg[25][1] = 40
	b_mg[25][2] = 3
	b_mg[26][0] = 4
	b_mg[26][1] = 38
	b_mg[26][2] = 8
	b_mg[27][0] = 2
	b_mg[27][1] = 43
	b_mg[27][2] = 5
	b_mg[28][0] = 7
	b_mg[28][1] = 24
	b_mg[28][2] = 19
	b_mg[29][0] = 9
	b_mg[29][1] = 8
	b_mg[29][2] = 33
	b_mg[30][0] = 5
	b_mg[30][1] = 12
	b_mg[30][2] = 33
	b_mg[31][0] = 4
	b_mg[31][1] = 11
	b_mg[31][2] = 35
	b_mg[32][0] = 8
	b_mg[32][1] = 9
	b_mg[32][2] = 33
	b_mg[33][0] = 4
	b_mg[33][1] = 18
	b_mg[33][2] = 28
	b_mg[34][0] = 5
	b_mg[34][1] = 12
	b_mg[34][2] = 33
	b_mg[35][0] = 4
	b_mg[35][1] = 9
	b_mg[35][2] = 37
	b_mg[36][0] = 5
	b_mg[36][1] = 10
	b_mg[36][2] = 35
	b_mg[37][0] = 11
	b_mg[37][1] = 15
	b_mg[37][2] = 24
	b_mg[38][0] = 4
	b_mg[38][1] = 13
	b_mg[38][2] = 33
	b_mg[39][0] = 8
	b_mg[39][1] = 11
	b_mg[39][2] = 31

	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 40, G = 3, I = 7, J = 100
def force_instance14(printear_instancia = False):
	M = 40
	G = 3
	I = 7
	# J = 100
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 11
	r_mgi[0][0][1] = 13
	r_mgi[0][0][2] = 3
	r_mgi[0][0][3] = 6
	r_mgi[0][0][4] = 6
	r_mgi[0][0][5] = 5
	r_mgi[0][0][6] = 5
	r_mgi[0][1][0] = 17
	r_mgi[0][1][1] = 6
	r_mgi[0][1][2] = 2
	r_mgi[0][1][3] = 1
	r_mgi[0][1][4] = 1
	r_mgi[0][1][5] = 5
	r_mgi[0][1][6] = 4
	r_mgi[0][2][0] = 1
	r_mgi[0][2][1] = 0
	r_mgi[0][2][2] = 3
	r_mgi[0][2][3] = 7
	r_mgi[0][2][4] = 0
	r_mgi[0][2][5] = 0
	r_mgi[0][2][6] = 4
	r_mgi[1][0][0] = 12
	r_mgi[1][0][1] = 18
	r_mgi[1][0][2] = 7
	r_mgi[1][0][3] = 8
	r_mgi[1][0][4] = 6
	r_mgi[1][0][5] = 5
	r_mgi[1][0][6] = 4
	r_mgi[1][1][0] = 9
	r_mgi[1][1][1] = 4
	r_mgi[1][1][2] = 2
	r_mgi[1][1][3] = 0
	r_mgi[1][1][4] = 1
	r_mgi[1][1][5] = 6
	r_mgi[1][1][6] = 3
	r_mgi[1][2][0] = 0
	r_mgi[1][2][1] = 1
	r_mgi[1][2][2] = 3
	r_mgi[1][2][3] = 5
	r_mgi[1][2][4] = 1
	r_mgi[1][2][5] = 0
	r_mgi[1][2][6] = 5
	r_mgi[2][0][0] = 11
	r_mgi[2][0][1] = 21
	r_mgi[2][0][2] = 8
	r_mgi[2][0][3] = 4
	r_mgi[2][0][4] = 5
	r_mgi[2][0][5] = 2
	r_mgi[2][0][6] = 6
	r_mgi[2][1][0] = 6
	r_mgi[2][1][1] = 4
	r_mgi[2][1][2] = 4
	r_mgi[2][1][3] = 0
	r_mgi[2][1][4] = 1
	r_mgi[2][1][5] = 2
	r_mgi[2][1][6] = 5
	r_mgi[2][2][0] = 2
	r_mgi[2][2][1] = 2
	r_mgi[2][2][2] = 2
	r_mgi[2][2][3] = 9
	r_mgi[2][2][4] = 1
	r_mgi[2][2][5] = 1
	r_mgi[2][2][6] = 4
	r_mgi[3][0][0] = 11
	r_mgi[3][0][1] = 17
	r_mgi[3][0][2] = 6
	r_mgi[3][0][3] = 8
	r_mgi[3][0][4] = 9
	r_mgi[3][0][5] = 6
	r_mgi[3][0][6] = 5
	r_mgi[3][1][0] = 7
	r_mgi[3][1][1] = 4
	r_mgi[3][1][2] = 2
	r_mgi[3][1][3] = 1
	r_mgi[3][1][4] = 1
	r_mgi[3][1][5] = 4
	r_mgi[3][1][6] = 0
	r_mgi[3][2][0] = 3
	r_mgi[3][2][1] = 1
	r_mgi[3][2][2] = 2
	r_mgi[3][2][3] = 7
	r_mgi[3][2][4] = 0
	r_mgi[3][2][5] = 2
	r_mgi[3][2][6] = 4
	r_mgi[4][0][0] = 13
	r_mgi[4][0][1] = 19
	r_mgi[4][0][2] = 1
	r_mgi[4][0][3] = 7
	r_mgi[4][0][4] = 7
	r_mgi[4][0][5] = 4
	r_mgi[4][0][6] = 8
	r_mgi[4][1][0] = 5
	r_mgi[4][1][1] = 7
	r_mgi[4][1][2] = 2
	r_mgi[4][1][3] = 2
	r_mgi[4][1][4] = 1
	r_mgi[4][1][5] = 6
	r_mgi[4][1][6] = 3
	r_mgi[4][2][0] = 3
	r_mgi[4][2][1] = 2
	r_mgi[4][2][2] = 2
	r_mgi[4][2][3] = 2
	r_mgi[4][2][4] = 0
	r_mgi[4][2][5] = 1
	r_mgi[4][2][6] = 5
	r_mgi[5][0][0] = 14
	r_mgi[5][0][1] = 27
	r_mgi[5][0][2] = 4
	r_mgi[5][0][3] = 6
	r_mgi[5][0][4] = 4
	r_mgi[5][0][5] = 5
	r_mgi[5][0][6] = 3
	r_mgi[5][1][0] = 5
	r_mgi[5][1][1] = 5
	r_mgi[5][1][2] = 2
	r_mgi[5][1][3] = 1
	r_mgi[5][1][4] = 2
	r_mgi[5][1][5] = 6
	r_mgi[5][1][6] = 4
	r_mgi[5][2][0] = 0
	r_mgi[5][2][1] = 0
	r_mgi[5][2][2] = 2
	r_mgi[5][2][3] = 6
	r_mgi[5][2][4] = 1
	r_mgi[5][2][5] = 1
	r_mgi[5][2][6] = 2
	r_mgi[6][0][0] = 19
	r_mgi[6][0][1] = 20
	r_mgi[6][0][2] = 6
	r_mgi[6][0][3] = 7
	r_mgi[6][0][4] = 6
	r_mgi[6][0][5] = 11
	r_mgi[6][0][6] = 7
	r_mgi[6][1][0] = 3
	r_mgi[6][1][1] = 3
	r_mgi[6][1][2] = 2
	r_mgi[6][1][3] = 1
	r_mgi[6][1][4] = 0
	r_mgi[6][1][5] = 0
	r_mgi[6][1][6] = 4
	r_mgi[6][2][0] = 2
	r_mgi[6][2][1] = 0
	r_mgi[6][2][2] = 1
	r_mgi[6][2][3] = 4
	r_mgi[6][2][4] = 2
	r_mgi[6][2][5] = 2
	r_mgi[6][2][6] = 0
	r_mgi[7][0][0] = 11
	r_mgi[7][0][1] = 20
	r_mgi[7][0][2] = 9
	r_mgi[7][0][3] = 5
	r_mgi[7][0][4] = 8
	r_mgi[7][0][5] = 4
	r_mgi[7][0][6] = 7
	r_mgi[7][1][0] = 7
	r_mgi[7][1][1] = 6
	r_mgi[7][1][2] = 4
	r_mgi[7][1][3] = 0
	r_mgi[7][1][4] = 0
	r_mgi[7][1][5] = 3
	r_mgi[7][1][6] = 1
	r_mgi[7][2][0] = 1
	r_mgi[7][2][1] = 2
	r_mgi[7][2][2] = 1
	r_mgi[7][2][3] = 5
	r_mgi[7][2][4] = 2
	r_mgi[7][2][5] = 1
	r_mgi[7][2][6] = 3
	r_mgi[8][0][0] = 11
	r_mgi[8][0][1] = 19
	r_mgi[8][0][2] = 6
	r_mgi[8][0][3] = 2
	r_mgi[8][0][4] = 7
	r_mgi[8][0][5] = 7
	r_mgi[8][0][6] = 4
	r_mgi[8][1][0] = 6
	r_mgi[8][1][1] = 8
	r_mgi[8][1][2] = 2
	r_mgi[8][1][3] = 1
	r_mgi[8][1][4] = 2
	r_mgi[8][1][5] = 8
	r_mgi[8][1][6] = 2
	r_mgi[8][2][0] = 2
	r_mgi[8][2][1] = 3
	r_mgi[8][2][2] = 3
	r_mgi[8][2][3] = 3
	r_mgi[8][2][4] = 0
	r_mgi[8][2][5] = 1
	r_mgi[8][2][6] = 3
	r_mgi[9][0][0] = 8
	r_mgi[9][0][1] = 8
	r_mgi[9][0][2] = 5
	r_mgi[9][0][3] = 6
	r_mgi[9][0][4] = 3
	r_mgi[9][0][5] = 6
	r_mgi[9][0][6] = 2
	r_mgi[9][1][0] = 17
	r_mgi[9][1][1] = 10
	r_mgi[9][1][2] = 6
	r_mgi[9][1][3] = 0
	r_mgi[9][1][4] = 4
	r_mgi[9][1][5] = 7
	r_mgi[9][1][6] = 6
	r_mgi[9][2][0] = 3
	r_mgi[9][2][1] = 0
	r_mgi[9][2][2] = 1
	r_mgi[9][2][3] = 2
	r_mgi[9][2][4] = 1
	r_mgi[9][2][5] = 1
	r_mgi[9][2][6] = 4
	r_mgi[10][0][0] = 4
	r_mgi[10][0][1] = 4
	r_mgi[10][0][2] = 1
	r_mgi[10][0][3] = 4
	r_mgi[10][0][4] = 2
	r_mgi[10][0][5] = 3
	r_mgi[10][0][6] = 2
	r_mgi[10][1][0] = 12
	r_mgi[10][1][1] = 17
	r_mgi[10][1][2] = 12
	r_mgi[10][1][3] = 4
	r_mgi[10][1][4] = 2
	r_mgi[10][1][5] = 13
	r_mgi[10][1][6] = 9
	r_mgi[10][2][0] = 1
	r_mgi[10][2][1] = 1
	r_mgi[10][2][2] = 0
	r_mgi[10][2][3] = 5
	r_mgi[10][2][4] = 0
	r_mgi[10][2][5] = 1
	r_mgi[10][2][6] = 3
	r_mgi[11][0][0] = 1
	r_mgi[11][0][1] = 0
	r_mgi[11][0][2] = 1
	r_mgi[11][0][3] = 0
	r_mgi[11][0][4] = 1
	r_mgi[11][0][5] = 1
	r_mgi[11][0][6] = 0
	r_mgi[11][1][0] = 28
	r_mgi[11][1][1] = 16
	r_mgi[11][1][2] = 5
	r_mgi[11][1][3] = 5
	r_mgi[11][1][4] = 5
	r_mgi[11][1][5] = 19
	r_mgi[11][1][6] = 4
	r_mgi[11][2][0] = 2
	r_mgi[11][2][1] = 1
	r_mgi[11][2][2] = 2
	r_mgi[11][2][3] = 6
	r_mgi[11][2][4] = 0
	r_mgi[11][2][5] = 0
	r_mgi[11][2][6] = 3
	r_mgi[12][0][0] = 2
	r_mgi[12][0][1] = 4
	r_mgi[12][0][2] = 3
	r_mgi[12][0][3] = 1
	r_mgi[12][0][4] = 2
	r_mgi[12][0][5] = 4
	r_mgi[12][0][6] = 0
	r_mgi[12][1][0] = 20
	r_mgi[12][1][1] = 21
	r_mgi[12][1][2] = 10
	r_mgi[12][1][3] = 1
	r_mgi[12][1][4] = 3
	r_mgi[12][1][5] = 14
	r_mgi[12][1][6] = 7
	r_mgi[12][2][0] = 0
	r_mgi[12][2][1] = 0
	r_mgi[12][2][2] = 1
	r_mgi[12][2][3] = 2
	r_mgi[12][2][4] = 0
	r_mgi[12][2][5] = 2
	r_mgi[12][2][6] = 3
	r_mgi[13][0][0] = 3
	r_mgi[13][0][1] = 0
	r_mgi[13][0][2] = 1
	r_mgi[13][0][3] = 3
	r_mgi[13][0][4] = 1
	r_mgi[13][0][5] = 1
	r_mgi[13][0][6] = 0
	r_mgi[13][1][0] = 14
	r_mgi[13][1][1] = 19
	r_mgi[13][1][2] = 16
	r_mgi[13][1][3] = 3
	r_mgi[13][1][4] = 2
	r_mgi[13][1][5] = 19
	r_mgi[13][1][6] = 9
	r_mgi[13][2][0] = 3
	r_mgi[13][2][1] = 0
	r_mgi[13][2][2] = 2
	r_mgi[13][2][3] = 3
	r_mgi[13][2][4] = 0
	r_mgi[13][2][5] = 0
	r_mgi[13][2][6] = 1
	r_mgi[14][0][0] = 3
	r_mgi[14][0][1] = 3
	r_mgi[14][0][2] = 0
	r_mgi[14][0][3] = 4
	r_mgi[14][0][4] = 1
	r_mgi[14][0][5] = 2
	r_mgi[14][0][6] = 0
	r_mgi[14][1][0] = 15
	r_mgi[14][1][1] = 15
	r_mgi[14][1][2] = 9
	r_mgi[14][1][3] = 2
	r_mgi[14][1][4] = 10
	r_mgi[14][1][5] = 18
	r_mgi[14][1][6] = 6
	r_mgi[14][2][0] = 1
	r_mgi[14][2][1] = 0
	r_mgi[14][2][2] = 1
	r_mgi[14][2][3] = 4
	r_mgi[14][2][4] = 0
	r_mgi[14][2][5] = 1
	r_mgi[14][2][6] = 5
	r_mgi[15][0][0] = 2
	r_mgi[15][0][1] = 4
	r_mgi[15][0][2] = 0
	r_mgi[15][0][3] = 2
	r_mgi[15][0][4] = 2
	r_mgi[15][0][5] = 1
	r_mgi[15][0][6] = 4
	r_mgi[15][1][0] = 20
	r_mgi[15][1][1] = 11
	r_mgi[15][1][2] = 7
	r_mgi[15][1][3] = 0
	r_mgi[15][1][4] = 6
	r_mgi[15][1][5] = 18
	r_mgi[15][1][6] = 3
	r_mgi[15][2][0] = 1
	r_mgi[15][2][1] = 3
	r_mgi[15][2][2] = 1
	r_mgi[15][2][3] = 9
	r_mgi[15][2][4] = 3
	r_mgi[15][2][5] = 1
	r_mgi[15][2][6] = 2
	r_mgi[16][0][0] = 4
	r_mgi[16][0][1] = 7
	r_mgi[16][0][2] = 1
	r_mgi[16][0][3] = 2
	r_mgi[16][0][4] = 0
	r_mgi[16][0][5] = 2
	r_mgi[16][0][6] = 0
	r_mgi[16][1][0] = 18
	r_mgi[16][1][1] = 22
	r_mgi[16][1][2] = 9
	r_mgi[16][1][3] = 5
	r_mgi[16][1][4] = 1
	r_mgi[16][1][5] = 13
	r_mgi[16][1][6] = 7
	r_mgi[16][2][0] = 0
	r_mgi[16][2][1] = 1
	r_mgi[16][2][2] = 0
	r_mgi[16][2][3] = 2
	r_mgi[16][2][4] = 0
	r_mgi[16][2][5] = 2
	r_mgi[16][2][6] = 4
	r_mgi[17][0][0] = 2
	r_mgi[17][0][1] = 5
	r_mgi[17][0][2] = 1
	r_mgi[17][0][3] = 1
	r_mgi[17][0][4] = 2
	r_mgi[17][0][5] = 2
	r_mgi[17][0][6] = 1
	r_mgi[17][1][0] = 20
	r_mgi[17][1][1] = 14
	r_mgi[17][1][2] = 7
	r_mgi[17][1][3] = 7
	r_mgi[17][1][4] = 4
	r_mgi[17][1][5] = 10
	r_mgi[17][1][6] = 11
	r_mgi[17][2][0] = 1
	r_mgi[17][2][1] = 1
	r_mgi[17][2][2] = 0
	r_mgi[17][2][3] = 5
	r_mgi[17][2][4] = 2
	r_mgi[17][2][5] = 0
	r_mgi[17][2][6] = 4
	r_mgi[18][0][0] = 1
	r_mgi[18][0][1] = 5
	r_mgi[18][0][2] = 1
	r_mgi[18][0][3] = 4
	r_mgi[18][0][4] = 0
	r_mgi[18][0][5] = 4
	r_mgi[18][0][6] = 1
	r_mgi[18][1][0] = 24
	r_mgi[18][1][1] = 18
	r_mgi[18][1][2] = 7
	r_mgi[18][1][3] = 4
	r_mgi[18][1][4] = 2
	r_mgi[18][1][5] = 13
	r_mgi[18][1][6] = 5
	r_mgi[18][2][0] = 1
	r_mgi[18][2][1] = 2
	r_mgi[18][2][2] = 2
	r_mgi[18][2][3] = 2
	r_mgi[18][2][4] = 2
	r_mgi[18][2][5] = 1
	r_mgi[18][2][6] = 1
	r_mgi[19][0][0] = 2
	r_mgi[19][0][1] = 4
	r_mgi[19][0][2] = 0
	r_mgi[19][0][3] = 0
	r_mgi[19][0][4] = 1
	r_mgi[19][0][5] = 2
	r_mgi[19][0][6] = 2
	r_mgi[19][1][0] = 27
	r_mgi[19][1][1] = 16
	r_mgi[19][1][2] = 7
	r_mgi[19][1][3] = 6
	r_mgi[19][1][4] = 2
	r_mgi[19][1][5] = 12
	r_mgi[19][1][6] = 4
	r_mgi[19][2][0] = 0
	r_mgi[19][2][1] = 1
	r_mgi[19][2][2] = 2
	r_mgi[19][2][3] = 4
	r_mgi[19][2][4] = 1
	r_mgi[19][2][5] = 1
	r_mgi[19][2][6] = 6
	r_mgi[20][0][0] = 3
	r_mgi[20][0][1] = 3
	r_mgi[20][0][2] = 2
	r_mgi[20][0][3] = 1
	r_mgi[20][0][4] = 1
	r_mgi[20][0][5] = 3
	r_mgi[20][0][6] = 2
	r_mgi[20][1][0] = 21
	r_mgi[20][1][1] = 12
	r_mgi[20][1][2] = 7
	r_mgi[20][1][3] = 4
	r_mgi[20][1][4] = 6
	r_mgi[20][1][5] = 12
	r_mgi[20][1][6] = 7
	r_mgi[20][2][0] = 1
	r_mgi[20][2][1] = 2
	r_mgi[20][2][2] = 4
	r_mgi[20][2][3] = 3
	r_mgi[20][2][4] = 2
	r_mgi[20][2][5] = 1
	r_mgi[20][2][6] = 3
	r_mgi[21][0][0] = 3
	r_mgi[21][0][1] = 2
	r_mgi[21][0][2] = 1
	r_mgi[21][0][3] = 3
	r_mgi[21][0][4] = 0
	r_mgi[21][0][5] = 1
	r_mgi[21][0][6] = 0
	r_mgi[21][1][0] = 26
	r_mgi[21][1][1] = 12
	r_mgi[21][1][2] = 8
	r_mgi[21][1][3] = 6
	r_mgi[21][1][4] = 5
	r_mgi[21][1][5] = 20
	r_mgi[21][1][6] = 2
	r_mgi[21][2][0] = 0
	r_mgi[21][2][1] = 1
	r_mgi[21][2][2] = 5
	r_mgi[21][2][3] = 2
	r_mgi[21][2][4] = 0
	r_mgi[21][2][5] = 0
	r_mgi[21][2][6] = 3
	r_mgi[22][0][0] = 2
	r_mgi[22][0][1] = 4
	r_mgi[22][0][2] = 1
	r_mgi[22][0][3] = 3
	r_mgi[22][0][4] = 1
	r_mgi[22][0][5] = 1
	r_mgi[22][0][6] = 2
	r_mgi[22][1][0] = 26
	r_mgi[22][1][1] = 11
	r_mgi[22][1][2] = 9
	r_mgi[22][1][3] = 0
	r_mgi[22][1][4] = 4
	r_mgi[22][1][5] = 12
	r_mgi[22][1][6] = 6
	r_mgi[22][2][0] = 1
	r_mgi[22][2][1] = 0
	r_mgi[22][2][2] = 1
	r_mgi[22][2][3] = 7
	r_mgi[22][2][4] = 3
	r_mgi[22][2][5] = 1
	r_mgi[22][2][6] = 5
	r_mgi[23][0][0] = 2
	r_mgi[23][0][1] = 4
	r_mgi[23][0][2] = 0
	r_mgi[23][0][3] = 0
	r_mgi[23][0][4] = 2
	r_mgi[23][0][5] = 3
	r_mgi[23][0][6] = 1
	r_mgi[23][1][0] = 23
	r_mgi[23][1][1] = 13
	r_mgi[23][1][2] = 12
	r_mgi[23][1][3] = 5
	r_mgi[23][1][4] = 2
	r_mgi[23][1][5] = 10
	r_mgi[23][1][6] = 11
	r_mgi[23][2][0] = 4
	r_mgi[23][2][1] = 1
	r_mgi[23][2][2] = 2
	r_mgi[23][2][3] = 2
	r_mgi[23][2][4] = 0
	r_mgi[23][2][5] = 0
	r_mgi[23][2][6] = 3
	r_mgi[24][0][0] = 2
	r_mgi[24][0][1] = 3
	r_mgi[24][0][2] = 1
	r_mgi[24][0][3] = 1
	r_mgi[24][0][4] = 4
	r_mgi[24][0][5] = 0
	r_mgi[24][0][6] = 2
	r_mgi[24][1][0] = 20
	r_mgi[24][1][1] = 12
	r_mgi[24][1][2] = 6
	r_mgi[24][1][3] = 3
	r_mgi[24][1][4] = 5
	r_mgi[24][1][5] = 13
	r_mgi[24][1][6] = 5
	r_mgi[24][2][0] = 0
	r_mgi[24][2][1] = 5
	r_mgi[24][2][2] = 7
	r_mgi[24][2][3] = 5
	r_mgi[24][2][4] = 1
	r_mgi[24][2][5] = 0
	r_mgi[24][2][6] = 5
	r_mgi[25][0][0] = 1
	r_mgi[25][0][1] = 6
	r_mgi[25][0][2] = 1
	r_mgi[25][0][3] = 1
	r_mgi[25][0][4] = 2
	r_mgi[25][0][5] = 0
	r_mgi[25][0][6] = 1
	r_mgi[25][1][0] = 13
	r_mgi[25][1][1] = 10
	r_mgi[25][1][2] = 11
	r_mgi[25][1][3] = 7
	r_mgi[25][1][4] = 4
	r_mgi[25][1][5] = 17
	r_mgi[25][1][6] = 8
	r_mgi[25][2][0] = 2
	r_mgi[25][2][1] = 3
	r_mgi[25][2][2] = 4
	r_mgi[25][2][3] = 3
	r_mgi[25][2][4] = 2
	r_mgi[25][2][5] = 0
	r_mgi[25][2][6] = 4
	r_mgi[26][0][0] = 1
	r_mgi[26][0][1] = 5
	r_mgi[26][0][2] = 1
	r_mgi[26][0][3] = 2
	r_mgi[26][0][4] = 1
	r_mgi[26][0][5] = 1
	r_mgi[26][0][6] = 2
	r_mgi[26][1][0] = 34
	r_mgi[26][1][1] = 6
	r_mgi[26][1][2] = 7
	r_mgi[26][1][3] = 1
	r_mgi[26][1][4] = 5
	r_mgi[26][1][5] = 14
	r_mgi[26][1][6] = 5
	r_mgi[26][2][0] = 0
	r_mgi[26][2][1] = 2
	r_mgi[26][2][2] = 4
	r_mgi[26][2][3] = 5
	r_mgi[26][2][4] = 0
	r_mgi[26][2][5] = 0
	r_mgi[26][2][6] = 4
	r_mgi[27][0][0] = 2
	r_mgi[27][0][1] = 2
	r_mgi[27][0][2] = 2
	r_mgi[27][0][3] = 0
	r_mgi[27][0][4] = 1
	r_mgi[27][0][5] = 2
	r_mgi[27][0][6] = 0
	r_mgi[27][1][0] = 31
	r_mgi[27][1][1] = 13
	r_mgi[27][1][2] = 0
	r_mgi[27][1][3] = 10
	r_mgi[27][1][4] = 7
	r_mgi[27][1][5] = 12
	r_mgi[27][1][6] = 11
	r_mgi[27][2][0] = 0
	r_mgi[27][2][1] = 1
	r_mgi[27][2][2] = 1
	r_mgi[27][2][3] = 2
	r_mgi[27][2][4] = 1
	r_mgi[27][2][5] = 0
	r_mgi[27][2][6] = 2
	r_mgi[28][0][0] = 4
	r_mgi[28][0][1] = 3
	r_mgi[28][0][2] = 1
	r_mgi[28][0][3] = 1
	r_mgi[28][0][4] = 3
	r_mgi[28][0][5] = 1
	r_mgi[28][0][6] = 0
	r_mgi[28][1][0] = 16
	r_mgi[28][1][1] = 11
	r_mgi[28][1][2] = 6
	r_mgi[28][1][3] = 1
	r_mgi[28][1][4] = 1
	r_mgi[28][1][5] = 6
	r_mgi[28][1][6] = 4
	r_mgi[28][2][0] = 4
	r_mgi[28][2][1] = 7
	r_mgi[28][2][2] = 7
	r_mgi[28][2][3] = 12
	r_mgi[28][2][4] = 2
	r_mgi[28][2][5] = 2
	r_mgi[28][2][6] = 8
	r_mgi[29][0][0] = 5
	r_mgi[29][0][1] = 0
	r_mgi[29][0][2] = 0
	r_mgi[29][0][3] = 0
	r_mgi[29][0][4] = 0
	r_mgi[29][0][5] = 1
	r_mgi[29][0][6] = 2
	r_mgi[29][1][0] = 6
	r_mgi[29][1][1] = 3
	r_mgi[29][1][2] = 0
	r_mgi[29][1][3] = 3
	r_mgi[29][1][4] = 1
	r_mgi[29][1][5] = 3
	r_mgi[29][1][6] = 0
	r_mgi[29][2][0] = 9
	r_mgi[29][2][1] = 7
	r_mgi[29][2][2] = 11
	r_mgi[29][2][3] = 25
	r_mgi[29][2][4] = 5
	r_mgi[29][2][5] = 4
	r_mgi[29][2][6] = 15
	r_mgi[30][0][0] = 3
	r_mgi[30][0][1] = 6
	r_mgi[30][0][2] = 2
	r_mgi[30][0][3] = 3
	r_mgi[30][0][4] = 1
	r_mgi[30][0][5] = 3
	r_mgi[30][0][6] = 1
	r_mgi[30][1][0] = 9
	r_mgi[30][1][1] = 2
	r_mgi[30][1][2] = 3
	r_mgi[30][1][3] = 3
	r_mgi[30][1][4] = 2
	r_mgi[30][1][5] = 7
	r_mgi[30][1][6] = 2
	r_mgi[30][2][0] = 5
	r_mgi[30][2][1] = 7
	r_mgi[30][2][2] = 7
	r_mgi[30][2][3] = 20
	r_mgi[30][2][4] = 1
	r_mgi[30][2][5] = 3
	r_mgi[30][2][6] = 10
	r_mgi[31][0][0] = 2
	r_mgi[31][0][1] = 3
	r_mgi[31][0][2] = 2
	r_mgi[31][0][3] = 0
	r_mgi[31][0][4] = 3
	r_mgi[31][0][5] = 2
	r_mgi[31][0][6] = 1
	r_mgi[31][1][0] = 9
	r_mgi[31][1][1] = 3
	r_mgi[31][1][2] = 0
	r_mgi[31][1][3] = 0
	r_mgi[31][1][4] = 2
	r_mgi[31][1][5] = 5
	r_mgi[31][1][6] = 2
	r_mgi[31][2][0] = 6
	r_mgi[31][2][1] = 5
	r_mgi[31][2][2] = 12
	r_mgi[31][2][3] = 27
	r_mgi[31][2][4] = 2
	r_mgi[31][2][5] = 5
	r_mgi[31][2][6] = 9
	r_mgi[32][0][0] = 2
	r_mgi[32][0][1] = 3
	r_mgi[32][0][2] = 1
	r_mgi[32][0][3] = 1
	r_mgi[32][0][4] = 0
	r_mgi[32][0][5] = 0
	r_mgi[32][0][6] = 0
	r_mgi[32][1][0] = 9
	r_mgi[32][1][1] = 6
	r_mgi[32][1][2] = 3
	r_mgi[32][1][3] = 1
	r_mgi[32][1][4] = 1
	r_mgi[32][1][5] = 3
	r_mgi[32][1][6] = 3
	r_mgi[32][2][0] = 3
	r_mgi[32][2][1] = 7
	r_mgi[32][2][2] = 17
	r_mgi[32][2][3] = 18
	r_mgi[32][2][4] = 3
	r_mgi[32][2][5] = 3
	r_mgi[32][2][6] = 16
	r_mgi[33][0][0] = 2
	r_mgi[33][0][1] = 2
	r_mgi[33][0][2] = 1
	r_mgi[33][0][3] = 1
	r_mgi[33][0][4] = 2
	r_mgi[33][0][5] = 2
	r_mgi[33][0][6] = 1
	r_mgi[33][1][0] = 4
	r_mgi[33][1][1] = 3
	r_mgi[33][1][2] = 5
	r_mgi[33][1][3] = 2
	r_mgi[33][1][4] = 4
	r_mgi[33][1][5] = 4
	r_mgi[33][1][6] = 4
	r_mgi[33][2][0] = 6
	r_mgi[33][2][1] = 7
	r_mgi[33][2][2] = 12
	r_mgi[33][2][3] = 17
	r_mgi[33][2][4] = 3
	r_mgi[33][2][5] = 2
	r_mgi[33][2][6] = 16
	r_mgi[34][0][0] = 2
	r_mgi[34][0][1] = 1
	r_mgi[34][0][2] = 0
	r_mgi[34][0][3] = 2
	r_mgi[34][0][4] = 0
	r_mgi[34][0][5] = 0
	r_mgi[34][0][6] = 1
	r_mgi[34][1][0] = 7
	r_mgi[34][1][1] = 9
	r_mgi[34][1][2] = 4
	r_mgi[34][1][3] = 0
	r_mgi[34][1][4] = 3
	r_mgi[34][1][5] = 1
	r_mgi[34][1][6] = 2
	r_mgi[34][2][0] = 7
	r_mgi[34][2][1] = 11
	r_mgi[34][2][2] = 16
	r_mgi[34][2][3] = 16
	r_mgi[34][2][4] = 4
	r_mgi[34][2][5] = 3
	r_mgi[34][2][6] = 11
	r_mgi[35][0][0] = 1
	r_mgi[35][0][1] = 2
	r_mgi[35][0][2] = 1
	r_mgi[35][0][3] = 1
	r_mgi[35][0][4] = 1
	r_mgi[35][0][5] = 3
	r_mgi[35][0][6] = 0
	r_mgi[35][1][0] = 7
	r_mgi[35][1][1] = 6
	r_mgi[35][1][2] = 2
	r_mgi[35][1][3] = 5
	r_mgi[35][1][4] = 1
	r_mgi[35][1][5] = 4
	r_mgi[35][1][6] = 0
	r_mgi[35][2][0] = 4
	r_mgi[35][2][1] = 11
	r_mgi[35][2][2] = 18
	r_mgi[35][2][3] = 17
	r_mgi[35][2][4] = 0
	r_mgi[35][2][5] = 2
	r_mgi[35][2][6] = 14
	r_mgi[36][0][0] = 5
	r_mgi[36][0][1] = 6
	r_mgi[36][0][2] = 1
	r_mgi[36][0][3] = 1
	r_mgi[36][0][4] = 1
	r_mgi[36][0][5] = 0
	r_mgi[36][0][6] = 3
	r_mgi[36][1][0] = 4
	r_mgi[36][1][1] = 8
	r_mgi[36][1][2] = 3
	r_mgi[36][1][3] = 0
	r_mgi[36][1][4] = 0
	r_mgi[36][1][5] = 4
	r_mgi[36][1][6] = 3
	r_mgi[36][2][0] = 8
	r_mgi[36][2][1] = 8
	r_mgi[36][2][2] = 8
	r_mgi[36][2][3] = 25
	r_mgi[36][2][4] = 1
	r_mgi[36][2][5] = 2
	r_mgi[36][2][6] = 9
	r_mgi[37][0][0] = 3
	r_mgi[37][0][1] = 7
	r_mgi[37][0][2] = 1
	r_mgi[37][0][3] = 1
	r_mgi[37][0][4] = 1
	r_mgi[37][0][5] = 1
	r_mgi[37][0][6] = 0
	r_mgi[37][1][0] = 3
	r_mgi[37][1][1] = 0
	r_mgi[37][1][2] = 5
	r_mgi[37][1][3] = 1
	r_mgi[37][1][4] = 1
	r_mgi[37][1][5] = 5
	r_mgi[37][1][6] = 2
	r_mgi[37][2][0] = 9
	r_mgi[37][2][1] = 6
	r_mgi[37][2][2] = 16
	r_mgi[37][2][3] = 19
	r_mgi[37][2][4] = 5
	r_mgi[37][2][5] = 1
	r_mgi[37][2][6] = 13
	r_mgi[38][0][0] = 3
	r_mgi[38][0][1] = 5
	r_mgi[38][0][2] = 1
	r_mgi[38][0][3] = 4
	r_mgi[38][0][4] = 3
	r_mgi[38][0][5] = 0
	r_mgi[38][0][6] = 1
	r_mgi[38][1][0] = 5
	r_mgi[38][1][1] = 5
	r_mgi[38][1][2] = 2
	r_mgi[38][1][3] = 2
	r_mgi[38][1][4] = 1
	r_mgi[38][1][5] = 7
	r_mgi[38][1][6] = 5
	r_mgi[38][2][0] = 5
	r_mgi[38][2][1] = 8
	r_mgi[38][2][2] = 19
	r_mgi[38][2][3] = 10
	r_mgi[38][2][4] = 3
	r_mgi[38][2][5] = 4
	r_mgi[38][2][6] = 7
	r_mgi[39][0][0] = 5
	r_mgi[39][0][1] = 2
	r_mgi[39][0][2] = 2
	r_mgi[39][0][3] = 0
	r_mgi[39][0][4] = 2
	r_mgi[39][0][5] = 0
	r_mgi[39][0][6] = 2
	r_mgi[39][1][0] = 7
	r_mgi[39][1][1] = 7
	r_mgi[39][1][2] = 1
	r_mgi[39][1][3] = 0
	r_mgi[39][1][4] = 0
	r_mgi[39][1][5] = 2
	r_mgi[39][1][6] = 1
	r_mgi[39][2][0] = 8
	r_mgi[39][2][1] = 4
	r_mgi[39][2][2] = 18
	r_mgi[39][2][3] = 20
	r_mgi[39][2][4] = 1
	r_mgi[39][2][5] = 4
	r_mgi[39][2][6] = 14

	b_mg[0][0] = 49
	b_mg[0][1] = 36
	b_mg[0][2] = 15
	b_mg[1][0] = 60
	b_mg[1][1] = 25
	b_mg[1][2] = 15
	b_mg[2][0] = 57
	b_mg[2][1] = 22
	b_mg[2][2] = 21
	b_mg[3][0] = 62
	b_mg[3][1] = 19
	b_mg[3][2] = 19
	b_mg[4][0] = 59
	b_mg[4][1] = 26
	b_mg[4][2] = 15
	b_mg[5][0] = 63
	b_mg[5][1] = 25
	b_mg[5][2] = 12
	b_mg[6][0] = 76
	b_mg[6][1] = 13
	b_mg[6][2] = 11
	b_mg[7][0] = 64
	b_mg[7][1] = 21
	b_mg[7][2] = 15
	b_mg[8][0] = 56
	b_mg[8][1] = 29
	b_mg[8][2] = 15
	b_mg[9][0] = 38
	b_mg[9][1] = 50
	b_mg[9][2] = 12
	b_mg[10][0] = 20
	b_mg[10][1] = 69
	b_mg[10][2] = 11
	b_mg[11][0] = 4
	b_mg[11][1] = 82
	b_mg[11][2] = 14
	b_mg[12][0] = 16
	b_mg[12][1] = 76
	b_mg[12][2] = 8
	b_mg[13][0] = 9
	b_mg[13][1] = 82
	b_mg[13][2] = 9
	b_mg[14][0] = 13
	b_mg[14][1] = 75
	b_mg[14][2] = 12
	b_mg[15][0] = 15
	b_mg[15][1] = 65
	b_mg[15][2] = 20
	b_mg[16][0] = 16
	b_mg[16][1] = 75
	b_mg[16][2] = 9
	b_mg[17][0] = 14
	b_mg[17][1] = 73
	b_mg[17][2] = 13
	b_mg[18][0] = 16
	b_mg[18][1] = 73
	b_mg[18][2] = 11
	b_mg[19][0] = 11
	b_mg[19][1] = 74
	b_mg[19][2] = 15
	b_mg[20][0] = 15
	b_mg[20][1] = 69
	b_mg[20][2] = 16
	b_mg[21][0] = 10
	b_mg[21][1] = 79
	b_mg[21][2] = 11
	b_mg[22][0] = 14
	b_mg[22][1] = 68
	b_mg[22][2] = 18
	b_mg[23][0] = 12
	b_mg[23][1] = 76
	b_mg[23][2] = 12
	b_mg[24][0] = 13
	b_mg[24][1] = 64
	b_mg[24][2] = 23
	b_mg[25][0] = 12
	b_mg[25][1] = 70
	b_mg[25][2] = 18
	b_mg[26][0] = 13
	b_mg[26][1] = 72
	b_mg[26][2] = 15
	b_mg[27][0] = 9
	b_mg[27][1] = 84
	b_mg[27][2] = 7
	b_mg[28][0] = 13
	b_mg[28][1] = 45
	b_mg[28][2] = 42
	b_mg[29][0] = 8
	b_mg[29][1] = 16
	b_mg[29][2] = 76
	b_mg[30][0] = 19
	b_mg[30][1] = 28
	b_mg[30][2] = 53
	b_mg[31][0] = 13
	b_mg[31][1] = 21
	b_mg[31][2] = 66
	b_mg[32][0] = 7
	b_mg[32][1] = 26
	b_mg[32][2] = 67
	b_mg[33][0] = 11
	b_mg[33][1] = 26
	b_mg[33][2] = 63
	b_mg[34][0] = 6
	b_mg[34][1] = 26
	b_mg[34][2] = 68
	b_mg[35][0] = 9
	b_mg[35][1] = 25
	b_mg[35][2] = 66
	b_mg[36][0] = 17
	b_mg[36][1] = 22
	b_mg[36][2] = 61
	b_mg[37][0] = 14
	b_mg[37][1] = 17
	b_mg[37][2] = 69
	b_mg[38][0] = 17
	b_mg[38][1] = 27
	b_mg[38][2] = 56
	b_mg[39][0] = 13
	b_mg[39][1] = 18
	b_mg[39][2] = 69

	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg
# M = 40, G = 3, I = 7, J = 350
def force_instance15(printear_instancia = False):
	M = 40
	G = 3
	I = 7
	# J = 350
	r_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]
	b_mg = [[0 for g in range(G)] for m in range(M)]

	r_mgi[0][0][0] = 45
	r_mgi[0][0][1] = 61
	r_mgi[0][0][2] = 23
	r_mgi[0][0][3] = 19
	r_mgi[0][0][4] = 28
	r_mgi[0][0][5] = 18
	r_mgi[0][0][6] = 16
	r_mgi[0][1][0] = 26
	r_mgi[0][1][1] = 17
	r_mgi[0][1][2] = 8
	r_mgi[0][1][3] = 6
	r_mgi[0][1][4] = 4
	r_mgi[0][1][5] = 22
	r_mgi[0][1][6] = 6
	r_mgi[0][2][0] = 4
	r_mgi[0][2][1] = 7
	r_mgi[0][2][2] = 8
	r_mgi[0][2][3] = 13
	r_mgi[0][2][4] = 3
	r_mgi[0][2][5] = 3
	r_mgi[0][2][6] = 13
	r_mgi[1][0][0] = 46
	r_mgi[1][0][1] = 66
	r_mgi[1][0][2] = 17
	r_mgi[1][0][3] = 21
	r_mgi[1][0][4] = 14
	r_mgi[1][0][5] = 21
	r_mgi[1][0][6] = 22
	r_mgi[1][1][0] = 27
	r_mgi[1][1][1] = 19
	r_mgi[1][1][2] = 9
	r_mgi[1][1][3] = 4
	r_mgi[1][1][4] = 4
	r_mgi[1][1][5] = 17
	r_mgi[1][1][6] = 13
	r_mgi[1][2][0] = 9
	r_mgi[1][2][1] = 4
	r_mgi[1][2][2] = 10
	r_mgi[1][2][3] = 10
	r_mgi[1][2][4] = 2
	r_mgi[1][2][5] = 3
	r_mgi[1][2][6] = 12
	r_mgi[2][0][0] = 29
	r_mgi[2][0][1] = 69
	r_mgi[2][0][2] = 23
	r_mgi[2][0][3] = 24
	r_mgi[2][0][4] = 18
	r_mgi[2][0][5] = 29
	r_mgi[2][0][6] = 22
	r_mgi[2][1][0] = 26
	r_mgi[2][1][1] = 17
	r_mgi[2][1][2] = 7
	r_mgi[2][1][3] = 3
	r_mgi[2][1][4] = 4
	r_mgi[2][1][5] = 17
	r_mgi[2][1][6] = 10
	r_mgi[2][2][0] = 8
	r_mgi[2][2][1] = 5
	r_mgi[2][2][2] = 11
	r_mgi[2][2][3] = 15
	r_mgi[2][2][4] = 2
	r_mgi[2][2][5] = 3
	r_mgi[2][2][6] = 8
	r_mgi[3][0][0] = 24
	r_mgi[3][0][1] = 75
	r_mgi[3][0][2] = 19
	r_mgi[3][0][3] = 24
	r_mgi[3][0][4] = 18
	r_mgi[3][0][5] = 30
	r_mgi[3][0][6] = 21
	r_mgi[3][1][0] = 28
	r_mgi[3][1][1] = 19
	r_mgi[3][1][2] = 3
	r_mgi[3][1][3] = 5
	r_mgi[3][1][4] = 5
	r_mgi[3][1][5] = 22
	r_mgi[3][1][6] = 7
	r_mgi[3][2][0] = 3
	r_mgi[3][2][1] = 6
	r_mgi[3][2][2] = 9
	r_mgi[3][2][3] = 17
	r_mgi[3][2][4] = 3
	r_mgi[3][2][5] = 2
	r_mgi[3][2][6] = 10
	r_mgi[4][0][0] = 50
	r_mgi[4][0][1] = 65
	r_mgi[4][0][2] = 16
	r_mgi[4][0][3] = 17
	r_mgi[4][0][4] = 21
	r_mgi[4][0][5] = 26
	r_mgi[4][0][6] = 10
	r_mgi[4][1][0] = 28
	r_mgi[4][1][1] = 23
	r_mgi[4][1][2] = 10
	r_mgi[4][1][3] = 6
	r_mgi[4][1][4] = 2
	r_mgi[4][1][5] = 20
	r_mgi[4][1][6] = 9
	r_mgi[4][2][0] = 3
	r_mgi[4][2][1] = 4
	r_mgi[4][2][2] = 10
	r_mgi[4][2][3] = 16
	r_mgi[4][2][4] = 1
	r_mgi[4][2][5] = 1
	r_mgi[4][2][6] = 12
	r_mgi[5][0][0] = 47
	r_mgi[5][0][1] = 80
	r_mgi[5][0][2] = 19
	r_mgi[5][0][3] = 20
	r_mgi[5][0][4] = 19
	r_mgi[5][0][5] = 27
	r_mgi[5][0][6] = 21
	r_mgi[5][1][0] = 21
	r_mgi[5][1][1] = 16
	r_mgi[5][1][2] = 8
	r_mgi[5][1][3] = 4
	r_mgi[5][1][4] = 0
	r_mgi[5][1][5] = 13
	r_mgi[5][1][6] = 15
	r_mgi[5][2][0] = 7
	r_mgi[5][2][1] = 2
	r_mgi[5][2][2] = 6
	r_mgi[5][2][3] = 13
	r_mgi[5][2][4] = 4
	r_mgi[5][2][5] = 4
	r_mgi[5][2][6] = 4
	r_mgi[6][0][0] = 45
	r_mgi[6][0][1] = 74
	r_mgi[6][0][2] = 23
	r_mgi[6][0][3] = 17
	r_mgi[6][0][4] = 23
	r_mgi[6][0][5] = 25
	r_mgi[6][0][6] = 17
	r_mgi[6][1][0] = 36
	r_mgi[6][1][1] = 11
	r_mgi[6][1][2] = 8
	r_mgi[6][1][3] = 3
	r_mgi[6][1][4] = 4
	r_mgi[6][1][5] = 18
	r_mgi[6][1][6] = 9
	r_mgi[6][2][0] = 1
	r_mgi[6][2][1] = 3
	r_mgi[6][2][2] = 12
	r_mgi[6][2][3] = 11
	r_mgi[6][2][4] = 1
	r_mgi[6][2][5] = 3
	r_mgi[6][2][6] = 6
	r_mgi[7][0][0] = 49
	r_mgi[7][0][1] = 59
	r_mgi[7][0][2] = 20
	r_mgi[7][0][3] = 21
	r_mgi[7][0][4] = 25
	r_mgi[7][0][5] = 19
	r_mgi[7][0][6] = 27
	r_mgi[7][1][0] = 26
	r_mgi[7][1][1] = 20
	r_mgi[7][1][2] = 8
	r_mgi[7][1][3] = 3
	r_mgi[7][1][4] = 3
	r_mgi[7][1][5] = 13
	r_mgi[7][1][6] = 9
	r_mgi[7][2][0] = 5
	r_mgi[7][2][1] = 2
	r_mgi[7][2][2] = 11
	r_mgi[7][2][3] = 17
	r_mgi[7][2][4] = 2
	r_mgi[7][2][5] = 4
	r_mgi[7][2][6] = 7
	r_mgi[8][0][0] = 53
	r_mgi[8][0][1] = 68
	r_mgi[8][0][2] = 22
	r_mgi[8][0][3] = 22
	r_mgi[8][0][4] = 24
	r_mgi[8][0][5] = 20
	r_mgi[8][0][6] = 27
	r_mgi[8][1][0] = 18
	r_mgi[8][1][1] = 18
	r_mgi[8][1][2] = 7
	r_mgi[8][1][3] = 5
	r_mgi[8][1][4] = 0
	r_mgi[8][1][5] = 14
	r_mgi[8][1][6] = 8
	r_mgi[8][2][0] = 7
	r_mgi[8][2][1] = 4
	r_mgi[8][2][2] = 6
	r_mgi[8][2][3] = 15
	r_mgi[8][2][4] = 1
	r_mgi[8][2][5] = 3
	r_mgi[8][2][6] = 8
	r_mgi[9][0][0] = 26
	r_mgi[9][0][1] = 41
	r_mgi[9][0][2] = 17
	r_mgi[9][0][3] = 13
	r_mgi[9][0][4] = 19
	r_mgi[9][0][5] = 14
	r_mgi[9][0][6] = 22
	r_mgi[9][1][0] = 50
	r_mgi[9][1][1] = 22
	r_mgi[9][1][2] = 17
	r_mgi[9][1][3] = 8
	r_mgi[9][1][4] = 3
	r_mgi[9][1][5] = 29
	r_mgi[9][1][6] = 18
	r_mgi[9][2][0] = 5
	r_mgi[9][2][1] = 5
	r_mgi[9][2][2] = 12
	r_mgi[9][2][3] = 14
	r_mgi[9][2][4] = 2
	r_mgi[9][2][5] = 1
	r_mgi[9][2][6] = 12
	r_mgi[10][0][0] = 7
	r_mgi[10][0][1] = 15
	r_mgi[10][0][2] = 2
	r_mgi[10][0][3] = 4
	r_mgi[10][0][4] = 8
	r_mgi[10][0][5] = 1
	r_mgi[10][0][6] = 3
	r_mgi[10][1][0] = 72
	r_mgi[10][1][1] = 44
	r_mgi[10][1][2] = 20
	r_mgi[10][1][3] = 12
	r_mgi[10][1][4] = 11
	r_mgi[10][1][5] = 65
	r_mgi[10][1][6] = 31
	r_mgi[10][2][0] = 8
	r_mgi[10][2][1] = 2
	r_mgi[10][2][2] = 10
	r_mgi[10][2][3] = 24
	r_mgi[10][2][4] = 2
	r_mgi[10][2][5] = 2
	r_mgi[10][2][6] = 7
	r_mgi[11][0][0] = 3
	r_mgi[11][0][1] = 15
	r_mgi[11][0][2] = 10
	r_mgi[11][0][3] = 3
	r_mgi[11][0][4] = 2
	r_mgi[11][0][5] = 5
	r_mgi[11][0][6] = 6
	r_mgi[11][1][0] = 90
	r_mgi[11][1][1] = 44
	r_mgi[11][1][2] = 24
	r_mgi[11][1][3] = 10
	r_mgi[11][1][4] = 8
	r_mgi[11][1][5] = 38
	r_mgi[11][1][6] = 30
	r_mgi[11][2][0] = 7
	r_mgi[11][2][1] = 9
	r_mgi[11][2][2] = 6
	r_mgi[11][2][3] = 18
	r_mgi[11][2][4] = 4
	r_mgi[11][2][5] = 1
	r_mgi[11][2][6] = 17
	r_mgi[12][0][0] = 14
	r_mgi[12][0][1] = 7
	r_mgi[12][0][2] = 3
	r_mgi[12][0][3] = 2
	r_mgi[12][0][4] = 2
	r_mgi[12][0][5] = 4
	r_mgi[12][0][6] = 6
	r_mgi[12][1][0] = 79
	r_mgi[12][1][1] = 56
	r_mgi[12][1][2] = 15
	r_mgi[12][1][3] = 13
	r_mgi[12][1][4] = 15
	r_mgi[12][1][5] = 63
	r_mgi[12][1][6] = 25
	r_mgi[12][2][0] = 5
	r_mgi[12][2][1] = 3
	r_mgi[12][2][2] = 10
	r_mgi[12][2][3] = 9
	r_mgi[12][2][4] = 5
	r_mgi[12][2][5] = 0
	r_mgi[12][2][6] = 14
	r_mgi[13][0][0] = 5
	r_mgi[13][0][1] = 16
	r_mgi[13][0][2] = 1
	r_mgi[13][0][3] = 6
	r_mgi[13][0][4] = 8
	r_mgi[13][0][5] = 4
	r_mgi[13][0][6] = 2
	r_mgi[13][1][0] = 78
	r_mgi[13][1][1] = 50
	r_mgi[13][1][2] = 22
	r_mgi[13][1][3] = 19
	r_mgi[13][1][4] = 16
	r_mgi[13][1][5] = 46
	r_mgi[13][1][6] = 29
	r_mgi[13][2][0] = 2
	r_mgi[13][2][1] = 6
	r_mgi[13][2][2] = 5
	r_mgi[13][2][3] = 19
	r_mgi[13][2][4] = 0
	r_mgi[13][2][5] = 1
	r_mgi[13][2][6] = 15
	r_mgi[14][0][0] = 6
	r_mgi[14][0][1] = 17
	r_mgi[14][0][2] = 3
	r_mgi[14][0][3] = 4
	r_mgi[14][0][4] = 4
	r_mgi[14][0][5] = 3
	r_mgi[14][0][6] = 5
	r_mgi[14][1][0] = 78
	r_mgi[14][1][1] = 46
	r_mgi[14][1][2] = 33
	r_mgi[14][1][3] = 9
	r_mgi[14][1][4] = 7
	r_mgi[14][1][5] = 55
	r_mgi[14][1][6] = 26
	r_mgi[14][2][0] = 5
	r_mgi[14][2][1] = 8
	r_mgi[14][2][2] = 5
	r_mgi[14][2][3] = 22
	r_mgi[14][2][4] = 3
	r_mgi[14][2][5] = 4
	r_mgi[14][2][6] = 7
	r_mgi[15][0][0] = 8
	r_mgi[15][0][1] = 14
	r_mgi[15][0][2] = 3
	r_mgi[15][0][3] = 3
	r_mgi[15][0][4] = 3
	r_mgi[15][0][5] = 5
	r_mgi[15][0][6] = 3
	r_mgi[15][1][0] = 84
	r_mgi[15][1][1] = 60
	r_mgi[15][1][2] = 22
	r_mgi[15][1][3] = 13
	r_mgi[15][1][4] = 10
	r_mgi[15][1][5] = 51
	r_mgi[15][1][6] = 21
	r_mgi[15][2][0] = 4
	r_mgi[15][2][1] = 4
	r_mgi[15][2][2] = 14
	r_mgi[15][2][3] = 16
	r_mgi[15][2][4] = 3
	r_mgi[15][2][5] = 4
	r_mgi[15][2][6] = 5
	r_mgi[16][0][0] = 6
	r_mgi[16][0][1] = 9
	r_mgi[16][0][2] = 2
	r_mgi[16][0][3] = 3
	r_mgi[16][0][4] = 3
	r_mgi[16][0][5] = 3
	r_mgi[16][0][6] = 8
	r_mgi[16][1][0] = 71
	r_mgi[16][1][1] = 49
	r_mgi[16][1][2] = 30
	r_mgi[16][1][3] = 11
	r_mgi[16][1][4] = 12
	r_mgi[16][1][5] = 56
	r_mgi[16][1][6] = 32
	r_mgi[16][2][0] = 6
	r_mgi[16][2][1] = 4
	r_mgi[16][2][2] = 11
	r_mgi[16][2][3] = 18
	r_mgi[16][2][4] = 5
	r_mgi[16][2][5] = 2
	r_mgi[16][2][6] = 9
	r_mgi[17][0][0] = 6
	r_mgi[17][0][1] = 14
	r_mgi[17][0][2] = 5
	r_mgi[17][0][3] = 2
	r_mgi[17][0][4] = 5
	r_mgi[17][0][5] = 3
	r_mgi[17][0][6] = 4
	r_mgi[17][1][0] = 89
	r_mgi[17][1][1] = 52
	r_mgi[17][1][2] = 29
	r_mgi[17][1][3] = 16
	r_mgi[17][1][4] = 15
	r_mgi[17][1][5] = 55
	r_mgi[17][1][6] = 22
	r_mgi[17][2][0] = 3
	r_mgi[17][2][1] = 5
	r_mgi[17][2][2] = 7
	r_mgi[17][2][3] = 4
	r_mgi[17][2][4] = 1
	r_mgi[17][2][5] = 2
	r_mgi[17][2][6] = 11
	r_mgi[18][0][0] = 13
	r_mgi[18][0][1] = 12
	r_mgi[18][0][2] = 3
	r_mgi[18][0][3] = 3
	r_mgi[18][0][4] = 3
	r_mgi[18][0][5] = 5
	r_mgi[18][0][6] = 5
	r_mgi[18][1][0] = 69
	r_mgi[18][1][1] = 41
	r_mgi[18][1][2] = 34
	r_mgi[18][1][3] = 11
	r_mgi[18][1][4] = 18
	r_mgi[18][1][5] = 55
	r_mgi[18][1][6] = 18
	r_mgi[18][2][0] = 7
	r_mgi[18][2][1] = 6
	r_mgi[18][2][2] = 11
	r_mgi[18][2][3] = 13
	r_mgi[18][2][4] = 1
	r_mgi[18][2][5] = 4
	r_mgi[18][2][6] = 18
	r_mgi[19][0][0] = 10
	r_mgi[19][0][1] = 8
	r_mgi[19][0][2] = 2
	r_mgi[19][0][3] = 3
	r_mgi[19][0][4] = 1
	r_mgi[19][0][5] = 2
	r_mgi[19][0][6] = 4
	r_mgi[19][1][0] = 78
	r_mgi[19][1][1] = 46
	r_mgi[19][1][2] = 36
	r_mgi[19][1][3] = 16
	r_mgi[19][1][4] = 11
	r_mgi[19][1][5] = 45
	r_mgi[19][1][6] = 34
	r_mgi[19][2][0] = 11
	r_mgi[19][2][1] = 4
	r_mgi[19][2][2] = 11
	r_mgi[19][2][3] = 13
	r_mgi[19][2][4] = 1
	r_mgi[19][2][5] = 1
	r_mgi[19][2][6] = 13
	r_mgi[20][0][0] = 4
	r_mgi[20][0][1] = 8
	r_mgi[20][0][2] = 3
	r_mgi[20][0][3] = 2
	r_mgi[20][0][4] = 7
	r_mgi[20][0][5] = 1
	r_mgi[20][0][6] = 4
	r_mgi[20][1][0] = 69
	r_mgi[20][1][1] = 56
	r_mgi[20][1][2] = 29
	r_mgi[20][1][3] = 10
	r_mgi[20][1][4] = 6
	r_mgi[20][1][5] = 45
	r_mgi[20][1][6] = 31
	r_mgi[20][2][0] = 10
	r_mgi[20][2][1] = 6
	r_mgi[20][2][2] = 15
	r_mgi[20][2][3] = 18
	r_mgi[20][2][4] = 2
	r_mgi[20][2][5] = 7
	r_mgi[20][2][6] = 17
	r_mgi[21][0][0] = 9
	r_mgi[21][0][1] = 16
	r_mgi[21][0][2] = 8
	r_mgi[21][0][3] = 3
	r_mgi[21][0][4] = 1
	r_mgi[21][0][5] = 3
	r_mgi[21][0][6] = 9
	r_mgi[21][1][0] = 84
	r_mgi[21][1][1] = 55
	r_mgi[21][1][2] = 19
	r_mgi[21][1][3] = 13
	r_mgi[21][1][4] = 10
	r_mgi[21][1][5] = 48
	r_mgi[21][1][6] = 28
	r_mgi[21][2][0] = 4
	r_mgi[21][2][1] = 3
	r_mgi[21][2][2] = 18
	r_mgi[21][2][3] = 6
	r_mgi[21][2][4] = 3
	r_mgi[21][2][5] = 0
	r_mgi[21][2][6] = 10
	r_mgi[22][0][0] = 11
	r_mgi[22][0][1] = 10
	r_mgi[22][0][2] = 2
	r_mgi[22][0][3] = 6
	r_mgi[22][0][4] = 6
	r_mgi[22][0][5] = 5
	r_mgi[22][0][6] = 4
	r_mgi[22][1][0] = 74
	r_mgi[22][1][1] = 58
	r_mgi[22][1][2] = 28
	r_mgi[22][1][3] = 8
	r_mgi[22][1][4] = 13
	r_mgi[22][1][5] = 39
	r_mgi[22][1][6] = 34
	r_mgi[22][2][0] = 8
	r_mgi[22][2][1] = 3
	r_mgi[22][2][2] = 1
	r_mgi[22][2][3] = 26
	r_mgi[22][2][4] = 4
	r_mgi[22][2][5] = 4
	r_mgi[22][2][6] = 6
	r_mgi[23][0][0] = 8
	r_mgi[23][0][1] = 15
	r_mgi[23][0][2] = 3
	r_mgi[23][0][3] = 4
	r_mgi[23][0][4] = 7
	r_mgi[23][0][5] = 2
	r_mgi[23][0][6] = 5
	r_mgi[23][1][0] = 60
	r_mgi[23][1][1] = 61
	r_mgi[23][1][2] = 33
	r_mgi[23][1][3] = 12
	r_mgi[23][1][4] = 15
	r_mgi[23][1][5] = 43
	r_mgi[23][1][6] = 28
	r_mgi[23][2][0] = 9
	r_mgi[23][2][1] = 4
	r_mgi[23][2][2] = 9
	r_mgi[23][2][3] = 17
	r_mgi[23][2][4] = 2
	r_mgi[23][2][5] = 5
	r_mgi[23][2][6] = 8
	r_mgi[24][0][0] = 9
	r_mgi[24][0][1] = 15
	r_mgi[24][0][2] = 6
	r_mgi[24][0][3] = 4
	r_mgi[24][0][4] = 10
	r_mgi[24][0][5] = 1
	r_mgi[24][0][6] = 5
	r_mgi[24][1][0] = 79
	r_mgi[24][1][1] = 51
	r_mgi[24][1][2] = 29
	r_mgi[24][1][3] = 13
	r_mgi[24][1][4] = 7
	r_mgi[24][1][5] = 44
	r_mgi[24][1][6] = 36
	r_mgi[24][2][0] = 5
	r_mgi[24][2][1] = 1
	r_mgi[24][2][2] = 10
	r_mgi[24][2][3] = 12
	r_mgi[24][2][4] = 1
	r_mgi[24][2][5] = 3
	r_mgi[24][2][6] = 9
	r_mgi[25][0][0] = 11
	r_mgi[25][0][1] = 14
	r_mgi[25][0][2] = 3
	r_mgi[25][0][3] = 5
	r_mgi[25][0][4] = 4
	r_mgi[25][0][5] = 5
	r_mgi[25][0][6] = 4
	r_mgi[25][1][0] = 75
	r_mgi[25][1][1] = 49
	r_mgi[25][1][2] = 27
	r_mgi[25][1][3] = 17
	r_mgi[25][1][4] = 13
	r_mgi[25][1][5] = 53
	r_mgi[25][1][6] = 21
	r_mgi[25][2][0] = 5
	r_mgi[25][2][1] = 6
	r_mgi[25][2][2] = 6
	r_mgi[25][2][3] = 19
	r_mgi[25][2][4] = 1
	r_mgi[25][2][5] = 2
	r_mgi[25][2][6] = 10
	r_mgi[26][0][0] = 6
	r_mgi[26][0][1] = 9
	r_mgi[26][0][2] = 4
	r_mgi[26][0][3] = 1
	r_mgi[26][0][4] = 6
	r_mgi[26][0][5] = 4
	r_mgi[26][0][6] = 4
	r_mgi[26][1][0] = 62
	r_mgi[26][1][1] = 55
	r_mgi[26][1][2] = 32
	r_mgi[26][1][3] = 13
	r_mgi[26][1][4] = 13
	r_mgi[26][1][5] = 57
	r_mgi[26][1][6] = 25
	r_mgi[26][2][0] = 4
	r_mgi[26][2][1] = 11
	r_mgi[26][2][2] = 10
	r_mgi[26][2][3] = 20
	r_mgi[26][2][4] = 3
	r_mgi[26][2][5] = 4
	r_mgi[26][2][6] = 7
	r_mgi[27][0][0] = 12
	r_mgi[27][0][1] = 18
	r_mgi[27][0][2] = 4
	r_mgi[27][0][3] = 4
	r_mgi[27][0][4] = 3
	r_mgi[27][0][5] = 3
	r_mgi[27][0][6] = 2
	r_mgi[27][1][0] = 69
	r_mgi[27][1][1] = 57
	r_mgi[27][1][2] = 24
	r_mgi[27][1][3] = 11
	r_mgi[27][1][4] = 11
	r_mgi[27][1][5] = 54
	r_mgi[27][1][6] = 20
	r_mgi[27][2][0] = 6
	r_mgi[27][2][1] = 5
	r_mgi[27][2][2] = 13
	r_mgi[27][2][3] = 17
	r_mgi[27][2][4] = 0
	r_mgi[27][2][5] = 1
	r_mgi[27][2][6] = 16
	r_mgi[28][0][0] = 9
	r_mgi[28][0][1] = 13
	r_mgi[28][0][2] = 7
	r_mgi[28][0][3] = 5
	r_mgi[28][0][4] = 2
	r_mgi[28][0][5] = 3
	r_mgi[28][0][6] = 2
	r_mgi[28][1][0] = 40
	r_mgi[28][1][1] = 42
	r_mgi[28][1][2] = 18
	r_mgi[28][1][3] = 6
	r_mgi[28][1][4] = 8
	r_mgi[28][1][5] = 27
	r_mgi[28][1][6] = 23
	r_mgi[28][2][0] = 8
	r_mgi[28][2][1] = 11
	r_mgi[28][2][2] = 30
	r_mgi[28][2][3] = 37
	r_mgi[28][2][4] = 11
	r_mgi[28][2][5] = 11
	r_mgi[28][2][6] = 37
	r_mgi[29][0][0] = 8
	r_mgi[29][0][1] = 12
	r_mgi[29][0][2] = 5
	r_mgi[29][0][3] = 4
	r_mgi[29][0][4] = 6
	r_mgi[29][0][5] = 10
	r_mgi[29][0][6] = 3
	r_mgi[29][1][0] = 27
	r_mgi[29][1][1] = 20
	r_mgi[29][1][2] = 8
	r_mgi[29][1][3] = 10
	r_mgi[29][1][4] = 4
	r_mgi[29][1][5] = 17
	r_mgi[29][1][6] = 5
	r_mgi[29][2][0] = 16
	r_mgi[29][2][1] = 29
	r_mgi[29][2][2] = 51
	r_mgi[29][2][3] = 55
	r_mgi[29][2][4] = 12
	r_mgi[29][2][5] = 13
	r_mgi[29][2][6] = 35
	r_mgi[30][0][0] = 7
	r_mgi[30][0][1] = 10
	r_mgi[30][0][2] = 3
	r_mgi[30][0][3] = 2
	r_mgi[30][0][4] = 3
	r_mgi[30][0][5] = 8
	r_mgi[30][0][6] = 3
	r_mgi[30][1][0] = 32
	r_mgi[30][1][1] = 15
	r_mgi[30][1][2] = 7
	r_mgi[30][1][3] = 6
	r_mgi[30][1][4] = 6
	r_mgi[30][1][5] = 17
	r_mgi[30][1][6] = 12
	r_mgi[30][2][0] = 18
	r_mgi[30][2][1] = 32
	r_mgi[30][2][2] = 42
	r_mgi[30][2][3] = 65
	r_mgi[30][2][4] = 15
	r_mgi[30][2][5] = 9
	r_mgi[30][2][6] = 38
	r_mgi[31][0][0] = 11
	r_mgi[31][0][1] = 18
	r_mgi[31][0][2] = 9
	r_mgi[31][0][3] = 5
	r_mgi[31][0][4] = 8
	r_mgi[31][0][5] = 5
	r_mgi[31][0][6] = 6
	r_mgi[31][1][0] = 27
	r_mgi[31][1][1] = 10
	r_mgi[31][1][2] = 8
	r_mgi[31][1][3] = 4
	r_mgi[31][1][4] = 3
	r_mgi[31][1][5] = 13
	r_mgi[31][1][6] = 13
	r_mgi[31][2][0] = 27
	r_mgi[31][2][1] = 20
	r_mgi[31][2][2] = 41
	r_mgi[31][2][3] = 62
	r_mgi[31][2][4] = 9
	r_mgi[31][2][5] = 12
	r_mgi[31][2][6] = 39
	r_mgi[32][0][0] = 8
	r_mgi[32][0][1] = 16
	r_mgi[32][0][2] = 8
	r_mgi[32][0][3] = 1
	r_mgi[32][0][4] = 3
	r_mgi[32][0][5] = 4
	r_mgi[32][0][6] = 1
	r_mgi[32][1][0] = 31
	r_mgi[32][1][1] = 12
	r_mgi[32][1][2] = 9
	r_mgi[32][1][3] = 0
	r_mgi[32][1][4] = 6
	r_mgi[32][1][5] = 18
	r_mgi[32][1][6] = 4
	r_mgi[32][2][0] = 26
	r_mgi[32][2][1] = 35
	r_mgi[32][2][2] = 37
	r_mgi[32][2][3] = 64
	r_mgi[32][2][4] = 15
	r_mgi[32][2][5] = 11
	r_mgi[32][2][6] = 41
	r_mgi[33][0][0] = 4
	r_mgi[33][0][1] = 14
	r_mgi[33][0][2] = 3
	r_mgi[33][0][3] = 1
	r_mgi[33][0][4] = 6
	r_mgi[33][0][5] = 7
	r_mgi[33][0][6] = 4
	r_mgi[33][1][0] = 31
	r_mgi[33][1][1] = 12
	r_mgi[33][1][2] = 10
	r_mgi[33][1][3] = 6
	r_mgi[33][1][4] = 3
	r_mgi[33][1][5] = 13
	r_mgi[33][1][6] = 14
	r_mgi[33][2][0] = 19
	r_mgi[33][2][1] = 16
	r_mgi[33][2][2] = 49
	r_mgi[33][2][3] = 72
	r_mgi[33][2][4] = 9
	r_mgi[33][2][5] = 11
	r_mgi[33][2][6] = 46
	r_mgi[34][0][0] = 9
	r_mgi[34][0][1] = 10
	r_mgi[34][0][2] = 3
	r_mgi[34][0][3] = 4
	r_mgi[34][0][4] = 4
	r_mgi[34][0][5] = 3
	r_mgi[34][0][6] = 2
	r_mgi[34][1][0] = 23
	r_mgi[34][1][1] = 15
	r_mgi[34][1][2] = 7
	r_mgi[34][1][3] = 3
	r_mgi[34][1][4] = 1
	r_mgi[34][1][5] = 9
	r_mgi[34][1][6] = 3
	r_mgi[34][2][0] = 23
	r_mgi[34][2][1] = 27
	r_mgi[34][2][2] = 51
	r_mgi[34][2][3] = 70
	r_mgi[34][2][4] = 14
	r_mgi[34][2][5] = 17
	r_mgi[34][2][6] = 52
	r_mgi[35][0][0] = 8
	r_mgi[35][0][1] = 14
	r_mgi[35][0][2] = 5
	r_mgi[35][0][3] = 8
	r_mgi[35][0][4] = 4
	r_mgi[35][0][5] = 3
	r_mgi[35][0][6] = 2
	r_mgi[35][1][0] = 20
	r_mgi[35][1][1] = 22
	r_mgi[35][1][2] = 6
	r_mgi[35][1][3] = 5
	r_mgi[35][1][4] = 7
	r_mgi[35][1][5] = 16
	r_mgi[35][1][6] = 5
	r_mgi[35][2][0] = 19
	r_mgi[35][2][1] = 28
	r_mgi[35][2][2] = 53
	r_mgi[35][2][3] = 66
	r_mgi[35][2][4] = 17
	r_mgi[35][2][5] = 11
	r_mgi[35][2][6] = 31
	r_mgi[36][0][0] = 11
	r_mgi[36][0][1] = 10
	r_mgi[36][0][2] = 1
	r_mgi[36][0][3] = 1
	r_mgi[36][0][4] = 4
	r_mgi[36][0][5] = 8
	r_mgi[36][0][6] = 3
	r_mgi[36][1][0] = 32
	r_mgi[36][1][1] = 18
	r_mgi[36][1][2] = 4
	r_mgi[36][1][3] = 3
	r_mgi[36][1][4] = 3
	r_mgi[36][1][5] = 18
	r_mgi[36][1][6] = 6
	r_mgi[36][2][0] = 25
	r_mgi[36][2][1] = 22
	r_mgi[36][2][2] = 51
	r_mgi[36][2][3] = 70
	r_mgi[36][2][4] = 9
	r_mgi[36][2][5] = 11
	r_mgi[36][2][6] = 40
	r_mgi[37][0][0] = 3
	r_mgi[37][0][1] = 16
	r_mgi[37][0][2] = 7
	r_mgi[37][0][3] = 3
	r_mgi[37][0][4] = 2
	r_mgi[37][0][5] = 7
	r_mgi[37][0][6] = 1
	r_mgi[37][1][0] = 24
	r_mgi[37][1][1] = 19
	r_mgi[37][1][2] = 9
	r_mgi[37][1][3] = 4
	r_mgi[37][1][4] = 2
	r_mgi[37][1][5] = 13
	r_mgi[37][1][6] = 13
	r_mgi[37][2][0] = 16
	r_mgi[37][2][1] = 23
	r_mgi[37][2][2] = 49
	r_mgi[37][2][3] = 77
	r_mgi[37][2][4] = 6
	r_mgi[37][2][5] = 9
	r_mgi[37][2][6] = 47
	r_mgi[38][0][0] = 13
	r_mgi[38][0][1] = 19
	r_mgi[38][0][2] = 2
	r_mgi[38][0][3] = 4
	r_mgi[38][0][4] = 1
	r_mgi[38][0][5] = 5
	r_mgi[38][0][6] = 4
	r_mgi[38][1][0] = 23
	r_mgi[38][1][1] = 21
	r_mgi[38][1][2] = 6
	r_mgi[38][1][3] = 7
	r_mgi[38][1][4] = 3
	r_mgi[38][1][5] = 15
	r_mgi[38][1][6] = 6
	r_mgi[38][2][0] = 24
	r_mgi[38][2][1] = 19
	r_mgi[38][2][2] = 47
	r_mgi[38][2][3] = 78
	r_mgi[38][2][4] = 11
	r_mgi[38][2][5] = 8
	r_mgi[38][2][6] = 34
	r_mgi[39][0][0] = 10
	r_mgi[39][0][1] = 15
	r_mgi[39][0][2] = 9
	r_mgi[39][0][3] = 4
	r_mgi[39][0][4] = 2
	r_mgi[39][0][5] = 1
	r_mgi[39][0][6] = 7
	r_mgi[39][1][0] = 24
	r_mgi[39][1][1] = 18
	r_mgi[39][1][2] = 9
	r_mgi[39][1][3] = 7
	r_mgi[39][1][4] = 6
	r_mgi[39][1][5] = 21
	r_mgi[39][1][6] = 5
	r_mgi[39][2][0] = 29
	r_mgi[39][2][1] = 20
	r_mgi[39][2][2] = 36
	r_mgi[39][2][3] = 61
	r_mgi[39][2][4] = 14
	r_mgi[39][2][5] = 11
	r_mgi[39][2][6] = 41

	b_mg[0][0] = 210
	b_mg[0][1] = 89
	b_mg[0][2] = 51
	b_mg[1][0] = 207
	b_mg[1][1] = 93
	b_mg[1][2] = 50
	b_mg[2][0] = 214
	b_mg[2][1] = 84
	b_mg[2][2] = 52
	b_mg[3][0] = 211
	b_mg[3][1] = 89
	b_mg[3][2] = 50
	b_mg[4][0] = 205
	b_mg[4][1] = 98
	b_mg[4][2] = 47
	b_mg[5][0] = 233
	b_mg[5][1] = 77
	b_mg[5][2] = 40
	b_mg[6][0] = 224
	b_mg[6][1] = 89
	b_mg[6][2] = 37
	b_mg[7][0] = 220
	b_mg[7][1] = 82
	b_mg[7][2] = 48
	b_mg[8][0] = 236
	b_mg[8][1] = 70
	b_mg[8][2] = 44
	b_mg[9][0] = 152
	b_mg[9][1] = 147
	b_mg[9][2] = 51
	b_mg[10][0] = 40
	b_mg[10][1] = 255
	b_mg[10][2] = 55
	b_mg[11][0] = 44
	b_mg[11][1] = 244
	b_mg[11][2] = 62
	b_mg[12][0] = 38
	b_mg[12][1] = 266
	b_mg[12][2] = 46
	b_mg[13][0] = 42
	b_mg[13][1] = 260
	b_mg[13][2] = 48
	b_mg[14][0] = 42
	b_mg[14][1] = 254
	b_mg[14][2] = 54
	b_mg[15][0] = 39
	b_mg[15][1] = 261
	b_mg[15][2] = 50
	b_mg[16][0] = 34
	b_mg[16][1] = 261
	b_mg[16][2] = 55
	b_mg[17][0] = 39
	b_mg[17][1] = 278
	b_mg[17][2] = 33
	b_mg[18][0] = 44
	b_mg[18][1] = 246
	b_mg[18][2] = 60
	b_mg[19][0] = 30
	b_mg[19][1] = 266
	b_mg[19][2] = 54
	b_mg[20][0] = 29
	b_mg[20][1] = 246
	b_mg[20][2] = 75
	b_mg[21][0] = 49
	b_mg[21][1] = 257
	b_mg[21][2] = 44
	b_mg[22][0] = 44
	b_mg[22][1] = 254
	b_mg[22][2] = 52
	b_mg[23][0] = 44
	b_mg[23][1] = 252
	b_mg[23][2] = 54
	b_mg[24][0] = 50
	b_mg[24][1] = 259
	b_mg[24][2] = 41
	b_mg[25][0] = 46
	b_mg[25][1] = 255
	b_mg[25][2] = 49
	b_mg[26][0] = 34
	b_mg[26][1] = 257
	b_mg[26][2] = 59
	b_mg[27][0] = 46
	b_mg[27][1] = 246
	b_mg[27][2] = 58
	b_mg[28][0] = 41
	b_mg[28][1] = 164
	b_mg[28][2] = 145
	b_mg[29][0] = 48
	b_mg[29][1] = 91
	b_mg[29][2] = 211
	b_mg[30][0] = 36
	b_mg[30][1] = 95
	b_mg[30][2] = 219
	b_mg[31][0] = 62
	b_mg[31][1] = 78
	b_mg[31][2] = 210
	b_mg[32][0] = 41
	b_mg[32][1] = 80
	b_mg[32][2] = 229
	b_mg[33][0] = 39
	b_mg[33][1] = 89
	b_mg[33][2] = 222
	b_mg[34][0] = 35
	b_mg[34][1] = 61
	b_mg[34][2] = 254
	b_mg[35][0] = 44
	b_mg[35][1] = 81
	b_mg[35][2] = 225
	b_mg[36][0] = 38
	b_mg[36][1] = 84
	b_mg[36][2] = 228
	b_mg[37][0] = 39
	b_mg[37][1] = 84
	b_mg[37][2] = 227
	b_mg[38][0] = 48
	b_mg[38][1] = 81
	b_mg[38][2] = 221
	b_mg[39][0] = 48
	b_mg[39][1] = 90
	b_mg[39][2] = 212

	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi)
	return r_mgi, n_mi, b_mg

# printea la instancia
def print_instance(r_mgi, b_mg, n_mi, lambda_ = None):
	M = len(n_mi)
	I = len(n_mi[0])
	G = len(b_mg[0])
	J = int(sum([n_mi[m][i] for i in range(I) for m in range(M)]) / M)
	print("M = "+str(M))
	print("I = "+str(I))
	print("G = "+str(G))
	print("J = "+str(J))
	if not lambda_ is None:
		print("lambda = "+str(lambda_))
	print_list_3D(r_mgi, "r_mgi", "m")
	print_list_2D(n_mi, "n_mi", fila = True)
	print_list_2D(b_mg, "b_mg", fila = True)
# printea r y b para poder copiar y pegarlo en julia
def print_r_mgi_b_gi(r_mgi, b_mg, lenguaje = "julia"):
	M = len(r_mgi)
	G = len(r_mgi[0])
	I = len(r_mgi[0][0])
	J = int(sum([r_mgi[m][g][i] for i in range(I) for m in range(M) for g in range(G)]) / M)
	print(f"\n\n# M = {M}, G = {G}, I = {I}, J = {J}")
	print("def force_instance(printear_instancia = False):")
	print("\tM = "+str(M))
	print("\tG = "+str(G))
	print("\tI = "+str(I))
	print("\t# J = "+str(J))
	print("\tr_mgi = [[[0 for i in range(I)] for g in range(G)] for m in range(M)]")
	print("\tb_mg = [[0 for g in range(G)] for m in range(M)]\n")
	for m in range(0, M):
		for g in range(0, G):
			for i in range(0, I):
				if lenguaje == "julia":
					print("\t\tr_mgi["+str(m+1)+","+str(g+1)+","+str(i+1)+"] = "+str(r_mgi[m][g][i]))
				else:
					print("\tr_mgi["+str(m)+"]["+str(g)+"]["+str(i)+"] = "+str(r_mgi[m][g][i]))
	print("")
	for m in range(0, M):
		for g in range(0, G):
			if lenguaje == "julia":
				print("\t\tb_mg["+str(m+1)+","+str(g+1)+"] = "+str(b_mg[m][g]))
			else:
				print("\tb_mg["+str(m)+"]["+str(g)+"] = "+str(b_mg[m][g]))
	print("\n\tn_mi = n_mi_from_r_mgi(r_mgi)")
	print("\tif printear_instancia:")
	print("\t\tprint_instance(r_mgi, b_mg, n_mi)")
	print("\treturn r_mgi, n_mi, b_mg\n")
	
# printea lista de 3 dimensiones
def print_list_3D(x, nombre, indice):
	# x : lista de 3 dimensiones
	# nombre : nombre del x en la realidad
	# indice : letra que se usa para el indice de la primera dimension
	print(nombre+" = ")
	for m in range(0, len(x)):
		print("m = "+str(m))
		print(np.matrix(x[m]))
# printea lista de 2 dimensiones
def print_list_2D(x, nombre, fila = False, transpose = False):
	# x : lista de 2 dimensiones
	# nombre : nombre del x en la realidad
	print(nombre+" = ")
	y = []
	if not transpose:
		y = [[x[i][j] for j in range(len(x[0]))] for i in range(len(x))]
	else:
		y = [[x[j][i] for j in range(len(x))] for i in range(len(x[0]))]
	for j in range(len(y)):
		s = ""
		if fila:
			s += str(j)+":"
		for i in range(len(y[0])):
			s += "\t"+str(y[j][i])
		print(s)
	#print(np.matrix(x))
# printea lista de 1 dimensiones
def print_list_1D(x, nombre):
	# x : lista de 1 dimensiones
	# nombre : nombre del x en la realidad
	print(nombre+" = ")
	print(["{0:0.2f}".format(i) for i in x])
# funcion que dada los votacion de la votacion en r_mgi, computa los votos agregados por mesa y candidato: n_mi
def n_mi_from_r_mgi(r_mgi):
	M = len(r_mgi)
	G = len(r_mgi[0])
	I = len(r_mgi[0][0])
	n_mi = [[sum([r_mgi[m][g][i] for g in range(0, G)]) for i in range(0, I)] for m in range(0, M)]
	return n_mi
# funcion que dada los votacion de la votacion en r_gi de una mesa, computa los votos agregados por candidato: n_i
def n_i_from_r_gi(r_gi):
	G = len(r_gi)
	I = len(r_gi[0])
	n_i = [sum([r_gi[g][i] for g in range(0, G)]) for i in range(0, I)]
	return n_i
# funcion que genera datos de la votacion
def gen_data(M, J, p_gi, lambda_ = 0.0, printear_instancia = False):
	# M: numero de mesas
	# I: numero d candidatos, incluye la abstencion como si fuese u candidato
	# G: numero de grupos
	# J: numero de personas por mesa
	# lambda: 0.0 si se fija la poblacion a las mesas en orden de los grupos
	#		  1.0 si se aleatoriza a toda la poblacion en su asignacion a las mesas
	#         lambda representa el porcentaje de gente que se aleatoriza para su
	#		  posterior asignacion a las mesas
	print("\n############ GENERATING DATA ############")
	#p_gi = [[0.2, 0.3, 0.1, 0.4], [0.3, 0.2, 0.1, 0.4], [0.1, 0.1, 0.2, 0.6]]
	#p_gi = [[0.2, 0.8], [0.3, 0.7], [0.6, 0.4]]
	#p_gi = [[0.6, 0.4], [0.2, 0.8], [0.3, 0.7], [0.3, 0.7]]
	#p_gi = [[0.8, 0.2], [0.4, 0.6]]
	G = len(p_gi)
	I = len(p_gi[0])
	#lambda_ = 0.0	
	#J = 10
	#M = 4
	N = M * J # poblacion total
	npr.seed(123)
	G_fractions = npr.dirichlet([10.0]*G, size=None) # fraccion de cada grupo de la poblaci√≥n de la circunscripci√≥n
	# repartir los individuos seg√∫n tipo en las mesas
	G_population = np.repeat(0, N)
	k = 1
	for i in range(0, N):
		G_population[i] = k
		if i / N > sum(G_fractions[0:k]):
			k += 1
	npr.seed(123)
	indices_aleatorizar = random.sample(range(N), round(lambda_ * N))
	valores_aleatorizar = G_population[indices_aleatorizar]
	npr.seed(123)
	indices_aleatorizar.sort()
	for k in range(len(valores_aleatorizar)):
		G_population[indices_aleatorizar[k]] = valores_aleatorizar[k]
	G_population_2 = G_population.reshape(M, J)
	# numero de peresonas de cada tipo en cada mesa
	b_mg = [[sum(G_population_2[m] == g + 1) for g in range(0, G)] for m in range(0, M)]
	# resultados de todas las mesas
	r_mgi = [[npr.multinomial(b_mg[m][g], p_gi[g]).tolist() for g in range(0, G)] for m in range(0, M)]
	# numero de votos de cada candidato por mesa
	n_mi = n_mi_from_r_mgi(r_mgi)
	if printear_instancia:
		print_instance(r_mgi, b_mg, n_mi, lambda_)
	return r_mgi, n_mi, b_mg
# funcion que altera los rsultados de la eleccion (esta es la parte fraudulenta)
def edit_election(r_mgi, m_edit = 1, printear = True):
	# r_mgi : posee la informaci√≥n de votos por mesa, grupo, y candidato
	# m_edit : n√∫mero de mesas al azar a editar
	# printear : true si es que se printean las mesas que se editan
	print("\n############ EDITING ELECTION ############")
	# funcion que edita votos de una mesa
	def edit_single_table(r_gi, i_o = None, i_d = None, transfer = None, f = None, printear = False):
		# r_gi : resultados de los votos de una mesa en particular, por grupo y por candidato
		# i_o : candidato al cual se sacan votos
		# 		si se omite, se toma un candidato al azar
		# i_d : candidato al cual se agregan votos
		# 		si se omite, se toma un candidato al azar
		# transfer : cantidad de votos a transferir
		# 			 en caso de omitir se toma una VA uniforme discreta entre0 y el maximo a sacar
		# f : grupos especifico desde el cual se transfieren los votos
		#     en caso de omitir, se sacan votos de todos los grupos (del candidato i_o) al azar
		# funcion que samplea de una geometrica mutivariada
		def hypergeometric_multi(a, n):
			# a : vector donde cada componente tiene el numero de casos de cada grupo
			# n : numero de elementos a samplear del total de la suma de valores de a
			b = random.sample(range(sum(a)), n)
			b.sort()
			out = [0 for g in range(len(a))]
			i1 = 0
			for g in range(len(a)):
				i2 = sum(a[0:(g+1)])
				for i in range(i1, i2):
					if i in b:
						out[g] = out[g] + 1
				i1 = i2
			return out
		I = len(r_gi[0])
		n_i = n_i_from_r_gi(r_gi)
		# validar valores de input
		if not i_o is None and i_o < 0:
			raise ValueError("edit_single_table: El valor del parametro i_o ("+str(i_o)+") es menor a 0.")
		elif not i_o is None and i_o >= G:
			raise ValueError("edit_single_table: El valor del parametro i_o ("+str(i_o)+") es mayor o igual a G ("+str(G)+").")
		elif not i_d is None and i_d < 0:
			raise ValueError("edit_single_table: El valor del parametro i_d ("+str(i_d)+") es menor a 0.")
		elif not i_d is None and i_d >= G:
			raise ValueError("edit_single_table: El valor del parametro i_d ("+str(i_d)+") es mayor o igual a G ("+str(G)+").")
		#elif not transfer is None and transfer < 0:
		#	raise ValueError("edit_single_table: El valor del parametro transfer ("+str(stransfer)+") es menor a 0.")
		# samplear valores que se entregeun en los inputs
		if i_o is None and i_d is None:
			i_o, i_d = random.sample(range(I), 2)
		elif i_o is None:
			i_o = random.sample([i for i in range(I) if i != i_d], 1)[0]
		elif i_d is None:
			i_d = random.sample([i for i in range(I) if i != i_o], 1)[0]
		if transfer is None and f is None:
			transfer = random.sample(range(n_i[i_o] + 1), 1)[0]
		elif transfer is None and not f is None:
			transfer = random.sample(range(r_gi[f][i_o]), 1)[0]
		elif not transfer is None and f is None:
			transfer = min(transfer, n_i[i_o])
		else:
			transfer = min(transfer, r_gi[f][i_o])
		#if printear:
		#	print("i_o = "+str(i_o))
		#	print("i_d = "+str(i_d))
		#	print("transfer = "+str(transfer))
		#	print("f = "+str(f))
		# hacer la transferencia de votos del candidato m_o a la mesa m_o
		if f is None:
			a = [r_gi[g][i_o] for g in range(G)]
			transfer_g = hypergeometric_multi(a, transfer)
			for g in range(G):
				r_gi[g][i_o] = r_gi[g][i_o] - transfer_g[g]
				r_gi[g][i_d] = r_gi[g][i_d] + transfer_g[g]
		else:
			r_gi[f][i_o] = r_gi[f][i_o] - transfer
			r_gi[f][i_d] = r_gi[f][i_d] + transfer
		return i_o, i_d, transfer, f
	M = len(r_mgi)
	G = len(r_mgi[0])
	I = len(r_mgi[0][0])
	mesas_editar = random.sample(range(M), m_edit)
	i_o_hist = []
	i_d_hist = []
	transfer_hist = []
	f_hist = []
	if printear:
		print("m\ti_o\ti_d\ttransf\tf")
	for m in mesas_editar:
		#i_o, i_d, transfer, f = edit_single_table(r_mgi[m], i_o=None, i_d=None, transfer=None, f=None, printear = printear)
		i_o, i_d, transfer, f = edit_single_table(r_mgi[m], i_o = 0, i_d = 1, transfer = 50, f = None, printear = printear)
		i_o_hist.append(i_o)
		i_d_hist.append(i_d)
		transfer_hist.append(transfer)
		f_hist.append(f)
		if printear:
			print(str(m)+"\t"+str(i_o)+"\t"+str(i_d)+"\t"+str(transfer)+"\t"+str(f))
# funcion que estima los parametros de probabilidad de voto de cada grupo por cada candidatos
def EM(b_mg, n_mi, printear = False, epsilon = 1e-4, printear_resultados = True):
	# obtenemos un p_gi inicial
	p_gi_0, q_mgi, ll, ll_m, iteracion = EM_especifico(b_mg, n_mi, p_gi_0 = None, printear = printear, epsilon = epsilon, printear_resultados = printear_resultados, I_max = 1)
	# obtenemos un p_gi usando cotas
	#p_gi, q_mgi, ll, ll_m, iteracion = EM_especifico(b_mg, n_mi, p_gi_0, printear = printear, epsilon = epsilon, printear_resultados = printear_resultados, I_max = 3)
	return p_gi_0, q_mgi, ll, ll_m, iteracion

# funcion que estima los parametros de probabilidad de voto de cada grupo por cada candidatos
def EM_especifico(b_mg, n_mi, p_gi_0 = None, printear = False, epsilon = 1e-4, printear_resultados = True, I_max = 1):
	print("\n############ EM ALGORITHM ############")
	# funcion que verifica que sumen 1 sus componentes de cada lista
	def fun_sum_1(x, nombre, eps = 1e-7, exit_code = True):
		# x : lista de listas (por ejemplo p_gi)
		# nombre : nombre del arreglo para poner en el mensaje
		# eps : tolerancia del error
		# exit_code : True si se temrina el codigo cuando la suma no es 1, 
		#				False si solo se imprime un mensaje cuando esto ocurre
		#for g in range(0, len(x)):
		for g in range(len(x)-1, len(x)):
			if abs(sum(x[g]) - 1.0) > eps:
				if exit_code:
					print("")
					for i in range(len(x[0])):
						print(nombre+"["+str(g)+"]["+str(i)+"] = "+str(x[g][i]))
					print("")
					raise ValueError("EM -> FUN_SUM_1: el valor de suma de "+nombre+"["+str(g)+"] = "+str(sum(x[g]))+" es diferente a 1.0.")
				else:
					print("EM -> FUN_SUM_1: el valor de suma de "+nombre+"["+str(g)+"] = "+str(sum(x[g]))+" es diferente a 1.0.")
	# funcion que recibe una lista de listas para que cada lista sea forzada a sumar 1
	def fun_fix_to_sum_1(x, nombre, eps = 1e-3, exit_code = True, chequeo = True):
		# x : lista de listas (por ejemplo p_gi o q_mgi[m])
		# nombre : nombre del arreglo para poner en el mensaje
		# eps : tolerancia del error
		# exit_code : True si se temrina el codigo cuando la suma no es 1, 
		#				False si solo se imprime un mensaje cuando esto ocurre
		# primero chequear que el error no sea muy grosero
		if chequeo:
			fun_sum_1(x, nombre, eps = eps, exit_code = exit_code)
		# recibe una lista
		for g in range(0, len(x)):
			suma = sum(x[g])
			for i in range(len(x[0])):
				x[g][i] = x[g][i] / suma
	# funcion que calcula los T y U simultaneamente para todos los i
	def fun_TU(p_gi, m, v_i, I_max):
		# v_i : vector con el numero de votos que saca cada candidato, deber√≠a corresponder a [n_mi[m][i] for i in range(I)]
		# I_max : maximo numero de candidatos a considerar
		#print("v_i = ", str(v_i))
		#print("b_mg["+str(m)+"] = ", str(b_mg[m]))
		# funcion que pasa de un arreglo de elemntos sampleados donde la tupla tiene el largo de n_votantes
		# a una tupla que tiene de largo el numero de candidatos
		def comb2key(c, I):
			n = len(c)
			return [sum([c[i] == j for i in range(n)]) for j in range(I)]
		# computa la binomial inversa
		def binom_icdf(alpha, n, p):
			if alpha == 0.0 or n == 0:
				return 0
			lgac_n = [sum([math.log(max(j, 1)) for j in range(k + 1)]) for k in range(n + 1)]
			log_p = math.log(p)
			log_1mp = math.log(1 - p)
			def f(i, j):
				s = 0.0
				for k in range(i, j + 1):
					s += math.exp(lgac_n[n] - lgac_n[k] - lgac_n[n - k] +k*log_p + (n-k)*log_1mp)
				return s
			c1 = 0
			c2 = n
			ci = int((c1+c2)/2)
			f_ac = math.exp(n*log_1mp)
			if f_ac > alpha:
				return 0
			i = 1
			while c2 - c1 > 1:
				extra = f(c1 + 1, ci)
				#print(f"\t{i}\tc1 = {c1}\tci = {ci}\tc2 = {c2}\tface = {f_ac + extra}")
				if f_ac + extra < alpha:
					c1 = ci
					f_ac += extra
				else:
					c2 = ci
				ci = int((c1+c2)/2)
				i += 1
			#print(f"fin\t{i}\tc1 = {c1}\tci = {ci}\tc2 = {c2}\tface = {f_ac + extra}")
			return c2
		# funcion que entrega una cota de votos en cada etapa usando una bionomial con p maximo de entre los grupos
		def cota_a_k_gi(f, i, beta, alpha, acumulada = True):
			# f : indice del grupo sobre el cual se trabaja (contando votos desde desde grupo 1 hasta el f)
			# ojo, f es indeice sobre grupos ordenados!
			# i : indice del candidato
			# beta : probabilidad de que la suam de las VA de los votos (hasta si¬†acumulada = True) grupo g por candidato i sea mayor a beta
			# alpha : probabilidad de que la suma de las VA de los votos (hasta si¬†acumulada = True) grupo g por candidato i sea menor a alpha
			# acumulada : True si es con grupos de 0 hasta f (en orden)
			if acumulada:
				#k_max = int(binom.isf(1 - alpha, sum([b_g_ord[g] for g in range(f + 1)]), max([p_gi_ord[g][i] for g in range(f+1)])))
				# es equivalente a usar
				#k_max = int(binom.ppf(alpha, sum([b_g_ord[g] for g in range(f + 1)]), max([p_gi_ord[g][i] for g in range(f+1)])))
				#k_min = int(binom.ppf(beta, sum([b_g_ord[g] for g in range(f + 1)]), min([p_gi_ord[g][i] for g in range(f+1)])))
				k_max = binom_icdf(alpha, sum([b_g_ord[g] for g in range(f + 1)]), max([p_gi_ord[g][i] for g in range(f+1)]))
				k_min = binom_icdf(beta, sum([b_g_ord[g] for g in range(f + 1)]), min([p_gi_ord[g][i] for g in range(f+1)]))
				#print(f"\t\tm = {m}\ti = {i}\tf = {f}\ta = {alpha}\tb = {beta}\tk_max = {k_max}\tk_min = {k_min}")
			else:
				#k_max = int(binom.isf(1 - alpha, b_g_ord[f], p_gi_ord[f][i]))
				# es equivalente a usar
				#k_max = int(binom.ppf(alpha, b_g_ord[f], p_gi_ord[f][i]))
				#k_min = int(binom.ppf(beta, b_g_ord[f], p_gi_ord[f][i]))
				k_max = binom_icdf(alpha, b_g_ord[f], p_gi_ord[f][i])
				k_min = binom_icdf(beta, b_g_ord[f], p_gi_ord[f][i])
			return k_min, k_max
		# funcion que entrega una cota de votos en cada etapa usando la bionomial de cada etapa
		def cota_b_k_gi(f, i, beta, alpha, acumulada = True):
			# f : indice del grupo sobre el cual se trabaja (contando votos desde desde grupo 1 hasta el f)
			# ojo, f es indeice sobre grupos ordenados!
			# i : indice del candidato
			# beta : probabilidad de que la suam de las VA de los votos (hasta si¬†acumulada = True) grupo g por candidato i sea mayor a beta
			# alpha : probabilidad de que la suma de las VA de los votos hasta grupo g por candidato i sea menor a alpha
			# acumulada : True si es con grupos de 0 hasta f (en orden)
			if acumulada:
				#k_max = sum([int(binom.isf(1 - alpha, b_g_ord[g], p_gi_ord[g][i])) for g in range(f + 1)])
				# equivalente a 
				#k_max = sum([int(binom.ppf(alpha, b_g_ord[g], p_gi_ord[g][i])) for g in range(f + 1)])
				#k_min = sum([int(binom.ppf(beta, b_g_ord[g], p_gi_ord[g][i])) for g in range(f + 1)])
				k_max = sum([binom_icdf(alpha, b_g_ord[g], p_gi_ord[g][i]) for g in range(f + 1)])
				k_min = sum([binom_icdf(beta, b_g_ord[g], p_gi_ord[g][i]) for g in range(f + 1)])
			else:
				#k_max = int(binom.isf(1 - alpha, b_g_ord[f], p_gi_ord[f][i]))
				# equivalente a 
				#k_max = int(binom.ppf(alpha, b_g_ord[f], p_gi_ord[f][i]))
				#k_min = int(binom.ppf(beta, b_g_ord[f], p_gi_ord[f][i]))
				k_max = binom_icdf(alpha, b_g_ord[f], p_gi_ord[f][i])
				k_min = binom_icdf(beta, b_g_ord[f], p_gi_ord[f][i])
			return k_min, k_max
		# funcion que entrega una cota de votos en cada etapa
		def cota_c_k_gi(f, i, beta, alpha, epsilon_k = 1, epsilon_s = 1e-3, acumulada = True):
			# f : indice del grupo sobre el cual se trabaja (contando votos desde desde grupo 0 hasta el f)
			# ojo, f es indice sobre grupos ordenados!
			# i : indice del candidato
			# alpha : probabilidad de que la suma de las VA de los votos hasta grupo g por candidato i sea menor a alpha
			# epsilon_k : correr algoritmo hasta que los k_lb y k_ub esten a esta distancia
			# epsilon_s : = 1e-3 # tolerancia en variable "s" al minimizar cota de chernoff
			# funcion que calcula el LHS de la dereivada de el logatimo del chernoff bound
			def LHS_FOC_chernoff(k, s):
				exp_s = math.exp(s)
				if acumulada:
					LHS = sum([b_g_ord[g] * p_gi_ord[g][i] * exp_s / ( p_gi_ord[g][i] * exp_s + 1 - p_gi_ord[g][i] ) for g in range(f + 1)])
				else:
					LHS = b_g_ord[f] * p_gi_ord[f][i] * exp_s / ( p_gi_ord[f][i] * exp_s + 1 - p_gi_ord[f][i] )
				return LHS
					
			# funcion que encuentra el s que minimiza la cota de chernoff dado un k
			def ub_find_opt_s(k, s_lb = None, s_ub = None, epsilon_s = 1e-3):
				# k : valor de k dado
				# s_lb : valor de cota inferior de s
				# s_ub : valor de cota inferior de s
				# epsilon_s : valor de cota inferior de s
				if not acumulada: # esto da lo mismo si es que es para cota superior o inferior
					s = math.log((k*(1-p_gi_ord[f][i]))/(p_gi_ord[f][i]*(b_g_ord[f] - k)))
					return s
				s_factor = 2.0
				# definir s_lb si es que no se entrega
				if s_lb is None:
					s_lb = 1e-5
				# encontrar primero un s_ub
				if s_ub is None:	
					s_ub = s_lb
					#LHS = 0
					LHS = LHS_FOC_chernoff(k, s_ub)
					while LHS < k:
						#print(f"\tk = {k}\ts = {s_ub}\tLHS = {LHS}")
						s_ub = s_factor * s_ub
						#exp_s = math.exp(s_ub)
						#LHS = sum([b_g_ord[g] * p_gi_ord[g][i] * exp_s / ( p_gi_ord[g][i] * exp_s + 1 - p_gi_ord[g][i] ) for g in range(f + 1)])
						LHS = LHS_FOC_chernoff(k, s_ub)
				# encontrar el s entre s_lb y s_ub con busqueda binaria
				s = (s_lb + s_ub) / 2.0
				while s_ub - s_lb > epsilon_s:
					s = (s_lb + s_ub) / 2.0
					#print(f"\t\ts = {s}\ts_lb = {s_lb}\ts_ub = {s_ub}\tk = {k}\tf = {f}\ti = {i}")
					#exp_s = math.exp(s)
					#LHS = sum([b_g_ord[g] * p_gi_ord[g][i] * exp_s / ( p_gi_ord[g][i] * exp_s + 1 - p_gi_ord[g][i] ) for g in range(f + 1)])
					LHS = LHS_FOC_chernoff(k, s)
					if LHS < k:
						s_lb = s
					else:
						s_ub = s
				return s

			# funcion que encuentra el s que minimiza la cota de chernoff dado un k
			def lb_find_opt_s(k, s_lb = None, s_ub = None, epsilon_s = 1e-3):
				# k : valor de k dado
				# s_lb : valor de cota inferior de s
				# s_ub : valor de cota inferior de s
				# epsilon_s : valor de cota inferior de s
				if not acumulada: # esto da lo mismo si es que es para cota superior o inferior
					s = math.log((k*(1-p_gi_ord[f][i]))/(p_gi_ord[f][i]*(b_g_ord[f] - k)))
					return s
				s_factor = 2.0
				# definir s_ub si es que no se entrega
				if s_ub is None:
					s_ub = -1e-5
				# encontrar primero un s_lb
				if s_lb is None:	
					s_lb = s_ub
					#LHS = 0
					LHS = LHS_FOC_chernoff(k, s_lb)
					#print(f"a\t\t\tk = {k}\ts_lb = {s_ub}\tLHS = {LHS}")
					while LHS > k:
						s_lb = s_factor * s_lb
						#exp_s = math.exp(s_lb)
						#LHS = sum([b_g_ord[g] * p_gi_ord[g][i] * exp_s / ( p_gi_ord[g][i] * exp_s + 1 - p_gi_ord[g][i] ) for g in range(f + 1)])
						LHS = LHS_FOC_chernoff(k, s_lb)
						#print(f"b\t\t\tk = {k}\ts_lb = {s_ub}\tLHS = {LHS}")
					#print(f"\tlb_find_opt_s\tk = {k}\ts_lb = {s_lb}\ts_ub = {s_ub}\tLHS = {LHS}")
				# encontrar el s entre s_lb y s_ub con busqueda binaria
				s = (s_lb + s_ub) / 2.0
				while s_ub - s_lb > epsilon_s:
					s = (s_lb + s_ub) / 2.0
					#print(f"\t\ts = {s}\ts_lb = {s_lb}\ts_ub = {s_ub}\tk = {k}\tf = {f}\ti = {i}")
					#exp_s = math.exp(s)
					#LHS = sum([b_g_ord[g] * p_gi_ord[g][i] * exp_s / ( p_gi_ord[g][i] * exp_s + 1 - p_gi_ord[g][i] ) for g in range(f + 1)])
					LHS = LHS_FOC_chernoff(k, s)
					if LHS < k:
						s_lb = s
					else:
						s_ub = s
				return s
			
			# computa el bound de chernoff
			def chernoff(k, s):
				# k : valor de k dado
				# s : valor de s
				exp_s = math.exp(s)
				if acumulada:
					chernoff_bound = math.exp(-s * k) * np.prod([(p_gi_ord[g][i] * exp_s + 1 - p_gi_ord[g][i])**b_g_ord[g] for g in range(f + 1)])
				else:
					chernoff_bound = math.exp(-s * k) * (p_gi_ord[f][i] * exp_s + 1 - p_gi_ord[f][i])**b_g_ord[f]
				return chernoff_bound
			# buscamos primero la cota superior k_max
			if acumulada:
				k_ub = sum([b_g_ord[g] for g in range(f + 1)])
				k_lb = min(math.floor(sum([b_g_ord[g]*p_gi_ord[g][i] for g in range(f + 1)])) + 1, k_ub)
			else:
				k_ub = b_g_ord[f]
				k_lb = min(math.floor(b_g_ord[f]*p_gi_ord[f][i]) + 1, k_ub)
			#k = round((k_lb + k_ub)/2+ 1e-1)
			k = math.ceil((k_lb + k_ub)/2)
			s_lb = None
			s_ub = None
			s = None
			#print(f"INICIO DE WHILE")
			#print(f"k_lb = {k_lb}\tk_ub = {k_ub}\tk = {k}\t")
			while k_ub - k_lb > epsilon_k:
				#k = round((k_lb + k_ub)/2 + 1e-1)
				k = math.ceil((k_lb + k_ub)/2)
				#print(f"\tm = {m}\tf = {f}\ti = {i}\ts = {s}\ts_lb = {s_lb}\ts_ub = {s_ub}\tk = {k}\tk_lb = {k_lb}\tk_ub = {k_ub}\tac = {acumulada}")
				s = ub_find_opt_s(k, s_lb = s_lb, s_ub = s_ub, epsilon_s = epsilon_s)
				if chernoff(k, s) <= 1 - alpha:
					k_ub = k
					s_ub = s
				else:
					k_lb = k
					s_lb = s
			#print(f"\tm = {m}\tf = {f}\ti = {i}\tK = {K}")
			k_max = k_ub
			#print(f"TERMINO DE WHILE")

			# buscamos segundo la cota inferior : k_min
			k_lb = 0
			#k_ub = sum([b_g_ord[g] for g in range(f + 1)])
			#if k_lb is None:
			if acumulada:
				k_ub = math.ceil(sum([b_g_ord[g]*p_gi_ord[g][i] for g in range(f + 1)]))
			else:
				k_ub = math.ceil(b_g_ord[f] * p_gi_ord[f][i])
			k = math.floor((k_lb + k_ub)/2)
			s_lb = None
			s_ub = None
			s = None
			#print(f"INICIO DE WHILE k_min")
			#print(f"k_lb = {k_lb}\tk_ub = {k_ub}\tk = {k}\t")
			while k_ub - k_lb > epsilon_k:
				k = math.floor((k_lb + k_ub)/2)
				#print(f"\tm = {m}\tf = {f}\ti = {i}\ts = {s}\ts_lb = {s_lb}\ts_ub = {s_ub}\tk = {k}\tk_lb = {k_lb}\tk_ub = {k_ub}")
				s = lb_find_opt_s(k, s_lb = s_lb, s_ub = s_ub, epsilon_s = epsilon_s)
				if chernoff(k, s) <= beta:
					#print("a")
					k_lb = k
					s_lb = s
				else:
					#print("b")
					k_ub = k
					s_ub = s
			k_min = k_lb
			
			return k_min, k_max

		# funcion que entrega una cota de votos en cada etapa usando una approx normal
		def cota_d_k_gi(f, i, beta, alpha, acumulada = True):
			# f : indice del grupo sobre el cual se trabaja (contando votos desde desde grupo 1 hasta el f)
			# ojo, f es indeice sobre grupos ordenados!
			# i : indice del candidato
			# beta : probabilidad de que la suam de las VA de los votos (hasta si¬†acumulada = True) grupo g por candidato i sea mayor a beta
			# alpha : probabilidad de que la suma de las VA de los votos (hasta si¬†acumulada = True) grupo g por candidato i sea menor a alpha
			# acumulada : True si es con grupos de 0 hasta f (en orden)
			if acumulada:
				mu = sum([b_g_ord[g] * p_gi_ord[g][i] for g in range(f + 1)])
				sigma = math.sqrt(sum([b_g_ord[g] * p_gi_ord[g][i] * (1 - p_gi_ord[g][i]) for g in range(f + 1)]))
				k_max = math.ceil(norm.ppf(alpha) * sigma + mu)
				k_min = math.floor(norm.ppf(beta) * sigma + mu)
			else:
				mu = b_g_ord[f] * p_gi_ord[f][i]
				sigma = math.sqrt(b_g_ord[f] * p_gi_ord[f][i] * (1 - p_gi_ord[f][i]))
				k_max = math.ceil(norm.ppf(alpha) * sigma + mu)
				k_min = math.floor(norm.ppf(beta) * sigma + mu)
			return k_min, k_max
		
		# funcion que entrega una cota de votos en cada etapa usando una bionomial con p maximo de entre los grupos
		def cota_abcd_k_gi(f, i, beta, alpha, acumulada = True, metodo = 1):
			# f : indice del grupo sobre el cual se trabaja (contando votos desde desde grupo 1 hasta el f)
			# ojo, f es indeice sobre grupos ordenados!
			# i : indice del candidato
			# beta : probabilidad de que la suam de las VA de los votos (hasta si¬†acumulada = True) grupo g por candidato i sea mayor a beta
			# alpha : probabilidad de que la suma de las VA de los votos (hasta si¬†acumulada = True) grupo g por candidato i sea menor a alpha
			# acumulada : True si es con grupos de 0 hasta f (en orden)
			# metodo : el metodo a usar, si metodo =0, entonces no se usan cotas
			if metodo == 0:
				k_min, k_max = 0, sum([b_g_ord[g] for g in range(f + 1)]) if acumulada else b_g_ord[f]
			elif metodo == 1:
				k_min, k_max = cota_a_k_gi(f, i, beta, alpha, acumulada = acumulada)
			elif metodo == 2:
				k_min, k_max = cota_b_k_gi(f, i, beta, alpha, acumulada = acumulada)
			elif metodo == 3:
				k_min, k_max = cota_c_k_gi(f, i, beta, alpha, acumulada = acumulada)
			elif metodo == 4:
				k_min, k_max = cota_d_k_gi(f, i, beta, alpha, acumulada = acumulada)
			else:
				raise ValueError("cota_abcd_k_gi: metodo debe tener valor del 1 al 4. Y su valor es de "+str(metodo)+".")
			return k_min, k_max
		

		# funcion que crea un arreglo de los valores de h posibles a usar
		def create_H_g(n_votantes_g, limites_i, only_g = None, cumulative = False, cotas_k_gi = False):
			# n_votantes_g : votantes de cada grupo
			# limites_i : votos que saca cada candidato, deberia ser tipo n_mi[m][i]
			# only_g : None si es que se entrega output para todos los grupos, de lo contrario solo se da output para g
			# Cumulative : True si para cada etapa sumamos de manera acumulada los n_votantes anteriores
			# cotas_k_gi : True si aplica las cotas k_gi
			alpha = 0.99999
			beta = 0.00001
			metodo = 0
			I = len(limites_i)
			G = np.size(n_votantes_g)
			if only_g is None:
				H_g = [[] for g in range(G+1)]
				H_g[0].append(tuple([0 for i in range(I)]))
				for g in range(1, G + 1):
					if not cumulative:
						comb = list(combinations_with_replacement(range(I), n_votantes_g[g - 1]))
					else:
						comb = list(combinations_with_replacement(range(I), sum([n_votantes_g[e] for e in range(0, g)])))
					if cotas_k_gi:
						#k_g = [cota_c_k_gi(g - 1, i, alpha, k_lb = None, epsilon_k = 1, epsilon_s = 1e-3) for i in range(I)]
						k_g = [cota_abcd_k_gi(g - 1, i, beta, alpha, acumulada = cumulative, metodo = metodo) for i in range(I)]
						#print(f"\tg = {g}; k_g = {k_g}")
					for c in comb:
						key = comb2key(c, I) # obtener la tupla, de modoq ue el largo es igual a I, y el contenido son los votos que saca cada candidato
						if cotas_k_gi:
							#if sum([(k_g[i][0] <= key[i]) and (key[i] <= min(limites_i[i], k_g[i][1])) for i in range(I)]) == I:
							if (g == G) and cumulative:
								if sum([(min(k_g[i][0], limites_i[i]) <= key[i]) and (key[i] <= min(limites_i[i], k_g[i][1])) for i in range(I)]) == I:
									H_g[g].append(tuple(key))
							else:
								if sum([(k_g[i][0] <= key[i]) and (key[i] <= min(limites_i[i], k_g[i][1])) for i in range(I)]) == I:
									H_g[g].append(tuple(key))
						else:
							if sum([key[i] <= limites_i[i] for i in range(I)]) == I:
								H_g[g].append(tuple(key))
				return H_g
			else:
				H_g = []
				if not cumulative:
					comb = list(combinations_with_replacement(range(I), n_votantes_g[only_g]))
				else:
					comb = list(combinations_with_replacement(range(I), sum([n_votantes_g[e] for e in range(0, only_g + 1)])))
				if cotas_k_gi:
					k_g = [cota_abcd_k_gi(only_g, i, beta, alpha, acumulada = cumulative, metodo = metodo) for i in range(I)]
					#print(f"g = {g}; k_g = {k_g}")
				for c in comb:
					key = comb2key(c, I)
					if cotas_k_gi:
						if sum([(k_g[i][0] <= key[i]) and (key[i] <= min(limites_i[i], k_g[i][1])) for i in range(I)]) == I:
							H_g.append(tuple(key))
					else:
						if sum([key[i] <= limites_i[i] for i in range(I)]) == I:
							H_g.append(tuple(key))
				return H_g
		I_max = min(I_max, I)
		I_max = I if I_max == I - 1 else I_max
		q_gi = [[0.0 for i in range(I)] for g in range(G)]
		indices_ord_g = np.argsort(b_mg[m])
		b_g_ord = [b_mg[m][indices_ord_g[g]] for g in range(G)]
		p_gi_ord = [[p_gi[indices_ord_g[g]][i] for i in range(I)] for g in range(G)]
		#print(f"b_mg[{m}] = {b_mg[m]}")
		#print(f"b_g_ord = {b_g_ord}")
		#print(f"p_gi_ord = {p_gi_ord}")
		#K_g = create_H_g(b_mg[m], v_i, cumulative = True)
		#K_g = create_H_g(b_g_ord, v_i, cumulative = True)
		# buscar indice con los I_max maxima cantidad de votos
		indices_ord_global = np.argsort(-np.array(n_mi[m]))[0:I_max]
		# crear arreglo de candidatos complementarios a los I_max mas votados
		indices_ord_global_complement = [x for x in range(I) if not x in indices_ord_global]
		I_max_mas1 = I_max + 1 if I_max < I else I_max
		
		###### ver caso cuando el candidato "i" es de los I_max mas votados
		indices_ord_i = [i for i in indices_ord_global]
		v_i_i = [v_i[i] for i in indices_ord_i]
		# agregar resto del mundo
		if I_max < I:
			v_i_i.append(sum(v_i) - sum(v_i_i))
		K_g = create_H_g(b_g_ord, v_i_i, cumulative = True, cotas_k_gi = True)
		p_gi_ord = [[p_gi[indices_ord_g[g]][i] for i in indices_ord_i] for g in range(G)]
		if I_max < I:
			for g in range(G):
				p_gi_ord[g].append(1 - sum(p_gi_ord[g]))
		
		T_gk = [[0.0 for k in K_g[f]] for f in range(G + 1)]
		T_gk[0][0] = 1.0
		U_igfk = [[[[0.0 for k in K_g[f]] for f in range(G + 1)] for g in range(G)] for i in range(I_max)]
		for i in range(I_max):
			U_igfk[i][0][0][0] = 1.0
		lgac_n = [sum([math.log(max(k, 1)) for k in range(n + 1)]) for n in range(max(b_g_ord) + 1)]
		hlg_p_gin = [[[n * math.log(p_gi_ord[g][i]) for n in range(max(b_g_ord) + 1)] for i in range(I_max_mas1)] for g in range(G)]
		hb_gn = [[n / b_g_ord[g] if b_g_ord[g] > 0 else 0.0 for n in range(max(b_g_ord) + 1)] for g in range(G)]
		H_g = create_H_g(b_g_ord, v_i_i, cumulative = False, cotas_k_gi = True)
		for f in range(1, G + 1):
			dict_indices = {} # diccionario que la llave es la tupla, y el valor es el indice de la tupla en K_g[f-1]
			for k_tuple in range(len(K_g[f-1])):
				dict_indices[K_g[f-1][k_tuple]] = k_tuple
			for index_k in range(len(K_g[f])):
				k = K_g[f][index_k]
				#print(f"\t\tk = {k}")
				#s_out += f"\n\t\tk = {k}"
				suma_T = 0.0
				#H_g = create_H_g(b_mg[m], list(k), only_g = f-1, cumulative = False)
				#suma_U_g = [0.0 for g in range(f)]
				suma_U_ig = [[0.0 for g in range(f)] for i in range(I_max)]
				for index_h in range(len(H_g[f])):
					#for index_h in range(len(H_g)):
					h = H_g[f][index_h]
					#h = H_g[index_h]
					if sum([h[i] <= k[i] for i in range(I_max_mas1)]) < I_max_mas1:
						continue
					#print(f"\t\t\th = {h}")
					#s_out += f"\n\t\t\th = {h}"
					#indice = K_g[f-1].index(tuple(np.array(k) - np.array(h)))
					#indice = dict_indices[tuple(np.array(k) - np.array(h))]
					indice = dict_indices.get(tuple(np.array(k) - np.array(h)))
					if indice is None:
						continue
					#aa = lgac_n[b_mg[m][f - 1]] + sum([hlg_p_gin[f-1][i][h[i]] - lgac_n[h[i]] for i in range(I_max_mas1)])
					#print(f"\t\t\taa = {aa}")
					a = math.exp(lgac_n[b_g_ord[f - 1]] + sum([hlg_p_gin[f-1][i][h[i]] - lgac_n[h[i]] for i in range(I_max_mas1)]))
					#print(f"\t\t\ta  = {a}")
					suma_T += T_gk[f - 1][indice] * a
					for i in range(I_max):
						a_h_b = a * hb_gn[f - 1][h[i]]
						for g in range(f - 1):
							suma_U_ig[i][g] += U_igfk[i][g][f - 1][indice] * a
						# ultimo caso g = f - 1
						if h[i] > 0:
							g = f - 1
							#suma_U_ig[i][g] += U_igfk[i][g][f - 1][indice] * (h[i] / b_g_ord[f - 1]) * a
							suma_U_ig[i][g] += U_igfk[i][g][f - 1][indice] * a_h_b
				T_gk[f][index_k] = suma_T
				for i in range(I_max):
					for g in range(f):
						U_igfk[i][g][f][index_k] = suma_U_ig[i][g]
				if f < G:
					for i in range(I_max):
						U_igfk[i][f][f][index_k] = suma_T
		#print(f"K_g[{G}] = {K_g[G]}")
		indice = K_g[G].index(tuple(v_i_i))
		#indice = 0
		for g in range(G):
			#if b_mg[m][g] == 0:
			if b_g_ord[g] == 0:
				for i in range(I_max):
					U_igfk[i][g][G][indice] = T_gk[G][indice] / I
		nuevos_indices_ord_g = np.argsort(indices_ord_g)
		for g in range(G):
			#for g in nuevos_indices_ord_g:
			for i in range(I_max):
				q_gi[g][indices_ord_global[i]] = U_igfk[i][nuevos_indices_ord_g[g]][G][indice] / T_gk[G][indice]
		#q_gi = [[U_igfk[i][g][G][indice] / T_gk[G][indice] for i in range(I)] for g in nuevos]
		
		#print(f"m = {m}, aca")
		#print_list_2D(q_gi, "q_gi")


		###### ver caso cuando el candidato "i" no es de los I_max mas votados
		for i in indices_ord_global_complement:
			#p_gi_ord = [[p_gi[indices_ord_g[g]][i] for i in range(I)] for g in range(G)]
			# agregar candidato "i" a la lista (a la fuerza)
			indices_ord_i = [i for i in indices_ord_global]
			#if not i in indices_ord_global:
			indices_ord_i[I_max - 1] = i
			v_i_i = [v_i[i] for i in indices_ord_i]
			# agregar resto del mundo
			if I_max < I:
				v_i_i.append(sum(v_i) - sum(v_i_i))
			K_g = create_H_g(b_g_ord, v_i_i, cumulative = True, cotas_k_gi = True)
			p_gi_ord = [[p_gi[indices_ord_g[g]][i] for i in indices_ord_i] for g in range(G)]
			if I_max < I:
				for g in range(G):
					p_gi_ord[g].append(1 - sum(p_gi_ord[g]))
			
			T_gk = [[0.0 for k in K_g[f]] for f in range(G + 1)]
			T_gk[0][0] = 1.0
			U_gfk = [[[0.0 for k in K_g[f]] for f in range(G + 1)] for g in range(G)]
			U_gfk[0][0][0] = 1.0
			lgac_n = [sum([math.log(max(k, 1)) for k in range(n + 1)]) for n in range(max(b_g_ord) + 1)]
			hlg_p_gin = [[[n * math.log(p_gi_ord[g][i]) for n in range(max(b_g_ord) + 1)] for i in range(I_max_mas1)] for g in range(G)]
			hb_gn = [[n / b_g_ord[g] if b_g_ord[g] > 0 else 0.0 for n in range(max(b_g_ord) + 1)] for g in range(G)]
			H_g = create_H_g(b_g_ord, v_i_i, cumulative = False, cotas_k_gi = True)
			for f in range(1, G + 1):
				dict_indices = {}
				for k_tuple in range(len(K_g[f-1])):
					dict_indices[K_g[f-1][k_tuple]] = k_tuple
				for index_k in range(len(K_g[f])):
					k = K_g[f][index_k]
					#print(f"\t\tk = {k}")
					#s_out += f"\n\t\tk = {k}"
					suma_T = 0.0
					#H_g = create_H_g(b_mg[m], list(k), only_g = f-1, cumulative = False)
					#suma_U_g = [0.0 for g in range(f)]
					suma_U_g = [0.0 for g in range(f)]
					for index_h in range(len(H_g[f])):
						#for index_h in range(len(H_g)):
						h = H_g[f][index_h]
						#h = H_g[index_h]
						if sum([h[i] <= k[i] for i in range(I_max_mas1)]) < I_max_mas1:
							continue
						#print(f"\t\t\th = {h}")
						#s_out += f"\n\t\t\th = {h}"
						#indice = K_g[f-1].index(tuple(np.array(k) - np.array(h)))
						#indice = dict_indices[tuple(np.array(k) - np.array(h))]
						indice = dict_indices.get(tuple(np.array(k) - np.array(h)))
						if indice is None:
							continue
						#a = multinomial(list(h)) * np.prod(np.array(p_gi[f-1])**np.array(h))
						a = math.exp(lgac_n[b_g_ord[f - 1]] + sum([hlg_p_gin[f-1][i][h[i]] - lgac_n[h[i]] for i in range(I_max_mas1)]))
						#a = math.exp(lgac_n[b_g_ord[f - 1]] - sum([lgac_n[h[i]] for i in range(I)]) + sum([hlg_p_gin[f-1][i][h[i]] for i in range(I)]))
						suma_T += T_gk[f - 1][indice] * a
						a_h_b = a * hb_gn[f - 1][h[I_max - 1]]
						for g in range(f - 1):
							suma_U_g[g] += U_gfk[g][f - 1][indice] * a
						# ultimo caso g = f - 1
						if h[I_max - 1] > 0:
							g = f - 1
							#suma_U_ig[i][g] += U_igfk[i][g][f - 1][indice] * (h[i] / b_g_ord[f - 1]) * a
							suma_U_g[g] += U_gfk[g][f - 1][indice] * a_h_b
					T_gk[f][index_k] = suma_T
					for g in range(f):
						U_gfk[g][f][index_k] = suma_U_g[g]
					if f < G:
						U_gfk[f][f][index_k] = suma_T
			#print(f"K_g[{G}] = {K_g[G]}")
			indice = K_g[G].index(tuple(v_i_i))
			#indice = 0
			for g in range(G):
				#if b_mg[m][g] == 0:
				if b_g_ord[g] == 0:
					U_gfk[g][G][indice] = T_gk[G][indice] / I
			for g in range(G):
				#for g in nuevos_indices_ord_g:
				q_gi[g][i] = U_gfk[nuevos_indices_ord_g[g]][G][indice] / T_gk[G][indice]
		#print(f"indices_ord_global = {indices_ord_global}")
		#print(f"m = {m}, aca 2")
		#print_list_2D(q_gi, "q_gi")

		#U_I = [1 - sum([U_igfk[i][g][G][indice] / T_gk[G][indice] for i in range(I - 1)]) for g in range(G)]
		#filename = "out0.txt"
		#with open(filename, "w") as file:
		#	file.write(s_out)
		#exit()
		#print("\n"+filename+"\n")
		#print(f"T_gk[{G}][{indice}] = {T_gk[G][indice]}")
		#for g in range(G):
		#	print(f"U_gfk[{g}][{G}][{indice}] = {U_gfk[g][G][indice]}")
		fun_fix_to_sum_1(q_gi, "q_gi", eps = 1e-3, exit_code = False, chequeo = False)
		return q_gi
		#return [U_gfk[g][G][indice] / T_gk[G][indice] for g in range(G)]
		#nuevos = np.argsort(indices_ord_g)
		#return [[U_igfk[i][g][G][indice] / T_gk[G][indice] if (i < I - 1) else U_I[g] for i in range(I)] for g in nuevos]
	G = len(b_mg[0])
	M = len(b_mg)
	I = len(n_mi[0])
	n_m = [sum([n_mi[m][i] for i in range(I)]) for m in range(M)]	
	#epsilon = 1e-4
	iteracion = 0
	ll = -1.0e10
	ll_m = []
	delta = 1.0e+10
	# Initialization
	p_gi_old = [[0.0 for i in range(I)] for g in range(G)]
	if p_gi_0 == None:
		p_gi = [[1 / I for i in range(0, I)] for g in range(0, G)]
		#p_gi = [[sum([n_mi[m][i] for m in range(M)]) / sum([n_m[m] for m in range(M)]) for i in range(I)] for g in range(G)]
	else:
		p_gi = [[p_gi_0[i][g] for i in range(I)] for g in range(G)]
	#p_gi = [[0.1,0.9], [0.5,0.5]]
	p_gi = [[1 / I for i in range(0, I)] for g in range(0, G)]
	if printear:
		print("iteracion = %d" % (iteracion))
		print("p_gi = ")
		print_list_2D(p_gi, "p_gi", fila = False, transpose = True)
		#print(np.matrix(p_gi))
	q_mgi = []
	#while continue_criteria(p_gi, p_gi_old, epsilon):
	metodo = 5
	while delta > epsilon:
		start = time.time()
		# E-step
		if metodo == 5:
			q_mgi = [fun_TU(p_gi, m, n_mi[m], I_max) for m in range(M)]
		print(q_mgi)
		#exit()
		#for i in range(I):
		#	m = 9
		#	g = 2
			#print("q_mgi["+str(m)+"]["+str(g)+"]["+str(i)+"] = "+str(q_mgi[m][g][i]))
		#q_mgi = [[[fun_U(p_gi, m, i, n_mi[m][i], g) * p_gi[g][i] / fun_T(p_gi, m, i, n_mi[m][i]) for i in range(0, I)] for g in range(0, G)] for m in range(0, M)]
		print("tiempo ejecucion E-Step = "+str(time.time() - start))
		#exit()
		#print("")
		#for m in range(M):
		#	for g in range(G):
		#		for i in range(I):
		#			print("q_mgi["+str(m)+"]["+str(g)+"]["+str(i)+"] = "+str(q_mgi[m][g][i]))
		#print("")
		for m in range(M):
			#fun_sum_1(q_mgi[m], "q_mgi["+str(m)+"]", eps = 1e-7, exit_code = True)
			fun_fix_to_sum_1(q_mgi[m], "q_mgi["+str(m)+"]", eps = 1e-2, exit_code = True)
		#print_list_3D(U_mig, "U_mig", "m")
		#print_list_2D(T_mi, "T_mi")
		#print_list_3D(q_mgi, "q_mgi", "m")
		# M-step
		p_gi_old = [[p_gi[g][i]  for i in range(I)] for g in range(G)]
		p_gi = [[sum([b_mg[m][g] * q_mgi[m][g][i] for m in range(M)]) / sum([b_mg[m][g] for m in range(M)])  for i in range(I)] for g in range(G)]
		ll_m = [sum([b_mg[m][g] * sum([(q_mgi[m][g][i] - p_gi[g][i]) * np.log(p_gi[g][i]) for i in range(I)]) for g in range(G)]) for m in range(M)]
		ll = sum(ll_m)
		iteracion += 1
		delta = np.matrix.max(abs(np.matrix(p_gi) - np.matrix(p_gi_old)))
		if printear:
			print("iteracion = %d" % (iteracion))
			print("ll = %.4f" % (ll))
			print("delta = %.4f" % (delta))
			#print("p_gi = ")
			#print(np.matrix(p_gi))
			print_list_2D(p_gi, "p_gi", fila = False, transpose = True)
			#print_list_1D(b_mg[15], "b_mg")
		fun_sum_1(p_gi, "p_gi", eps = 1e-7, exit_code = False)
		#fun_fix_to_sum_1(p_gi, "p_gi", eps = 1e-1, exit_code = True)
		#for g in range(G):
		#	print("sum p_gi["+str(g)+"] = "+str(sum(p_gi[g])))
		#exit()
		#if iteracion == 3:
			#exit()
	if printear_resultados:
		print("")
		print_list_2D(p_gi, "p_gi")
		print_list_1D(ll_m, "ll_m")
	return p_gi, q_mgi, ll, ll_m, iteracion
# llamar al main
if __name__== "__main__":
	main()

#p_gi = [[0.19184068,0.26353763,0.12810623,0.10192302,0.05391346,0.09226887,0.1684101],[0.22142594,0.21409034,0.13553298,0.10816912,0.07489388,0.12198669,0.12390105],[0.167328,0.20179852,0.11389373,0.18507679,0.0973475,0.10522129,0.12933416]]

# cd '/Users/charlesthraves/Dropbox (MIT)/Research/SERVEL/Mesas Outlier 2/Codigos/Charles'

# cd '/Users/charlesthraves/Dropbox (MIT)/Research/SERVEL/Mesas Outlier 2/Codigos/Charles'